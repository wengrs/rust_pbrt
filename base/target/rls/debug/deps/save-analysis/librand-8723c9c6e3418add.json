{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113","program":"C:\\Users\\flower\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","rand","--edition=2018","C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"getrandom\"","--cfg","feature=\"libc\"","--cfg","feature=\"rand_chacha\"","--cfg","feature=\"rand_hc\"","--cfg","feature=\"std\"","--cfg","feature=\"std_rng\"","-C","metadata=8723c9c6e3418add","-C","extra-filename=-8723c9c6e3418add","--out-dir","c:\\Users\\flower\\Desktop\\PBR\\RPBR\\base\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\flower\\Desktop\\PBR\\RPBR\\base\\target\\rls\\debug\\deps","--extern","rand_chacha=c:\\Users\\flower\\Desktop\\PBR\\RPBR\\base\\target\\rls\\debug\\deps\\librand_chacha-39abc02b2ef00ce5.rmeta","--extern","rand_core=c:\\Users\\flower\\Desktop\\PBR\\RPBR\\base\\target\\rls\\debug\\deps\\librand_core-97c181c679fdaeef.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\flower\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\flower\\Desktop\\PBR\\RPBR\\base\\target\\rls\\debug\\deps\\librand-8723c9c6e3418add.rmeta"},"prelude":{"crate_id":{"name":"rand","disambiguator":[9136917920854001556,11090359337399320865]},"crate_root":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src","external_crates":[{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[17608585110195136257,12532935013018738971]}},{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[10644633998059158352,10345665241509147306]}},{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[18212625787733517551,4937265065110821766]}},{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","num":4,"id":{"name":"std","disambiguator":[45344308337484766,904807583985397655]}},{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[2699922135837212616,11588109643627721037]}},{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16653465091603201180,18239440457404116996]}},{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3073254730555026972,7758270140448631200]}},{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[13759999943095835806,4978516890064261122]}},{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[4575299228079760236,9361028770882531394]}},{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10307147502021998988,15592389341950453369]}},{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[2670035867216739096,10315597156951015330]}},{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[7309248630993686720,3186694738066578297]}},{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","num":13,"id":{"name":"rand_core","disambiguator":[11803773478052353579,9753417269323163767]}},{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","num":14,"id":{"name":"getrandom","disambiguator":[10926696981960910599,17435125810775841762]}},{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","num":15,"id":{"name":"cfg_if","disambiguator":[2165763469786474795,14178114571539448228]}},{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","num":16,"id":{"name":"rand_chacha","disambiguator":[5132328051769716122,4705295016813029713]}},{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","num":17,"id":{"name":"ppv_lite86","disambiguator":[1729911378945689890,4858834576446807216]}}],"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":408,"byte_end":6743,"line_start":10,"line_end":215,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":13,"index":145},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":2860,"byte_end":2869,"line_start":95,"line_end":95,"column_start":21,"column_end":30},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":13,"index":77},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":2871,"byte_end":2876,"line_start":95,"line_end":95,"column_start":32,"column_end":37},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":13,"index":140},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":2878,"byte_end":2885,"line_start":95,"line_end":95,"column_start":39,"column_end":46},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":13,"index":146},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":2887,"byte_end":2898,"line_start":95,"line_end":95,"column_start":48,"column_end":59},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":726},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":11194,"byte_end":11203,"line_start":99,"line_end":99,"column_start":27,"column_end":36},"alias_span":null,"name":"Bernoulli","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":733},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":11205,"byte_end":11219,"line_start":99,"line_end":99,"column_start":38,"column_end":52},"alias_span":null,"name":"BernoulliError","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":1137},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":11244,"byte_end":11250,"line_start":100,"line_end":100,"column_start":23,"column_end":29},"alias_span":null,"name":"Open01","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":1138},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":11244,"byte_end":11250,"line_start":100,"line_end":100,"column_start":23,"column_end":29},"alias_span":null,"name":"Open01","value":"","parent":{"krate":0,"index":23}},{"kind":"Use","ref_id":{"krate":0,"index":1130},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":11252,"byte_end":11264,"line_start":100,"line_end":100,"column_start":31,"column_end":43},"alias_span":null,"name":"OpenClosed01","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":1131},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":11252,"byte_end":11264,"line_start":100,"line_end":100,"column_start":31,"column_end":43},"alias_span":null,"name":"OpenClosed01","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1206},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":11288,"byte_end":11300,"line_start":101,"line_end":101,"column_start":22,"column_end":34},"alias_span":null,"name":"Alphanumeric","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":1207},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":11288,"byte_end":11300,"line_start":101,"line_end":101,"column_start":22,"column_end":34},"alias_span":null,"name":"Alphanumeric","value":"","parent":{"krate":0,"index":25}},{"kind":"Use","ref_id":{"krate":0,"index":747},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":11340,"byte_end":11347,"line_start":102,"line_end":102,"column_start":39,"column_end":46},"alias_span":null,"name":"Uniform","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":1110},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":11407,"byte_end":11420,"line_start":105,"line_end":105,"column_start":32,"column_end":45},"alias_span":null,"name":"WeightedError","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":1099},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":11422,"byte_end":11435,"line_start":105,"line_end":105,"column_start":47,"column_end":60},"alias_span":null,"name":"WeightedIndex","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":1099},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted.rs","byte_start":86387,"byte_end":86400,"line_start":14,"line_end":14,"column_start":17,"column_end":30},"alias_span":null,"name":"WeightedIndex","value":"","parent":{"krate":0,"index":140}},{"kind":"Use","ref_id":{"krate":0,"index":1110},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted.rs","byte_start":86402,"byte_end":86415,"line_start":14,"line_end":14,"column_start":32,"column_end":45},"alias_span":null,"name":"WeightedError","value":"","parent":{"krate":0,"index":140}},{"kind":"Use","ref_id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":11859,"byte_end":11868,"line_start":122,"line_end":122,"column_start":27,"column_end":36},"alias_span":null,"name":"IntoFloat","value":"","parent":{"krate":0,"index":191}},{"kind":"Use","ref_id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":149431,"byte_end":149443,"line_start":21,"line_end":21,"column_start":49,"column_end":61},"alias_span":null,"name":"Distribution","value":"","parent":{"krate":0,"index":318}},{"kind":"Use","ref_id":{"krate":0,"index":1916},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":149591,"byte_end":149597,"line_start":26,"line_end":26,"column_start":40,"column_end":46},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":318}},{"kind":"Use","ref_id":{"krate":0,"index":1930},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":149688,"byte_end":149697,"line_start":29,"line_end":29,"column_start":22,"column_end":31},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":318}},{"kind":"Use","ref_id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":149738,"byte_end":149752,"line_start":30,"line_end":30,"column_start":40,"column_end":54},"alias_span":null,"name":"IteratorRandom","value":"","parent":{"krate":0,"index":318}},{"kind":"Use","ref_id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":149754,"byte_end":149765,"line_start":30,"line_end":30,"column_start":56,"column_end":67},"alias_span":null,"name":"SliceRandom","value":"","parent":{"krate":0,"index":318}},{"kind":"Use","ref_id":{"krate":0,"index":724},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":149852,"byte_end":149858,"line_start":33,"line_end":33,"column_start":17,"column_end":23},"alias_span":null,"name":"random","value":"","parent":{"krate":0,"index":318}},{"kind":"Use","ref_id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":149860,"byte_end":149870,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"alias_span":null,"name":"thread_rng","value":"","parent":{"krate":0,"index":318}},{"kind":"Use","ref_id":{"krate":13,"index":145},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":149907,"byte_end":149916,"line_start":34,"line_end":34,"column_start":35,"column_end":44},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":318}},{"kind":"Use","ref_id":{"krate":0,"index":348},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":149918,"byte_end":149921,"line_start":34,"line_end":34,"column_start":46,"column_end":49},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":318}},{"kind":"Use","ref_id":{"krate":13,"index":140},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":149923,"byte_end":149930,"line_start":34,"line_end":34,"column_start":51,"column_end":58},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":318}},{"kind":"Use","ref_id":{"krate":13,"index":146},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":149932,"byte_end":149943,"line_start":34,"line_end":34,"column_start":60,"column_end":71},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":318}},{"kind":"Use","ref_id":{"krate":0,"index":1876},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\mod.rs","byte_start":174733,"byte_end":174742,"line_start":14,"line_end":14,"column_start":22,"column_end":31},"alias_span":null,"name":"ReadError","value":"","parent":{"krate":0,"index":379}},{"kind":"Use","ref_id":{"krate":0,"index":1870},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\mod.rs","byte_start":174744,"byte_end":174751,"line_start":14,"line_end":14,"column_start":33,"column_end":40},"alias_span":null,"name":"ReadRng","value":"","parent":{"krate":0,"index":379}},{"kind":"Use","ref_id":{"krate":0,"index":1881},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\mod.rs","byte_start":174779,"byte_end":174791,"line_start":15,"line_end":15,"column_start":26,"column_end":38},"alias_span":null,"name":"ReseedingRng","value":"","parent":{"krate":0,"index":379}},{"kind":"Use","ref_id":{"krate":0,"index":1916},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":174089,"byte_end":174095,"line_start":115,"line_end":115,"column_start":48,"column_end":54},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":378}},{"kind":"Use","ref_id":{"krate":0,"index":1930},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":174169,"byte_end":174178,"line_start":116,"line_end":116,"column_start":73,"column_end":82},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":378}},{"kind":"Use","ref_id":{"krate":13,"index":202},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":174284,"byte_end":174289,"line_start":119,"line_end":119,"column_start":50,"column_end":55},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":378}},{"kind":"Use","ref_id":{"krate":13,"index":203},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":174284,"byte_end":174289,"line_start":119,"line_end":119,"column_start":50,"column_end":55},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":516}},{"kind":"Use","ref_id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":3094,"byte_end":3104,"line_start":106,"line_end":106,"column_start":30,"column_end":40},"alias_span":null,"name":"thread_rng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":3120,"byte_end":3124,"line_start":107,"line_end":107,"column_start":15,"column_end":19},"alias_span":null,"name":"Fill","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":348},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":3126,"byte_end":3129,"line_start":107,"line_end":107,"column_start":21,"column_end":24},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":408,"byte_end":6743,"line_start":10,"line_end":215,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":318},{"krate":0,"index":333},{"krate":0,"index":378},{"krate":0,"index":517},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":2284},{"krate":0,"index":724}],"decl_id":null,"docs":" Utilities for random number generation","sig":null,"attributes":[{"value":"/ Utilities for random number generation","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":408,"byte_end":450,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":451,"byte_end":454,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Rand provides utilities to generate random numbers, to convert them to","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":455,"byte_end":529,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ useful types and distributions, and some randomness-related algorithms.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":530,"byte_end":605,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":606,"byte_end":609,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Quick Start","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":610,"byte_end":627,"line_start":15,"line_end":15,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":628,"byte_end":631,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ To get you started quickly, the easiest and highest-level way to get","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":632,"byte_end":704,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/ a random value is to use [`random()`]; alternatively you can use","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":705,"byte_end":773,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/ [`thread_rng()`]. The [`Rng`] trait provides a useful API on all RNGs, while","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":774,"byte_end":854,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ the [`distributions`] and [`seq`] modules provide further","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":855,"byte_end":916,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"/ functionality on top of RNGs.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":917,"byte_end":950,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":951,"byte_end":954,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":955,"byte_end":962,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":963,"byte_end":988,"line_start":24,"line_end":24,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":989,"byte_end":992,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ if rand::random() { // generates a boolean","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":993,"byte_end":1039,"line_start":26,"line_end":26,"column_start":1,"column_end":47}},{"value":"/     // Try printing a random unicode code point (probably a bad idea)!","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":1040,"byte_end":1114,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"/     println!(\"char: {}\", rand::random::<char>());","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":1115,"byte_end":1168,"line_start":28,"line_end":28,"column_start":1,"column_end":54}},{"value":"/ }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":1169,"byte_end":1174,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":1175,"byte_end":1178,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":1179,"byte_end":1216,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"/ let y: f64 = rng.gen(); // generates a float between 0 and 1","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":1217,"byte_end":1281,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":1282,"byte_end":1285,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let mut nums: Vec<i32> = (1..100).collect();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":1286,"byte_end":1334,"line_start":34,"line_end":34,"column_start":1,"column_end":49}},{"value":"/ nums.shuffle(&mut rng);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":1335,"byte_end":1362,"line_start":35,"line_end":35,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":1363,"byte_end":1370,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":1371,"byte_end":1374,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # The Book","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":1375,"byte_end":1389,"line_start":38,"line_end":38,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":1390,"byte_end":1393,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ For the user guide and further documentation, please read","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":1394,"byte_end":1455,"line_start":40,"line_end":40,"column_start":1,"column_end":62}},{"value":"/ [The Rust Rand Book](https://rust-random.github.io/book).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":1456,"byte_end":1517,"line_start":41,"line_end":41,"column_start":1,"column_end":62}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":1733,"byte_end":1755,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":1756,"byte_end":1795,"line_start":49,"line_end":49,"column_start":1,"column_end":40}},{"value":"no_std","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":1857,"byte_end":1867,"line_start":51,"line_end":51,"column_start":1,"column_end":11}},{"value":"allow(clippy :: float_cmp, clippy :: neg_cmp_op_on_partial_ord,)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":2034,"byte_end":2108,"line_start":55,"line_end":58,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":16},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"distributions","qualname":"::distributions","value":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","parent":null,"children":[{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":2002},{"krate":0,"index":24},{"krate":0,"index":2004},{"krate":0,"index":25},{"krate":0,"index":2006},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":47},{"krate":0,"index":140},{"krate":0,"index":153},{"krate":0,"index":180},{"krate":0,"index":191},{"krate":0,"index":193},{"krate":0,"index":225},{"krate":0,"index":258},{"krate":0,"index":295},{"krate":0,"index":301},{"krate":0,"index":1573},{"krate":0,"index":1580},{"krate":0,"index":307},{"krate":0,"index":314},{"krate":0,"index":1585},{"krate":0,"index":1590},{"krate":0,"index":1589},{"krate":0,"index":1587}],"decl_id":null,"docs":" Generating random samples from probability distributions","sig":null,"attributes":[{"value":"/ Generating random samples from probability distributions","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":7153,"byte_end":7213,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":7214,"byte_end":7217,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This module is the home of the [`Distribution`] trait and several of its","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":7218,"byte_end":7294,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ implementations. It is the workhorse behind some of the convenient","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":7295,"byte_end":7365,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"/ functionality of the [`Rng`] trait, e.g. [`Rng::gen`] and of course","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":7366,"byte_end":7437,"line_start":14,"line_end":14,"column_start":1,"column_end":72}},{"value":"/ [`Rng::sample`].","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":7438,"byte_end":7458,"line_start":15,"line_end":15,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":7459,"byte_end":7462,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Abstractly, a [probability distribution] describes the probability of","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":7463,"byte_end":7536,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"/ occurrence of each value in its sample space.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":7537,"byte_end":7586,"line_start":18,"line_end":18,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":7587,"byte_end":7590,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ More concretely, an implementation of `Distribution<T>` for type `X` is an","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":7591,"byte_end":7669,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ algorithm for choosing values from the sample space (a subset of `T`)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":7670,"byte_end":7743,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"/ according to the distribution `X` represents, using an external source of","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":7744,"byte_end":7821,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ randomness (an RNG supplied to the `sample` function).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":7822,"byte_end":7880,"line_start":23,"line_end":23,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":7881,"byte_end":7884,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ A type `X` may implement `Distribution<T>` for multiple types `T`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":7885,"byte_end":7955,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/ Any type implementing [`Distribution`] is stateless (i.e. immutable),","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":7956,"byte_end":8029,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/ but it may have internal parameters set at construction time (for example,","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8030,"byte_end":8108,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ [`Uniform`] allows specification of its sample space as a range within `T`).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8109,"byte_end":8189,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8190,"byte_end":8193,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8194,"byte_end":8197,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # The `Standard` distribution","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8198,"byte_end":8231,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8232,"byte_end":8235,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ The [`Standard`] distribution is important to mention. This is the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8236,"byte_end":8306,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/ distribution used by [`Rng::gen`] and represents the \"default\" way to","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8307,"byte_end":8380,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/ produce a random value for many different types, including most primitive","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8381,"byte_end":8458,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ types, tuples, arrays, and a few derived types. See the documentation of","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8459,"byte_end":8535,"line_start":36,"line_end":36,"column_start":1,"column_end":77}},{"value":"/ [`Standard`] for more details.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8536,"byte_end":8570,"line_start":37,"line_end":37,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8571,"byte_end":8574,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Implementing `Distribution<T>` for [`Standard`] for user types `T` makes it","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8575,"byte_end":8654,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ possible to generate type `T` with [`Rng::gen`], and by extension also","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8655,"byte_end":8729,"line_start":40,"line_end":40,"column_start":1,"column_end":75}},{"value":"/ with the [`random`] function.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8730,"byte_end":8763,"line_start":41,"line_end":41,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8764,"byte_end":8767,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ## Random characters","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8768,"byte_end":8792,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8793,"byte_end":8796,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ [`Alphanumeric`] is a simple distribution to sample random letters and","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8797,"byte_end":8871,"line_start":45,"line_end":45,"column_start":1,"column_end":75}},{"value":"/ numbers of the `char` type; in contrast [`Standard`] may sample any valid","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8872,"byte_end":8949,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"/ `char`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8950,"byte_end":8961,"line_start":47,"line_end":47,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8962,"byte_end":8965,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8966,"byte_end":8969,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ # Uniform numeric ranges","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8970,"byte_end":8998,"line_start":50,"line_end":50,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":8999,"byte_end":9002,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ The [`Uniform`] distribution is more flexible than [`Standard`], but also","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":9003,"byte_end":9080,"line_start":52,"line_end":52,"column_start":1,"column_end":78}},{"value":"/ more specialised: it supports fewer target types, but allows the sample","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":9081,"byte_end":9156,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"/ space to be specified as an arbitrary range within its target type `T`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":9157,"byte_end":9232,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/ Both [`Standard`] and [`Uniform`] are in some sense uniform distributions.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":9233,"byte_end":9311,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":9312,"byte_end":9315,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Values may be sampled from this distribution using [`Rng::sample(Range)`] or","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":9316,"byte_end":9396,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"/ by creating a distribution object with [`Uniform::new`],","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":9397,"byte_end":9457,"line_start":58,"line_end":58,"column_start":1,"column_end":61}},{"value":"/ [`Uniform::new_inclusive`] or `From<Range>`. When the range limits are not","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":9458,"byte_end":9536,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/ known at compile time it is typically faster to reuse an existing","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":9537,"byte_end":9606,"line_start":60,"line_end":60,"column_start":1,"column_end":70}},{"value":"/ `Uniform` object than to call [`Rng::sample(Range)`].","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":9607,"byte_end":9664,"line_start":61,"line_end":61,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":9665,"byte_end":9668,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ User types `T` may also implement `Distribution<T>` for [`Uniform`],","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":9669,"byte_end":9741,"line_start":63,"line_end":63,"column_start":1,"column_end":73}},{"value":"/ although this is less straightforward than for [`Standard`] (see the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":9742,"byte_end":9814,"line_start":64,"line_end":64,"column_start":1,"column_end":73}},{"value":"/ documentation in the [`uniform`] module). Doing so enables generation of","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":9815,"byte_end":9891,"line_start":65,"line_end":65,"column_start":1,"column_end":77}},{"value":"/ values of type `T` with  [`Rng::sample(Range)`].","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":9892,"byte_end":9944,"line_start":66,"line_end":66,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":9945,"byte_end":9948,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ ## Open and half-open ranges","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":9949,"byte_end":9981,"line_start":68,"line_end":68,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":9982,"byte_end":9985,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ There are surprisingly many ways to uniformly generate random floats. A","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":9986,"byte_end":10061,"line_start":70,"line_end":70,"column_start":1,"column_end":76}},{"value":"/ range between 0 and 1 is standard, but the exact bounds (open vs closed)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":10062,"byte_end":10138,"line_start":71,"line_end":71,"column_start":1,"column_end":77}},{"value":"/ and accuracy differ. In addition to the [`Standard`] distribution Rand offers","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":10139,"byte_end":10220,"line_start":72,"line_end":72,"column_start":1,"column_end":82}},{"value":"/ [`Open01`] and [`OpenClosed01`]. See \"Floating point implementation\" section of","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":10221,"byte_end":10304,"line_start":73,"line_end":73,"column_start":1,"column_end":84}},{"value":"/ [`Standard`] documentation for more details.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":10305,"byte_end":10353,"line_start":74,"line_end":74,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":10354,"byte_end":10357,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ # Non-uniform sampling","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":10358,"byte_end":10384,"line_start":76,"line_end":76,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":10385,"byte_end":10388,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ Sampling a simple true/false outcome with a given probability has a name:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":10389,"byte_end":10466,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"/ the [`Bernoulli`] distribution (this is used by [`Rng::gen_bool`]).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":10467,"byte_end":10538,"line_start":79,"line_end":79,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":10539,"byte_end":10542,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ For weighted sampling from a sequence of discrete values, use the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":10543,"byte_end":10612,"line_start":81,"line_end":81,"column_start":1,"column_end":70}},{"value":"/ [`WeightedIndex`] distribution.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":10613,"byte_end":10648,"line_start":82,"line_end":82,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":10649,"byte_end":10652,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ This crate no longer includes other non-uniform distributions; instead","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":10653,"byte_end":10727,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"/ it is recommended that you use either [`rand_distr`] or [`statrs`].","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":10728,"byte_end":10799,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":10800,"byte_end":10803,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":10804,"byte_end":10807,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ [probability distribution]: https://en.wikipedia.org/wiki/Probability_distribution","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":10808,"byte_end":10894,"line_start":88,"line_end":88,"column_start":1,"column_end":87}},{"value":"/ [`rand_distr`]: https://crates.io/crates/rand_distr","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":10895,"byte_end":10950,"line_start":89,"line_end":89,"column_start":1,"column_end":56}},{"value":"/ [`statrs`]: https://crates.io/crates/statrs","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":10951,"byte_end":10998,"line_start":90,"line_end":90,"column_start":1,"column_end":48}},{"value":"/ [`random`]: crate::random","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":11000,"byte_end":11029,"line_start":92,"line_end":92,"column_start":1,"column_end":30}},{"value":"/ [`rand_distr`]: https://crates.io/crates/rand_distr","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":11030,"byte_end":11085,"line_start":93,"line_end":93,"column_start":1,"column_end":56}},{"value":"/ [`statrs`]: https://crates.io/crates/statrs","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":11086,"byte_end":11133,"line_start":94,"line_end":94,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":726},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":21505,"byte_end":21514,"line_start":38,"line_end":38,"column_start":12,"column_end":21},"name":"Bernoulli","qualname":"::distributions::bernoulli::Bernoulli","value":"Bernoulli {  }","parent":null,"children":[{"krate":0,"index":727}],"decl_id":null,"docs":" The Bernoulli distribution.","sig":null,"attributes":[{"value":"/ The Bernoulli distribution.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":20863,"byte_end":20894,"line_start":17,"line_end":17,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":20895,"byte_end":20898,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This is a special case of the Binomial distribution where `n = 1`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":20899,"byte_end":20969,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":20970,"byte_end":20973,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":20974,"byte_end":20987,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":20988,"byte_end":20991,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":20992,"byte_end":21003,"line_start":23,"line_end":23,"column_start":1,"column_end":12}},{"value":"/ use rand::distributions::{Bernoulli, Distribution};","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":21004,"byte_end":21059,"line_start":24,"line_end":24,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":21060,"byte_end":21063,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ let d = Bernoulli::new(0.3).unwrap();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":21064,"byte_end":21105,"line_start":26,"line_end":26,"column_start":1,"column_end":42}},{"value":"/ let v = d.sample(&mut rand::thread_rng());","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":21106,"byte_end":21152,"line_start":27,"line_end":27,"column_start":1,"column_end":47}},{"value":"/ println!(\"{} is from a Bernoulli distribution\", v);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":21153,"byte_end":21208,"line_start":28,"line_end":28,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":21209,"byte_end":21216,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":21217,"byte_end":21220,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Precision","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":21221,"byte_end":21236,"line_start":31,"line_end":31,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":21237,"byte_end":21240,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ This `Bernoulli` distribution uses 64 bits from the RNG (a `u64`),","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":21241,"byte_end":21311,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/ so only probabilities that are multiples of 2<sup>-64</sup> can be","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":21312,"byte_end":21382,"line_start":34,"line_end":34,"column_start":1,"column_end":71}},{"value":"/ represented.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":21383,"byte_end":21399,"line_start":35,"line_end":35,"column_start":1,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":734},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":22979,"byte_end":22997,"line_start":72,"line_end":72,"column_start":5,"column_end":23},"name":"InvalidProbability","qualname":"::distributions::bernoulli::BernoulliError::InvalidProbability","value":"BernoulliError::InvalidProbability","parent":{"krate":0,"index":733},"children":[],"decl_id":null,"docs":" `p < 0` or `p > 1`.\n","sig":null,"attributes":[{"value":"/ `p < 0` or `p > 1`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":22951,"byte_end":22974,"line_start":71,"line_end":71,"column_start":5,"column_end":28}}]},{"kind":"Enum","id":{"krate":0,"index":733},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":22930,"byte_end":22944,"line_start":70,"line_end":70,"column_start":10,"column_end":24},"name":"BernoulliError","qualname":"::distributions::bernoulli::BernoulliError","value":"pub enum BernoulliError {\n\n    /// `p < 0` or `p > 1`.\n    InvalidProbability,\n}","parent":null,"children":[{"krate":0,"index":734}],"decl_id":null,"docs":" Error type returned from `Bernoulli::new`.\n","sig":null,"attributes":[{"value":"/ Error type returned from `Bernoulli::new`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":22829,"byte_end":22875,"line_start":68,"line_end":68,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":23868,"byte_end":23871,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"new","qualname":"<Bernoulli>::new","value":"pub fn new(f64) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the given probability of success `p`.","sig":null,"attributes":[{"value":"/ Construct a new `Bernoulli` with the given probability of success `p`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":23349,"byte_end":23423,"line_start":87,"line_end":87,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":23428,"byte_end":23431,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ # Precision","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":23436,"byte_end":23451,"line_start":89,"line_end":89,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":23456,"byte_end":23459,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ For `p = 1.0`, the resulting distribution will always generate true.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":23464,"byte_end":23536,"line_start":91,"line_end":91,"column_start":5,"column_end":77}},{"value":"/ For `p = 0.0`, the resulting distribution will always generate false.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":23541,"byte_end":23614,"line_start":92,"line_end":92,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":23619,"byte_end":23622,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ This method is accurate for any input `p` in the range `[0, 1]` which is","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":23627,"byte_end":23703,"line_start":94,"line_end":94,"column_start":5,"column_end":81}},{"value":"/ a multiple of 2<sup>-64</sup>. (Note that not all multiples of","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":23708,"byte_end":23774,"line_start":95,"line_end":95,"column_start":5,"column_end":71}},{"value":"/ 2<sup>-64</sup> in `[0, 1]` can be represented as a `f64`.)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":23779,"byte_end":23842,"line_start":96,"line_end":96,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":23847,"byte_end":23856,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":24752,"byte_end":24762,"line_start":119,"line_end":119,"column_start":12,"column_end":22},"name":"from_ratio","qualname":"<Bernoulli>::from_ratio","value":"pub fn from_ratio(u32, u32) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the probability of success of\n `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return\n a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","sig":null,"attributes":[{"value":"/ Construct a new `Bernoulli` with the probability of success of","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":24210,"byte_end":24276,"line_start":110,"line_end":110,"column_start":5,"column_end":71}},{"value":"/ `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":24281,"byte_end":24349,"line_start":111,"line_end":111,"column_start":5,"column_end":73}},{"value":"/ a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":24354,"byte_end":24428,"line_start":112,"line_end":112,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":24433,"byte_end":24436,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ return `true`. If `numerator == 0` it will always return `false`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":24441,"byte_end":24510,"line_start":114,"line_end":114,"column_start":5,"column_end":74}},{"value":"/ For `numerator > denominator` and `denominator == 0`, this returns an","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":24515,"byte_end":24588,"line_start":115,"line_end":115,"column_start":5,"column_end":78}},{"value":"/ error. Otherwise, for `numerator == denominator`, samples are always","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":24593,"byte_end":24665,"line_start":116,"line_end":116,"column_start":5,"column_end":77}},{"value":"/ true; for `numerator == 0` samples are always false.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":24670,"byte_end":24726,"line_start":117,"line_end":117,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":24731,"byte_end":24740,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"uniform","qualname":"::distributions::uniform","value":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":747},{"krate":0,"index":756},{"krate":0,"index":754},{"krate":0,"index":751},{"krate":0,"index":62},{"krate":0,"index":70},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":110},{"krate":0,"index":115},{"krate":0,"index":120},{"krate":0,"index":759},{"krate":0,"index":769},{"krate":0,"index":767},{"krate":0,"index":764},{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":792},{"krate":0,"index":794},{"krate":0,"index":812},{"krate":0,"index":814},{"krate":0,"index":832},{"krate":0,"index":834},{"krate":0,"index":852},{"krate":0,"index":854},{"krate":0,"index":872},{"krate":0,"index":874},{"krate":0,"index":892},{"krate":0,"index":894},{"krate":0,"index":912},{"krate":0,"index":914},{"krate":0,"index":932},{"krate":0,"index":934},{"krate":0,"index":952},{"krate":0,"index":954},{"krate":0,"index":972},{"krate":0,"index":974},{"krate":0,"index":992},{"krate":0,"index":994},{"krate":0,"index":1012},{"krate":0,"index":1021},{"krate":0,"index":1019},{"krate":0,"index":1016},{"krate":0,"index":1024},{"krate":0,"index":1026},{"krate":0,"index":1040},{"krate":0,"index":1042},{"krate":0,"index":1056},{"krate":0,"index":1062},{"krate":0,"index":1061},{"krate":0,"index":1059},{"krate":0,"index":1064},{"krate":0,"index":1077},{"krate":0,"index":1076},{"krate":0,"index":1074},{"krate":0,"index":127},{"krate":0,"index":129}],"decl_id":null,"docs":" A distribution uniformly sampling numbers within a given range.","sig":null,"attributes":[{"value":"/ A distribution uniformly sampling numbers within a given range.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":28068,"byte_end":28135,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":28136,"byte_end":28139,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Uniform`] is the standard distribution to sample uniformly from a range;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":28140,"byte_end":28218,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/ e.g. `Uniform::new_inclusive(1, 6)` can sample integers from 1 to 6, like a","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":28219,"byte_end":28298,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ standard die. [`Rng::gen_range`] supports any type supported by","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":28299,"byte_end":28366,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"/ [`Uniform`].","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":28367,"byte_end":28383,"line_start":15,"line_end":15,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":28384,"byte_end":28387,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This distribution is provided with support for several primitive types","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":28388,"byte_end":28462,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ (all integer and floating-point types) as well as [`std::time::Duration`],","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":28463,"byte_end":28541,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/ and supports extension to user-defined types via a type-specific *back-end*","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":28542,"byte_end":28621,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ implementation.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":28622,"byte_end":28641,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":28642,"byte_end":28645,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ The types [`UniformInt`], [`UniformFloat`] and [`UniformDuration`] are the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":28646,"byte_end":28724,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ back-ends supporting sampling from primitive integer and floating-point","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":28725,"byte_end":28800,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ ranges as well as from [`std::time::Duration`]; these types do not normally","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":28801,"byte_end":28880,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ need to be used directly (unless implementing a derived back-end).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":28881,"byte_end":28951,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":28952,"byte_end":28955,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Example usage","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":28956,"byte_end":28975,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":28976,"byte_end":28979,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":28980,"byte_end":28987,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use rand::{Rng, thread_rng};","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":28988,"byte_end":29020,"line_start":30,"line_end":30,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Uniform;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29021,"byte_end":29058,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29059,"byte_end":29062,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29063,"byte_end":29094,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/ let side = Uniform::new(-10.0, 10.0);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29095,"byte_end":29136,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29137,"byte_end":29140,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // sample between 1 and 10 points","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29141,"byte_end":29178,"line_start":36,"line_end":36,"column_start":1,"column_end":38}},{"value":"/ for _ in 0..rng.gen_range(1..=10) {","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29179,"byte_end":29218,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/     // sample a point from the square with sides -10 - 10 in two dimensions","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29219,"byte_end":29298,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/     let (x, y) = (rng.sample(side), rng.sample(side));","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29299,"byte_end":29357,"line_start":39,"line_end":39,"column_start":1,"column_end":59}},{"value":"/     println!(\"Point: {}, {}\", x, y);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29358,"byte_end":29398,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/ }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29399,"byte_end":29404,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29405,"byte_end":29412,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29413,"byte_end":29416,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Extending `Uniform` to support a custom type","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29417,"byte_end":29467,"line_start":44,"line_end":44,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29468,"byte_end":29471,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ To extend [`Uniform`] to support your own types, write a back-end which","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29472,"byte_end":29547,"line_start":46,"line_end":46,"column_start":1,"column_end":76}},{"value":"/ implements the [`UniformSampler`] trait, then implement the [`SampleUniform`]","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29548,"byte_end":29629,"line_start":47,"line_end":47,"column_start":1,"column_end":82}},{"value":"/ helper trait to \"register\" your back-end. See the `MyF32` example below.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29630,"byte_end":29706,"line_start":48,"line_end":48,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29707,"byte_end":29710,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ At a minimum, the back-end needs to store any parameters needed for sampling","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29711,"byte_end":29791,"line_start":50,"line_end":50,"column_start":1,"column_end":81}},{"value":"/ (e.g. the target range) and implement `new`, `new_inclusive` and `sample`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29792,"byte_end":29870,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ Those methods should include an assert to check the range is valid (i.e.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29871,"byte_end":29947,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"/ `low < high`). The example below merely wraps another back-end.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":29948,"byte_end":30015,"line_start":53,"line_end":53,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30016,"byte_end":30019,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ The `new`, `new_inclusive` and `sample_single` functions use arguments of","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30020,"byte_end":30097,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/ type SampleBorrow<X> in order to support passing in values by reference or","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30098,"byte_end":30176,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"/ by value. In the implementation of these functions, you can choose to","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30177,"byte_end":30250,"line_start":57,"line_end":57,"column_start":1,"column_end":74}},{"value":"/ simply use the reference returned by [`SampleBorrow::borrow`], or you can choose","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30251,"byte_end":30335,"line_start":58,"line_end":58,"column_start":1,"column_end":85}},{"value":"/ to copy or clone the value, whatever is appropriate for your type.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30336,"byte_end":30406,"line_start":59,"line_end":59,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30407,"byte_end":30410,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30411,"byte_end":30418,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30419,"byte_end":30444,"line_start":62,"line_end":62,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::uniform::{Uniform, SampleUniform,","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30445,"byte_end":30507,"line_start":63,"line_end":63,"column_start":1,"column_end":63}},{"value":"/         UniformSampler, UniformFloat, SampleBorrow};","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30508,"byte_end":30564,"line_start":64,"line_end":64,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30565,"byte_end":30568,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ struct MyF32(f32);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30569,"byte_end":30591,"line_start":66,"line_end":66,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30592,"byte_end":30595,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ #[derive(Clone, Copy, Debug)]","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30596,"byte_end":30629,"line_start":68,"line_end":68,"column_start":1,"column_end":34}},{"value":"/ struct UniformMyF32(UniformFloat<f32>);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30630,"byte_end":30673,"line_start":69,"line_end":69,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30674,"byte_end":30677,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ impl UniformSampler for UniformMyF32 {","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30678,"byte_end":30720,"line_start":71,"line_end":71,"column_start":1,"column_end":43}},{"value":"/     type X = MyF32;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30721,"byte_end":30744,"line_start":72,"line_end":72,"column_start":1,"column_end":24}},{"value":"/     fn new<B1, B2>(low: B1, high: B2) -> Self","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30745,"byte_end":30794,"line_start":73,"line_end":73,"column_start":1,"column_end":50}},{"value":"/         where B1: SampleBorrow<Self::X> + Sized,","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30795,"byte_end":30847,"line_start":74,"line_end":74,"column_start":1,"column_end":53}},{"value":"/               B2: SampleBorrow<Self::X> + Sized","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30848,"byte_end":30899,"line_start":75,"line_end":75,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30900,"byte_end":30909,"line_start":76,"line_end":76,"column_start":1,"column_end":10}},{"value":"/         UniformMyF32(UniformFloat::<f32>::new(low.borrow().0, high.borrow().0))","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30910,"byte_end":30993,"line_start":77,"line_end":77,"column_start":1,"column_end":84}},{"value":"/     }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":30994,"byte_end":31003,"line_start":78,"line_end":78,"column_start":1,"column_end":10}},{"value":"/     fn new_inclusive<B1, B2>(low: B1, high: B2) -> Self","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31004,"byte_end":31063,"line_start":79,"line_end":79,"column_start":1,"column_end":60}},{"value":"/         where B1: SampleBorrow<Self::X> + Sized,","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31064,"byte_end":31116,"line_start":80,"line_end":80,"column_start":1,"column_end":53}},{"value":"/               B2: SampleBorrow<Self::X> + Sized","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31117,"byte_end":31168,"line_start":81,"line_end":81,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31169,"byte_end":31178,"line_start":82,"line_end":82,"column_start":1,"column_end":10}},{"value":"/         UniformSampler::new(low, high)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31179,"byte_end":31221,"line_start":83,"line_end":83,"column_start":1,"column_end":43}},{"value":"/     }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31222,"byte_end":31231,"line_start":84,"line_end":84,"column_start":1,"column_end":10}},{"value":"/     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Self::X {","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31232,"byte_end":31299,"line_start":85,"line_end":85,"column_start":1,"column_end":68}},{"value":"/         MyF32(self.0.sample(rng))","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31300,"byte_end":31337,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"/     }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31338,"byte_end":31347,"line_start":87,"line_end":87,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31348,"byte_end":31353,"line_start":88,"line_end":88,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31354,"byte_end":31357,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ impl SampleUniform for MyF32 {","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31358,"byte_end":31392,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"/     type Sampler = UniformMyF32;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31393,"byte_end":31429,"line_start":91,"line_end":91,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31430,"byte_end":31435,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31436,"byte_end":31439,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ let (low, high) = (MyF32(17.0f32), MyF32(22.0f32));","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31440,"byte_end":31495,"line_start":94,"line_end":94,"column_start":1,"column_end":56}},{"value":"/ let uniform = Uniform::new(low, high);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31496,"byte_end":31538,"line_start":95,"line_end":95,"column_start":1,"column_end":43}},{"value":"/ let x = uniform.sample(&mut thread_rng());","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31539,"byte_end":31585,"line_start":96,"line_end":96,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31586,"byte_end":31593,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31594,"byte_end":31597,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ [`SampleUniform`]: crate::distributions::uniform::SampleUniform","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31598,"byte_end":31665,"line_start":99,"line_end":99,"column_start":1,"column_end":68}},{"value":"/ [`UniformSampler`]: crate::distributions::uniform::UniformSampler","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31666,"byte_end":31735,"line_start":100,"line_end":100,"column_start":1,"column_end":70}},{"value":"/ [`UniformInt`]: crate::distributions::uniform::UniformInt","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31736,"byte_end":31797,"line_start":101,"line_end":101,"column_start":1,"column_end":62}},{"value":"/ [`UniformFloat`]: crate::distributions::uniform::UniformFloat","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31798,"byte_end":31863,"line_start":102,"line_end":102,"column_start":1,"column_end":66}},{"value":"/ [`UniformDuration`]: crate::distributions::uniform::UniformDuration","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31864,"byte_end":31935,"line_start":103,"line_end":103,"column_start":1,"column_end":72}},{"value":"/ [`SampleBorrow::borrow`]: crate::distributions::uniform::SampleBorrow::borrow","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":31936,"byte_end":32017,"line_start":104,"line_end":104,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":747},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34617,"byte_end":34624,"line_start":175,"line_end":175,"column_start":12,"column_end":19},"name":"Uniform","qualname":"::distributions::uniform::Uniform","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample values uniformly between two bounds.","sig":null,"attributes":[{"value":"/ Sample values uniformly between two bounds.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":32635,"byte_end":32682,"line_start":124,"line_end":124,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":32683,"byte_end":32686,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ [`Uniform::new`] and [`Uniform::new_inclusive`] construct a uniform","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":32687,"byte_end":32758,"line_start":126,"line_end":126,"column_start":1,"column_end":72}},{"value":"/ distribution sampling from the given range; these functions may do extra","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":32759,"byte_end":32835,"line_start":127,"line_end":127,"column_start":1,"column_end":77}},{"value":"/ work up front to make sampling of multiple values faster. If only one sample","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":32836,"byte_end":32916,"line_start":128,"line_end":128,"column_start":1,"column_end":81}},{"value":"/ from the range is required, [`Rng::gen_range`] can be more efficient.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":32917,"byte_end":32990,"line_start":129,"line_end":129,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":32991,"byte_end":32994,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ When sampling from a constant range, many calculations can happen at","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":32995,"byte_end":33067,"line_start":131,"line_end":131,"column_start":1,"column_end":73}},{"value":"/ compile-time and all methods should be fast; for floating-point ranges and","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":33068,"byte_end":33146,"line_start":132,"line_end":132,"column_start":1,"column_end":79}},{"value":"/ the full range of integer types this should have comparable performance to","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":33147,"byte_end":33225,"line_start":133,"line_end":133,"column_start":1,"column_end":79}},{"value":"/ the `Standard` distribution.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":33226,"byte_end":33258,"line_start":134,"line_end":134,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":33259,"byte_end":33262,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ Steps are taken to avoid bias which might be present in naive","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":33263,"byte_end":33328,"line_start":136,"line_end":136,"column_start":1,"column_end":66}},{"value":"/ implementations; for example `rng.gen::<u8>() % 170` samples from the range","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":33329,"byte_end":33408,"line_start":137,"line_end":137,"column_start":1,"column_end":80}},{"value":"/ `[0, 169]` but is twice as likely to select numbers less than 85 than other","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":33409,"byte_end":33488,"line_start":138,"line_end":138,"column_start":1,"column_end":80}},{"value":"/ values. Further, the implementations here give more weight to the high-bits","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":33489,"byte_end":33568,"line_start":139,"line_end":139,"column_start":1,"column_end":80}},{"value":"/ generated by the RNG than the low bits, since with some RNGs the low-bits","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":33569,"byte_end":33646,"line_start":140,"line_end":140,"column_start":1,"column_end":78}},{"value":"/ are of lower quality than the high bits.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":33647,"byte_end":33691,"line_start":141,"line_end":141,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":33692,"byte_end":33695,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ Implementations must sample in `[low, high)` range for","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":33696,"byte_end":33754,"line_start":143,"line_end":143,"column_start":1,"column_end":59}},{"value":"/ `Uniform::new(low, high)`, i.e., excluding `high`. In particular, care must","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":33755,"byte_end":33834,"line_start":144,"line_end":144,"column_start":1,"column_end":80}},{"value":"/ be taken to ensure that rounding never results values `< low` or `>= high`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":33835,"byte_end":33914,"line_start":145,"line_end":145,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":33915,"byte_end":33918,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":33919,"byte_end":33932,"line_start":147,"line_end":147,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":33933,"byte_end":33936,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":33937,"byte_end":33944,"line_start":149,"line_end":149,"column_start":1,"column_end":8}},{"value":"/ use rand::distributions::{Distribution, Uniform};","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":33945,"byte_end":33998,"line_start":150,"line_end":150,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":33999,"byte_end":34002,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ let between = Uniform::from(10..10000);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34003,"byte_end":34046,"line_start":152,"line_end":152,"column_start":1,"column_end":44}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34047,"byte_end":34084,"line_start":153,"line_end":153,"column_start":1,"column_end":38}},{"value":"/ let mut sum = 0;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34085,"byte_end":34105,"line_start":154,"line_end":154,"column_start":1,"column_end":21}},{"value":"/ for _ in 0..1000 {","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34106,"byte_end":34128,"line_start":155,"line_end":155,"column_start":1,"column_end":23}},{"value":"/     sum += between.sample(&mut rng);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34129,"byte_end":34169,"line_start":156,"line_end":156,"column_start":1,"column_end":41}},{"value":"/ }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34170,"byte_end":34175,"line_start":157,"line_end":157,"column_start":1,"column_end":6}},{"value":"/ println!(\"{}\", sum);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34176,"byte_end":34200,"line_start":158,"line_end":158,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34201,"byte_end":34208,"line_start":159,"line_end":159,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34209,"byte_end":34212,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ For a single sample, [`Rng::gen_range`] may be prefered:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34213,"byte_end":34273,"line_start":161,"line_end":161,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34274,"byte_end":34277,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34278,"byte_end":34285,"line_start":163,"line_end":163,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34286,"byte_end":34304,"line_start":164,"line_end":164,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34305,"byte_end":34308,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34309,"byte_end":34346,"line_start":166,"line_end":166,"column_start":1,"column_end":38}},{"value":"/ println!(\"{}\", rng.gen_range(0..10));","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34347,"byte_end":34388,"line_start":167,"line_end":167,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34389,"byte_end":34396,"line_start":168,"line_end":168,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34397,"byte_end":34400,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ [`new`]: Uniform::new","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34401,"byte_end":34426,"line_start":170,"line_end":170,"column_start":1,"column_end":26}},{"value":"/ [`new_inclusive`]: Uniform::new_inclusive","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34427,"byte_end":34472,"line_start":171,"line_end":171,"column_start":1,"column_end":46}},{"value":"/ [`Rng::gen_range`]: Rng::gen_range","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34473,"byte_end":34511,"line_start":172,"line_end":172,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34860,"byte_end":34863,"line_start":180,"line_end":180,"column_start":12,"column_end":15},"name":"new","qualname":"<Uniform<X>>::new","value":"pub fn new<B1, B2>(B1, B2) -> Uniform<X> where B1: SampleBorrow<X> + Sized,\nB2: SampleBorrow<X> + Sized","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the half\n open range `[low, high)` (excluding `high`). Panics if `low >= high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Uniform` instance which samples uniformly from the half","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34697,"byte_end":34770,"line_start":178,"line_end":178,"column_start":5,"column_end":78}},{"value":"/ open range `[low, high)` (excluding `high`). Panics if `low >= high`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34775,"byte_end":34848,"line_start":179,"line_end":179,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":35202,"byte_end":35215,"line_start":190,"line_end":190,"column_start":12,"column_end":25},"name":"new_inclusive","qualname":"<Uniform<X>>::new_inclusive","value":"pub fn new_inclusive<B1, B2>(B1, B2) -> Uniform<X> where B1: SampleBorrow<X> +\nSized, B2: SampleBorrow<X> + Sized","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the closed\n range `[low, high]` (inclusive). Panics if `low > high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Uniform` instance which samples uniformly from the closed","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":35050,"byte_end":35125,"line_start":188,"line_end":188,"column_start":5,"column_end":80}},{"value":"/ range `[low, high]` (inclusive). Panics if `low > high`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":35130,"byte_end":35190,"line_start":189,"line_end":189,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":35861,"byte_end":35874,"line_start":212,"line_end":212,"column_start":11,"column_end":24},"name":"SampleUniform","qualname":"::distributions::uniform::SampleUniform","value":"SampleUniform: Sized","parent":null,"children":[{"krate":0,"index":75}],"decl_id":null,"docs":" Helper trait for creating objects using the correct implementation of\n [`UniformSampler`] for the sampling type.","sig":null,"attributes":[{"value":"/ Helper trait for creating objects using the correct implementation of","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":35560,"byte_end":35633,"line_start":205,"line_end":205,"column_start":1,"column_end":74}},{"value":"/ [`UniformSampler`] for the sampling type.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":35634,"byte_end":35679,"line_start":206,"line_end":206,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":35680,"byte_end":35683,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ See the [module documentation] on how to implement [`Uniform`] range","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":35684,"byte_end":35756,"line_start":208,"line_end":208,"column_start":1,"column_end":73}},{"value":"/ sampling for a custom type.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":35757,"byte_end":35788,"line_start":209,"line_end":209,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":35789,"byte_end":35792,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ [module documentation]: crate::distributions::uniform","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":35793,"byte_end":35850,"line_start":211,"line_end":211,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":35958,"byte_end":35965,"line_start":214,"line_end":214,"column_start":10,"column_end":17},"name":"Sampler","qualname":"::distributions::uniform::SampleUniform::Sampler","value":"type Sampler: UniformSampler<X = Self>;","parent":{"krate":0,"index":74},"children":[],"decl_id":null,"docs":" The `UniformSampler` implementation supporting type `X`.\n","sig":null,"attributes":[{"value":"/ The `UniformSampler` implementation supporting type `X`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":35888,"byte_end":35948,"line_start":213,"line_end":213,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":36440,"byte_end":36454,"line_start":227,"line_end":227,"column_start":11,"column_end":25},"name":"UniformSampler","qualname":"::distributions::uniform::UniformSampler","value":"UniformSampler: Sized","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":90}],"decl_id":null,"docs":" Helper trait handling actual uniform sampling.","sig":null,"attributes":[{"value":"/ Helper trait handling actual uniform sampling.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":35996,"byte_end":36046,"line_start":217,"line_end":217,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":36047,"byte_end":36050,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ See the [module documentation] on how to implement [`Uniform`] range","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":36051,"byte_end":36123,"line_start":219,"line_end":219,"column_start":1,"column_end":73}},{"value":"/ sampling for a custom type.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":36124,"byte_end":36155,"line_start":220,"line_end":220,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":36156,"byte_end":36159,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ Implementation of [`sample_single`] is optional, and is only useful when","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":36160,"byte_end":36236,"line_start":222,"line_end":222,"column_start":1,"column_end":77}},{"value":"/ the implementation can be faster than `Self::new(low, high).sample(rng)`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":36237,"byte_end":36314,"line_start":223,"line_end":223,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":36315,"byte_end":36318,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ [module documentation]: crate::distributions::uniform","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":36319,"byte_end":36376,"line_start":225,"line_end":225,"column_start":1,"column_end":58}},{"value":"/ [`sample_single`]: UniformSampler::sample_single","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":36377,"byte_end":36429,"line_start":226,"line_end":226,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":36522,"byte_end":36523,"line_start":229,"line_end":229,"column_start":10,"column_end":11},"name":"X","qualname":"::distributions::uniform::UniformSampler::X","value":"type X;","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" The type sampled by this implementation.\n","sig":null,"attributes":[{"value":"/ The type sampled by this implementation.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":36468,"byte_end":36512,"line_start":228,"line_end":228,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":36786,"byte_end":36789,"line_start":236,"line_end":236,"column_start":8,"column_end":11},"name":"new","qualname":"::distributions::uniform::UniformSampler::new","value":"pub fn new<B1, B2>(B1, B2) -> Self where B1: SampleBorrow<Self::X> + Sized,\nB2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Construct self, with inclusive lower bound and exclusive upper bound\n `[low, high)`.","sig":null,"attributes":[{"value":"/ Construct self, with inclusive lower bound and exclusive upper bound","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":36530,"byte_end":36602,"line_start":231,"line_end":231,"column_start":5,"column_end":77}},{"value":"/ `[low, high)`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":36607,"byte_end":36625,"line_start":232,"line_end":232,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":36630,"byte_end":36633,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":36638,"byte_end":36701,"line_start":234,"line_end":234,"column_start":5,"column_end":68}},{"value":"/ `Uniform::new`, which asserts that `low < high` before calling this.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":36706,"byte_end":36778,"line_start":235,"line_end":235,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":37162,"byte_end":37175,"line_start":246,"line_end":246,"column_start":8,"column_end":21},"name":"new_inclusive","qualname":"::distributions::uniform::UniformSampler::new_inclusive","value":"pub fn new_inclusive<B1, B2>(B1, B2) -> Self where B1: SampleBorrow<Self::X> +\nSized, B2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Construct self, with inclusive bounds `[low, high]`.","sig":null,"attributes":[{"value":"/ Construct self, with inclusive bounds `[low, high]`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":36926,"byte_end":36982,"line_start":241,"line_end":241,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":36987,"byte_end":36990,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":36995,"byte_end":37058,"line_start":243,"line_end":243,"column_start":5,"column_end":68}},{"value":"/ `Uniform::new_inclusive`, which asserts that `low <= high` before","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":37063,"byte_end":37132,"line_start":244,"line_end":244,"column_start":5,"column_end":74}},{"value":"/ calling this.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":37137,"byte_end":37154,"line_start":245,"line_end":245,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":37339,"byte_end":37345,"line_start":252,"line_end":252,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::uniform::UniformSampler::sample","value":"pub fn sample<R: Rng + ?Sized>(&Self, &mut R) -> Self::X","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Sample a value.\n","sig":null,"attributes":[{"value":"/ Sample a value.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":37312,"byte_end":37331,"line_start":251,"line_end":251,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":38320,"byte_end":38333,"line_start":273,"line_end":273,"column_start":8,"column_end":21},"name":"sample_single","qualname":"::distributions::uniform::UniformSampler::sample_single","value":"pub fn sample_single<R: Rng + ?Sized, B1, B2>(B1, B2, &mut R) -> Self::X where\nB1: SampleBorrow<Self::X> + Sized, B2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Sample a single value uniformly from a range with inclusive lower bound\n and exclusive upper bound `[low, high)`.","sig":null,"attributes":[{"value":"/ Sample a single value uniformly from a range with inclusive lower bound","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":37400,"byte_end":37475,"line_start":254,"line_end":254,"column_start":5,"column_end":80}},{"value":"/ and exclusive upper bound `[low, high)`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":37480,"byte_end":37524,"line_start":255,"line_end":255,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":37529,"byte_end":37532,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ By default this is implemented using","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":37537,"byte_end":37577,"line_start":257,"line_end":257,"column_start":5,"column_end":45}},{"value":"/ `UniformSampler::new(low, high).sample(rng)`. However, for some types","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":37582,"byte_end":37655,"line_start":258,"line_end":258,"column_start":5,"column_end":78}},{"value":"/ more optimal implementations for single usage may be provided via this","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":37660,"byte_end":37734,"line_start":259,"line_end":259,"column_start":5,"column_end":79}},{"value":"/ method (which is the case for integers and floats).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":37739,"byte_end":37794,"line_start":260,"line_end":260,"column_start":5,"column_end":60}},{"value":"/ Results may not be identical.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":37799,"byte_end":37832,"line_start":261,"line_end":261,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":37837,"byte_end":37840,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ Note that to use this method in a generic context, the type needs to be","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":37845,"byte_end":37920,"line_start":263,"line_end":263,"column_start":5,"column_end":80}},{"value":"/ retrieved via `SampleUniform::Sampler` as follows:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":37925,"byte_end":37979,"line_start":264,"line_end":264,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":37984,"byte_end":37991,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, distributions::uniform::{SampleUniform, UniformSampler}};","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":37996,"byte_end":38080,"line_start":266,"line_end":266,"column_start":5,"column_end":89}},{"value":"/ # #[allow(unused)]","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":38085,"byte_end":38107,"line_start":267,"line_end":267,"column_start":5,"column_end":27}},{"value":"/ fn sample_from_range<T: SampleUniform>(lb: T, ub: T) -> T {","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":38112,"byte_end":38175,"line_start":268,"line_end":268,"column_start":5,"column_end":68}},{"value":"/     let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":38180,"byte_end":38215,"line_start":269,"line_end":269,"column_start":5,"column_end":40}},{"value":"/     <T as SampleUniform>::Sampler::sample_single(lb, ub, &mut rng)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":38220,"byte_end":38290,"line_start":270,"line_end":270,"column_start":5,"column_end":75}},{"value":"/ }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":38295,"byte_end":38300,"line_start":271,"line_end":271,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":38305,"byte_end":38312,"line_start":272,"line_end":272,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":39009,"byte_end":39032,"line_start":290,"line_end":290,"column_start":8,"column_end":31},"name":"sample_single_inclusive","qualname":"::distributions::uniform::UniformSampler::sample_single_inclusive","value":"pub fn sample_single_inclusive<R: Rng + ?Sized, B1, B2>(B1, B2, &mut R)\n-> Self::X where B1: SampleBorrow<Self::X> + Sized,\nB2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":76},"children":[],"decl_id":null,"docs":" Sample a single value uniformly from a range with inclusive lower bound\n and inclusive upper bound `[low, high]`.","sig":null,"attributes":[{"value":"/ Sample a single value uniformly from a range with inclusive lower bound","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":38603,"byte_end":38678,"line_start":282,"line_end":282,"column_start":5,"column_end":80}},{"value":"/ and inclusive upper bound `[low, high]`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":38683,"byte_end":38727,"line_start":283,"line_end":283,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":38732,"byte_end":38735,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ By default this is implemented using","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":38740,"byte_end":38780,"line_start":285,"line_end":285,"column_start":5,"column_end":45}},{"value":"/ `UniformSampler::new_inclusive(low, high).sample(rng)`. However, for","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":38785,"byte_end":38857,"line_start":286,"line_end":286,"column_start":5,"column_end":77}},{"value":"/ some types more optimal implementations for single usage may be provided","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":38862,"byte_end":38938,"line_start":287,"line_end":287,"column_start":5,"column_end":81}},{"value":"/ via this method.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":38943,"byte_end":38963,"line_start":288,"line_end":288,"column_start":5,"column_end":25}},{"value":"/ Results may not be identical.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":38968,"byte_end":39001,"line_start":289,"line_end":289,"column_start":5,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":39868,"byte_end":39880,"line_start":318,"line_end":318,"column_start":11,"column_end":23},"name":"SampleBorrow","qualname":"::distributions::uniform::SampleBorrow","value":"SampleBorrow<Borrowed>","parent":null,"children":[{"krate":0,"index":102}],"decl_id":null,"docs":" Helper trait similar to [`Borrow`] but implemented\n only for SampleUniform and references to SampleUniform in\n order to resolve ambiguity issues.","sig":null,"attributes":[{"value":"/ Helper trait similar to [`Borrow`] but implemented","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":39662,"byte_end":39716,"line_start":313,"line_end":313,"column_start":1,"column_end":55}},{"value":"/ only for SampleUniform and references to SampleUniform in","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":39717,"byte_end":39778,"line_start":314,"line_end":314,"column_start":1,"column_end":62}},{"value":"/ order to resolve ambiguity issues.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":39779,"byte_end":39817,"line_start":315,"line_end":315,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":39818,"byte_end":39821,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ [`Borrow`]: std::borrow::Borrow","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":39822,"byte_end":39857,"line_start":317,"line_end":317,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":40034,"byte_end":40040,"line_start":322,"line_end":322,"column_start":8,"column_end":14},"name":"borrow","qualname":"::distributions::uniform::SampleBorrow::borrow","value":"pub fn borrow(&Self) -> &Borrowed","parent":{"krate":0,"index":100},"children":[],"decl_id":null,"docs":" Immutably borrows from an owned value. See [`Borrow::borrow`]","sig":null,"attributes":[{"value":"/ Immutably borrows from an owned value. See [`Borrow::borrow`]","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":39897,"byte_end":39962,"line_start":319,"line_end":319,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":39967,"byte_end":39970,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ [`Borrow::borrow`]: std::borrow::Borrow::borrow","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":39975,"byte_end":40026,"line_start":321,"line_end":321,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":110},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":40580,"byte_end":40591,"line_start":345,"line_end":345,"column_start":11,"column_end":22},"name":"SampleRange","qualname":"::distributions::uniform::SampleRange","value":"SampleRange<T>","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":114}],"decl_id":null,"docs":" Range that supports generating a single sample efficiently.","sig":null,"attributes":[{"value":"/ Range that supports generating a single sample efficiently.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":40398,"byte_end":40461,"line_start":341,"line_end":341,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":40462,"byte_end":40465,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ Any type implementing this trait can be used to specify the sampled range","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":40466,"byte_end":40543,"line_start":343,"line_end":343,"column_start":1,"column_end":78}},{"value":"/ for `Rng::gen_range`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":40544,"byte_end":40569,"line_start":344,"line_end":344,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":40652,"byte_end":40665,"line_start":347,"line_end":347,"column_start":8,"column_end":21},"name":"sample_single","qualname":"::distributions::uniform::SampleRange::sample_single","value":"pub fn sample_single<R: RngCore + ?Sized>(Self, &mut R) -> T","parent":{"krate":0,"index":110},"children":[],"decl_id":null,"docs":" Generate a sample from the given range.\n","sig":null,"attributes":[{"value":"/ Generate a sample from the given range.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":40601,"byte_end":40644,"line_start":346,"line_end":346,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":40762,"byte_end":40770,"line_start":350,"line_end":350,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::distributions::uniform::SampleRange::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":110},"children":[],"decl_id":null,"docs":" Check whether the range is empty.\n","sig":null,"attributes":[{"value":"/ Check whether the range is empty.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":40717,"byte_end":40754,"line_start":349,"line_end":349,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":759},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":43557,"byte_end":43567,"line_start":419,"line_end":419,"column_start":12,"column_end":22},"name":"UniformInt","qualname":"::distributions::uniform::UniformInt","value":"UniformInt {  }","parent":null,"children":[{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for integer types.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for integer types.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":41548,"byte_end":41615,"line_start":383,"line_end":383,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":41616,"byte_end":41619,"line_start":384,"line_end":384,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":41620,"byte_end":41699,"line_start":385,"line_end":385,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":41700,"byte_end":41757,"line_start":386,"line_end":386,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":41758,"byte_end":41761,"line_start":387,"line_end":387,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":41762,"byte_end":41788,"line_start":388,"line_end":388,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":41789,"byte_end":41792,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ For simplicity, we use the same generic struct `UniformInt<X>` for all","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":41793,"byte_end":41867,"line_start":390,"line_end":390,"column_start":1,"column_end":75}},{"value":"/ integer types `X`. This gives us only one field type, `X`; to store unsigned","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":41868,"byte_end":41948,"line_start":391,"line_end":391,"column_start":1,"column_end":81}},{"value":"/ values of this size, we take use the fact that these conversions are no-ops.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":41949,"byte_end":42029,"line_start":392,"line_end":392,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":42030,"byte_end":42033,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/ For a closed range, the number of possible numbers we should generate is","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":42034,"byte_end":42110,"line_start":394,"line_end":394,"column_start":1,"column_end":77}},{"value":"/ `range = (high - low + 1)`. To avoid bias, we must ensure that the size of","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":42111,"byte_end":42189,"line_start":395,"line_end":395,"column_start":1,"column_end":79}},{"value":"/ our sample space, `zone`, is a multiple of `range`; other values must be","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":42190,"byte_end":42266,"line_start":396,"line_end":396,"column_start":1,"column_end":77}},{"value":"/ rejected (by replacing with a new random sample).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":42267,"byte_end":42320,"line_start":397,"line_end":397,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":42321,"byte_end":42324,"line_start":398,"line_end":398,"column_start":1,"column_end":4}},{"value":"/ As a special case, we use `range = 0` to represent the full range of the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":42325,"byte_end":42401,"line_start":399,"line_end":399,"column_start":1,"column_end":77}},{"value":"/ result type (i.e. for `new_inclusive($ty::MIN, $ty::MAX)`).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":42402,"byte_end":42465,"line_start":400,"line_end":400,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":42466,"byte_end":42469,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/ The optimum `zone` is the largest product of `range` which fits in our","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":42470,"byte_end":42544,"line_start":402,"line_end":402,"column_start":1,"column_end":75}},{"value":"/ (unsigned) target type. We calculate this by calculating how many numbers we","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":42545,"byte_end":42625,"line_start":403,"line_end":403,"column_start":1,"column_end":81}},{"value":"/ must reject: `reject = (MAX + 1) % range = (MAX - range + 1) % range`. Any (large)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":42626,"byte_end":42712,"line_start":404,"line_end":404,"column_start":1,"column_end":87}},{"value":"/ product of `range` will suffice, thus in `sample_single` we multiply by a","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":42713,"byte_end":42790,"line_start":405,"line_end":405,"column_start":1,"column_end":78}},{"value":"/ power of 2 via bit-shifting (faster but may cause more rejections).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":42791,"byte_end":42862,"line_start":406,"line_end":406,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":42863,"byte_end":42866,"line_start":407,"line_end":407,"column_start":1,"column_end":4}},{"value":"/ The smallest integer PRNGs generate is `u32`. For 8- and 16-bit outputs we","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":42867,"byte_end":42945,"line_start":408,"line_end":408,"column_start":1,"column_end":79}},{"value":"/ use `u32` for our `zone` and samples (because it's not slower and because","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":42946,"byte_end":43023,"line_start":409,"line_end":409,"column_start":1,"column_end":78}},{"value":"/ it reduces the chance of having to reject a sample). In this case we cannot","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":43024,"byte_end":43103,"line_start":410,"line_end":410,"column_start":1,"column_end":80}},{"value":"/ store `zone` in the target type since it is too large, however we know","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":43104,"byte_end":43178,"line_start":411,"line_end":411,"column_start":1,"column_end":75}},{"value":"/ `ints_to_reject < range <= $unsigned::MAX`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":43179,"byte_end":43226,"line_start":412,"line_end":412,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":43227,"byte_end":43230,"line_start":413,"line_end":413,"column_start":1,"column_end":4}},{"value":"/ An alternative to using a modulus is widening multiply: After a widening","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":43231,"byte_end":43307,"line_start":414,"line_end":414,"column_start":1,"column_end":77}},{"value":"/ multiply by `range`, the result is in the high word. Then comparing the low","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":43308,"byte_end":43387,"line_start":415,"line_end":415,"column_start":1,"column_end":80}},{"value":"/ word against `zone` makes sure our distribution is uniform.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":43388,"byte_end":43451,"line_start":416,"line_end":416,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1012},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":55962,"byte_end":55974,"line_start":731,"line_end":731,"column_start":12,"column_end":24},"name":"UniformFloat","qualname":"::distributions::uniform::UniformFloat","value":"UniformFloat {  }","parent":null,"children":[{"krate":0,"index":1014},{"krate":0,"index":1015}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for floating-point types.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for floating-point types.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":54972,"byte_end":55046,"line_start":710,"line_end":710,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":55047,"byte_end":55050,"line_start":711,"line_end":711,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":55051,"byte_end":55130,"line_start":712,"line_end":712,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":55131,"byte_end":55188,"line_start":713,"line_end":713,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":55189,"byte_end":55192,"line_start":714,"line_end":714,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":55193,"byte_end":55219,"line_start":715,"line_end":715,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":55220,"byte_end":55223,"line_start":716,"line_end":716,"column_start":1,"column_end":4}},{"value":"/ Instead of generating a float in the `[0, 1)` range using [`Standard`], the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":55224,"byte_end":55303,"line_start":717,"line_end":717,"column_start":1,"column_end":80}},{"value":"/ `UniformFloat` implementation converts the output of an PRNG itself. This","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":55304,"byte_end":55381,"line_start":718,"line_end":718,"column_start":1,"column_end":78}},{"value":"/ way one or two steps can be optimized out.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":55382,"byte_end":55428,"line_start":719,"line_end":719,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":55429,"byte_end":55432,"line_start":720,"line_end":720,"column_start":1,"column_end":4}},{"value":"/ The floats are first converted to a value in the `[1, 2)` interval using a","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":55433,"byte_end":55511,"line_start":721,"line_end":721,"column_start":1,"column_end":79}},{"value":"/ transmute-based method, and then mapped to the expected range with a","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":55512,"byte_end":55584,"line_start":722,"line_end":722,"column_start":1,"column_end":73}},{"value":"/ multiply and addition. Values produced this way have what equals 23 bits of","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":55585,"byte_end":55664,"line_start":723,"line_end":723,"column_start":1,"column_end":80}},{"value":"/ random digits for an `f32`, and 52 for an `f64`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":55665,"byte_end":55717,"line_start":724,"line_end":724,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":55718,"byte_end":55721,"line_start":725,"line_end":725,"column_start":1,"column_end":4}},{"value":"/ [`new`]: UniformSampler::new","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":55722,"byte_end":55754,"line_start":726,"line_end":726,"column_start":1,"column_end":33}},{"value":"/ [`new_inclusive`]: UniformSampler::new_inclusive","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":55755,"byte_end":55807,"line_start":727,"line_end":727,"column_start":1,"column_end":53}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":55808,"byte_end":55856,"line_start":728,"line_end":728,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":1056},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":64102,"byte_end":64117,"line_start":925,"line_end":925,"column_start":12,"column_end":27},"name":"UniformDuration","qualname":"::distributions::uniform::UniformDuration","value":"UniformDuration {  }","parent":null,"children":[{"krate":0,"index":1057},{"krate":0,"index":1058}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for `Duration`.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for `Duration`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":63789,"byte_end":63853,"line_start":919,"line_end":919,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":63854,"byte_end":63857,"line_start":920,"line_end":920,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own types, this type","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":63858,"byte_end":63938,"line_start":921,"line_end":921,"column_start":1,"column_end":81}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":63939,"byte_end":63996,"line_start":922,"line_end":922,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"weighted","qualname":"::distributions::weighted","value":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted.rs","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144}],"decl_id":null,"docs":" Weighted index sampling","sig":null,"attributes":[{"value":"deprecated(since = \"0.8.0\", note =\n             \"use rand::distributions::{WeightedIndex, WeightedError} instead\")","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":11472,"byte_end":11576,"line_start":110,"line_end":110,"column_start":1,"column_end":105}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":11577,"byte_end":11602,"line_start":111,"line_end":111,"column_start":1,"column_end":26}},{"value":"/ Weighted index sampling","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted.rs","byte_start":86206,"byte_end":86233,"line_start":9,"line_end":9,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted.rs","byte_start":86234,"byte_end":86237,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This module is deprecated. Use [`crate::distributions::WeightedIndex`] and","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted.rs","byte_start":86238,"byte_end":86316,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ [`crate::distributions::WeightedError`] instead.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted.rs","byte_start":86317,"byte_end":86369,"line_start":12,"line_end":12,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":144},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted.rs","byte_start":86517,"byte_end":86529,"line_start":18,"line_end":18,"column_start":9,"column_end":21},"name":"alias_method","qualname":"::distributions::weighted::alias_method","value":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted.rs","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":2048},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":1079},{"krate":0,"index":1082},{"krate":0,"index":148},{"krate":0,"index":151},{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted.rs","byte_start":86419,"byte_end":86441,"line_start":16,"line_end":16,"column_start":1,"column_end":23}},{"value":"deprecated(since = \"0.8.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted.rs","byte_start":86442,"byte_end":86508,"line_start":17,"line_end":17,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1079},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted.rs","byte_start":86798,"byte_end":86811,"line_start":26,"line_end":26,"column_start":16,"column_end":29},"name":"WeightedIndex","qualname":"::distributions::weighted::alias_method::WeightedIndex","value":"WeightedIndex {  }","parent":null,"children":[{"krate":0,"index":1081}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted.rs","byte_start":86919,"byte_end":86922,"line_start":30,"line_end":30,"column_start":16,"column_end":19},"name":"new","qualname":"<WeightedIndex<W>>::new","value":"pub fn new(Vec<W>) -> Result<Self, WeightedError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted.rs","byte_start":87044,"byte_end":87050,"line_start":35,"line_end":35,"column_start":15,"column_end":21},"name":"Weight","qualname":"::distributions::weighted::alias_method::Weight","value":"Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1099},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":90765,"byte_end":90778,"line_start":81,"line_end":81,"column_start":12,"column_end":25},"name":"WeightedIndex","qualname":"::distributions::weighted_index::WeightedIndex","value":"WeightedIndex {  }","parent":null,"children":[{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1103}],"decl_id":null,"docs":" A distribution using weighted sampling of discrete items","sig":null,"attributes":[{"value":"/ A distribution using weighted sampling of discrete items","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":88161,"byte_end":88221,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":88222,"byte_end":88225,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Sampling a `WeightedIndex` distribution returns the index of a randomly","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":88226,"byte_end":88301,"line_start":25,"line_end":25,"column_start":1,"column_end":76}},{"value":"/ selected element from the iterator used when the `WeightedIndex` was","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":88302,"byte_end":88374,"line_start":26,"line_end":26,"column_start":1,"column_end":73}},{"value":"/ created. The chance of a given element being picked is proportional to the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":88375,"byte_end":88453,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ value of the element. The weights can use any type `X` for which an","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":88454,"byte_end":88525,"line_start":28,"line_end":28,"column_start":1,"column_end":72}},{"value":"/ implementation of [`Uniform<X>`] exists.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":88526,"byte_end":88570,"line_start":29,"line_end":29,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":88571,"byte_end":88574,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Performance","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":88575,"byte_end":88592,"line_start":31,"line_end":31,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":88593,"byte_end":88596,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Time complexity of sampling from `WeightedIndex` is `O(log N)` where","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":88597,"byte_end":88669,"line_start":33,"line_end":33,"column_start":1,"column_end":73}},{"value":"/ `N` is the number of weights. As an alternative,","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":88670,"byte_end":88722,"line_start":34,"line_end":34,"column_start":1,"column_end":53}},{"value":"/ [`rand_distr::weighted_alias`](https://docs.rs/rand_distr/*/rand_distr/weighted_alias/index.html)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":88723,"byte_end":88824,"line_start":35,"line_end":35,"column_start":1,"column_end":102}},{"value":"/ supports `O(1)` sampling, but with much higher initialisation cost.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":88825,"byte_end":88896,"line_start":36,"line_end":36,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":88897,"byte_end":88900,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ A `WeightedIndex<X>` contains a `Vec<X>` and a [`Uniform<X>`] and so its","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":88901,"byte_end":88977,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ size is the sum of the size of those objects, possibly plus some alignment.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":88978,"byte_end":89057,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":89058,"byte_end":89061,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Creating a `WeightedIndex<X>` will allocate enough space to hold `N - 1`","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":89062,"byte_end":89138,"line_start":41,"line_end":41,"column_start":1,"column_end":77}},{"value":"/ weights of type `X`, where `N` is the number of weights. However, since","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":89139,"byte_end":89214,"line_start":42,"line_end":42,"column_start":1,"column_end":76}},{"value":"/ `Vec` doesn't guarantee a particular growth strategy, additional memory","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":89215,"byte_end":89290,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"/ might be allocated but not used. Since the `WeightedIndex` object also","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":89291,"byte_end":89365,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/ contains, this might cause additional allocations, though for primitive","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":89366,"byte_end":89441,"line_start":45,"line_end":45,"column_start":1,"column_end":76}},{"value":"/ types, [`Uniform<X>`] doesn't allocate any memory.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":89442,"byte_end":89496,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":89497,"byte_end":89500,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Sampling from `WeightedIndex` will result in a single call to","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":89501,"byte_end":89566,"line_start":48,"line_end":48,"column_start":1,"column_end":66}},{"value":"/ `Uniform<X>::sample` (method of the [`Distribution`] trait), which typically","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":89567,"byte_end":89647,"line_start":49,"line_end":49,"column_start":1,"column_end":81}},{"value":"/ will request a single value from the underlying [`RngCore`], though the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":89648,"byte_end":89723,"line_start":50,"line_end":50,"column_start":1,"column_end":76}},{"value":"/ exact number depends on the implementation of `Uniform<X>::sample`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":89724,"byte_end":89795,"line_start":51,"line_end":51,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":89796,"byte_end":89799,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":89800,"byte_end":89813,"line_start":53,"line_end":53,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":89814,"byte_end":89817,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":89818,"byte_end":89825,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":89826,"byte_end":89851,"line_start":56,"line_end":56,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::WeightedIndex;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":89852,"byte_end":89895,"line_start":57,"line_end":57,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":89896,"byte_end":89899,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ let choices = ['a', 'b', 'c'];","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":89900,"byte_end":89934,"line_start":59,"line_end":59,"column_start":1,"column_end":35}},{"value":"/ let weights = [2,   1,   1];","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":89935,"byte_end":89967,"line_start":60,"line_end":60,"column_start":1,"column_end":33}},{"value":"/ let dist = WeightedIndex::new(&weights).unwrap();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":89968,"byte_end":90021,"line_start":61,"line_end":61,"column_start":1,"column_end":54}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":90022,"byte_end":90053,"line_start":62,"line_end":62,"column_start":1,"column_end":32}},{"value":"/ for _ in 0..100 {","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":90054,"byte_end":90075,"line_start":63,"line_end":63,"column_start":1,"column_end":22}},{"value":"/     // 50% chance to print 'a', 25% chance to print 'b', 25% chance to print 'c'","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":90076,"byte_end":90160,"line_start":64,"line_end":64,"column_start":1,"column_end":85}},{"value":"/     println!(\"{}\", choices[dist.sample(&mut rng)]);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":90161,"byte_end":90216,"line_start":65,"line_end":65,"column_start":1,"column_end":56}},{"value":"/ }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":90217,"byte_end":90222,"line_start":66,"line_end":66,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":90223,"byte_end":90226,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ let items = [('a', 0), ('b', 3), ('c', 7)];","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":90227,"byte_end":90274,"line_start":68,"line_end":68,"column_start":1,"column_end":48}},{"value":"/ let dist2 = WeightedIndex::new(items.iter().map(|item| item.1)).unwrap();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":90275,"byte_end":90352,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ for _ in 0..100 {","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":90353,"byte_end":90374,"line_start":70,"line_end":70,"column_start":1,"column_end":22}},{"value":"/     // 0% chance to print 'a', 30% chance to print 'b', 70% chance to print 'c'","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":90375,"byte_end":90458,"line_start":71,"line_end":71,"column_start":1,"column_end":84}},{"value":"/     println!(\"{}\", items[dist2.sample(&mut rng)].0);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":90459,"byte_end":90515,"line_start":72,"line_end":72,"column_start":1,"column_end":57}},{"value":"/ }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":90516,"byte_end":90521,"line_start":73,"line_end":73,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":90522,"byte_end":90529,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":90530,"byte_end":90533,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ [`Uniform<X>`]: crate::distributions::Uniform","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":90534,"byte_end":90583,"line_start":76,"line_end":76,"column_start":1,"column_end":50}},{"value":"/ [`RngCore`]: crate::RngCore","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":90584,"byte_end":90615,"line_start":77,"line_end":77,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":91352,"byte_end":91355,"line_start":96,"line_end":96,"column_start":12,"column_end":15},"name":"new","qualname":"<WeightedIndex<X>>::new","value":"pub fn new<I>(I) -> Result<WeightedIndex<X>, WeightedError> where\nI: IntoIterator, I::Item: SampleBorrow<X>,\nX: for<'a> ::core::ops::AddAssign<&'a X> + Clone + Default","parent":null,"children":[],"decl_id":null,"docs":" Creates a new a `WeightedIndex` [`Distribution`] using the values\n in `weights`. The weights can use any type `X` for which an\n implementation of [`Uniform<X>`] exists.","sig":null,"attributes":[{"value":"/ Creates a new a `WeightedIndex` [`Distribution`] using the values","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":90964,"byte_end":91033,"line_start":88,"line_end":88,"column_start":5,"column_end":74}},{"value":"/ in `weights`. The weights can use any type `X` for which an","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":91038,"byte_end":91101,"line_start":89,"line_end":89,"column_start":5,"column_end":68}},{"value":"/ implementation of [`Uniform<X>`] exists.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":91106,"byte_end":91150,"line_start":90,"line_end":90,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":91155,"byte_end":91158,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the iterator is empty, if any weight is `< 0`, or","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":91163,"byte_end":91236,"line_start":92,"line_end":92,"column_start":5,"column_end":78}},{"value":"/ if its total value is 0.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":91241,"byte_end":91269,"line_start":93,"line_end":93,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":91274,"byte_end":91277,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ [`Uniform<X>`]: crate::distributions::uniform::Uniform","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":91282,"byte_end":91340,"line_start":95,"line_end":95,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":93043,"byte_end":93057,"line_start":142,"line_end":142,"column_start":12,"column_end":26},"name":"update_weights","qualname":"<WeightedIndex<X>>::update_weights","value":"pub fn update_weights(&mut Self, &[(usize, &X)]) -> Result<(), WeightedError>\nwhere X: for<'a> ::core::ops::AddAssign<&'a X> +\nfor<'a> ::core::ops::SubAssign<&'a X> + Clone + Default","parent":null,"children":[],"decl_id":null,"docs":" Update a subset of weights, without changing the number of weights.","sig":null,"attributes":[{"value":"/ Update a subset of weights, without changing the number of weights.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":92620,"byte_end":92691,"line_start":133,"line_end":133,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":92696,"byte_end":92699,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ `new_weights` must be sorted by the index.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":92704,"byte_end":92750,"line_start":135,"line_end":135,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":92755,"byte_end":92758,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ Using this method instead of `new` might be more efficient if only a small number of","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":92763,"byte_end":92851,"line_start":137,"line_end":137,"column_start":5,"column_end":93}},{"value":"/ weights is modified. No allocations are performed, unless the weight type `X` uses","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":92856,"byte_end":92942,"line_start":138,"line_end":138,"column_start":5,"column_end":91}},{"value":"/ allocation internally.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":92947,"byte_end":92973,"line_start":139,"line_end":139,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":92978,"byte_end":92981,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ In case of error, `self` is not modified.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":92986,"byte_end":93031,"line_start":141,"line_end":141,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1111},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":102668,"byte_end":102674,"line_start":428,"line_end":428,"column_start":5,"column_end":11},"name":"NoItem","qualname":"::distributions::weighted_index::WeightedError::NoItem","value":"WeightedError::NoItem","parent":{"krate":0,"index":1110},"children":[],"decl_id":null,"docs":" The provided weight collection contains no items.\n","sig":null,"attributes":[{"value":"/ The provided weight collection contains no items.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":102610,"byte_end":102663,"line_start":427,"line_end":427,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1113},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":102795,"byte_end":102808,"line_start":432,"line_end":432,"column_start":5,"column_end":18},"name":"InvalidWeight","qualname":"::distributions::weighted_index::WeightedError::InvalidWeight","value":"WeightedError::InvalidWeight","parent":{"krate":0,"index":1110},"children":[],"decl_id":null,"docs":" A weight is either less than zero, greater than the supported maximum,\n NaN, or otherwise invalid.\n","sig":null,"attributes":[{"value":"/ A weight is either less than zero, greater than the supported maximum,","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":102681,"byte_end":102755,"line_start":430,"line_end":430,"column_start":5,"column_end":79}},{"value":"/ NaN, or otherwise invalid.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":102760,"byte_end":102790,"line_start":431,"line_end":431,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1115},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":102877,"byte_end":102891,"line_start":435,"line_end":435,"column_start":5,"column_end":19},"name":"AllWeightsZero","qualname":"::distributions::weighted_index::WeightedError::AllWeightsZero","value":"WeightedError::AllWeightsZero","parent":{"krate":0,"index":1110},"children":[],"decl_id":null,"docs":" All items in the provided weight collection are zero.\n","sig":null,"attributes":[{"value":"/ All items in the provided weight collection are zero.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":102815,"byte_end":102872,"line_start":434,"line_end":434,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1117},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":102969,"byte_end":102976,"line_start":438,"line_end":438,"column_start":5,"column_end":12},"name":"TooMany","qualname":"::distributions::weighted_index::WeightedError::TooMany","value":"WeightedError::TooMany","parent":{"krate":0,"index":1110},"children":[],"decl_id":null,"docs":" Too many weights are provided (length greater than `u32::MAX`)\n","sig":null,"attributes":[{"value":"/ Too many weights are provided (length greater than `u32::MAX`)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":102898,"byte_end":102964,"line_start":437,"line_end":437,"column_start":5,"column_end":71}}]},{"kind":"Enum","id":{"krate":0,"index":1110},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":102590,"byte_end":102603,"line_start":426,"line_end":426,"column_start":10,"column_end":23},"name":"WeightedError","qualname":"::distributions::weighted_index::WeightedError","value":"pub enum WeightedError {\n\n    /// The provided weight collection contains no items.\n    NoItem,\n\n    /// A weight is either less than zero, greater than the supported maximum,\n    /// NaN, or otherwise invalid.\n    InvalidWeight,\n\n    /// All items in the provided weight collection are zero.\n    AllWeightsZero,\n\n    /// Too many weights are provided (length greater than `u32::MAX`)\n    TooMany,\n}","parent":null,"children":[{"krate":0,"index":1111},{"krate":0,"index":1113},{"krate":0,"index":1115},{"krate":0,"index":1117}],"decl_id":null,"docs":" Error type returned from `WeightedIndex::new`.\n","sig":null,"attributes":[{"value":"/ Error type returned from `WeightedIndex::new`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":102435,"byte_end":102485,"line_start":423,"line_end":423,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1130},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105177,"byte_end":105189,"line_start":46,"line_end":46,"column_start":12,"column_end":24},"name":"OpenClosed01","qualname":"::distributions::float::OpenClosed01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the half-open\n interval `(0, 1]`, i.e. including 1 but not 0.","sig":null,"attributes":[{"value":"/ A distribution to sample floating point numbers uniformly in the half-open","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104160,"byte_end":104238,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ interval `(0, 1]`, i.e. including 1 but not 0.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104239,"byte_end":104289,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104290,"byte_end":104293,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε/2`. For `f32`","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104294,"byte_end":104368,"line_start":23,"line_end":23,"column_start":1,"column_end":74}},{"value":"/ the 24 most significant random bits of a `u32` are used and for `f64` the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104369,"byte_end":104446,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ 53 most significant bits of a `u64` are used. The conversion uses the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104447,"byte_end":104520,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"/ multiplicative method.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104521,"byte_end":104547,"line_start":26,"line_end":26,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104548,"byte_end":104551,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ See also: [`Standard`] which samples from `[0, 1)`, [`Open01`]","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104552,"byte_end":104618,"line_start":28,"line_end":28,"column_start":1,"column_end":67}},{"value":"/ which samples from `(0, 1)` and [`Uniform`] which samples from arbitrary","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104619,"byte_end":104695,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ ranges.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104696,"byte_end":104707,"line_start":30,"line_end":30,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104708,"byte_end":104711,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104712,"byte_end":104725,"line_start":32,"line_end":32,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104726,"byte_end":104733,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104734,"byte_end":104766,"line_start":34,"line_end":34,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::OpenClosed01;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104767,"byte_end":104809,"line_start":35,"line_end":35,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104810,"byte_end":104813,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = thread_rng().sample(OpenClosed01);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104814,"byte_end":104867,"line_start":37,"line_end":37,"column_start":1,"column_end":54}},{"value":"/ println!(\"f32 from (0, 1): {}\", val);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104868,"byte_end":104909,"line_start":38,"line_end":38,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104910,"byte_end":104917,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104918,"byte_end":104921,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104922,"byte_end":104970,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"/ [`Open01`]: crate::distributions::Open01","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":104971,"byte_end":105015,"line_start":42,"line_end":42,"column_start":1,"column_end":45}},{"value":"/ [`Uniform`]: crate::distributions::uniform::Uniform","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105016,"byte_end":105071,"line_start":43,"line_end":43,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1137},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":106184,"byte_end":106190,"line_start":73,"line_end":73,"column_start":12,"column_end":18},"name":"Open01","qualname":"::distributions::float::Open01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the open\n interval `(0, 1)`, i.e. not including either endpoint.","sig":null,"attributes":[{"value":"/ A distribution to sample floating point numbers uniformly in the open","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105192,"byte_end":105265,"line_start":48,"line_end":48,"column_start":1,"column_end":74}},{"value":"/ interval `(0, 1)`, i.e. not including either endpoint.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105266,"byte_end":105324,"line_start":49,"line_end":49,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105325,"byte_end":105328,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε + ε/2`. For `f32`","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105329,"byte_end":105408,"line_start":51,"line_end":51,"column_start":1,"column_end":78}},{"value":"/ the 23 most significant random bits of an `u32` are used, for `f64` 52 from","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105409,"byte_end":105488,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/ an `u64`. The conversion uses a transmute-based method.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105489,"byte_end":105548,"line_start":53,"line_end":53,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105549,"byte_end":105552,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ See also: [`Standard`] which samples from `[0, 1)`, [`OpenClosed01`]","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105553,"byte_end":105625,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/ which samples from `(0, 1]` and [`Uniform`] which samples from arbitrary","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105626,"byte_end":105702,"line_start":56,"line_end":56,"column_start":1,"column_end":77}},{"value":"/ ranges.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105703,"byte_end":105714,"line_start":57,"line_end":57,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105715,"byte_end":105718,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105719,"byte_end":105732,"line_start":59,"line_end":59,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105733,"byte_end":105740,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105741,"byte_end":105773,"line_start":61,"line_end":61,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Open01;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105774,"byte_end":105810,"line_start":62,"line_end":62,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105811,"byte_end":105814,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = thread_rng().sample(Open01);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105815,"byte_end":105862,"line_start":64,"line_end":64,"column_start":1,"column_end":48}},{"value":"/ println!(\"f32 from (0, 1): {}\", val);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105863,"byte_end":105904,"line_start":65,"line_end":65,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105905,"byte_end":105912,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105913,"byte_end":105916,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105917,"byte_end":105965,"line_start":68,"line_end":68,"column_start":1,"column_end":49}},{"value":"/ [`OpenClosed01`]: crate::distributions::OpenClosed01","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":105966,"byte_end":106022,"line_start":69,"line_end":69,"column_start":1,"column_end":57}},{"value":"/ [`Uniform`]: crate::distributions::uniform::Uniform","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":106023,"byte_end":106078,"line_start":70,"line_end":70,"column_start":1,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":106300,"byte_end":106309,"line_start":78,"line_end":78,"column_start":11,"column_end":20},"name":"IntoFloat","qualname":"::distributions::float::IntoFloat","value":"IntoFloat","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":106321,"byte_end":106322,"line_start":79,"line_end":79,"column_start":10,"column_end":11},"name":"F","qualname":"::distributions::float::IntoFloat::F","value":"type F;","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":106724,"byte_end":106748,"line_start":89,"line_end":89,"column_start":8,"column_end":32},"name":"into_float_with_exponent","qualname":"::distributions::float::IntoFloat::into_float_with_exponent","value":"pub fn into_float_with_exponent(Self, i32) -> Self::F","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" Helper method to combine the fraction and a contant exponent into a\n float.","sig":null,"attributes":[{"value":"/ Helper method to combine the fraction and a contant exponent into a","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":106329,"byte_end":106400,"line_start":81,"line_end":81,"column_start":5,"column_end":76}},{"value":"/ float.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":106405,"byte_end":106415,"line_start":82,"line_end":82,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":106420,"byte_end":106423,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ Only the least significant bits of `self` may be set, 23 for `f32` and","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":106428,"byte_end":106502,"line_start":84,"line_end":84,"column_start":5,"column_end":79}},{"value":"/ 52 for `f64`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":106507,"byte_end":106524,"line_start":85,"line_end":85,"column_start":5,"column_end":22}},{"value":"/ The resulting value will fall in a range that depends on the exponent.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":106529,"byte_end":106603,"line_start":86,"line_end":86,"column_start":5,"column_end":79}},{"value":"/ As an example the range with exponent 0 will be","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":106608,"byte_end":106659,"line_start":87,"line_end":87,"column_start":5,"column_end":56}},{"value":"/ [2<sup>0</sup>..2<sup>1</sup>), which is [1..2).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\float.rs","byte_start":106664,"byte_end":106716,"line_start":88,"line_end":88,"column_start":5,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":11817,"byte_end":11830,"line_start":121,"line_end":121,"column_start":9,"column_end":22},"name":"hidden_export","qualname":"::distributions::hidden_export","value":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","parent":null,"children":[{"krate":0,"index":192}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1206},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":127252,"byte_end":127264,"line_start":59,"line_end":59,"column_start":12,"column_end":24},"name":"Alphanumeric","qualname":"::distributions::other::Alphanumeric","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample a `u8`, uniformly distributed over ASCII letters and numbers:\n a-z, A-Z and 0-9.","sig":null,"attributes":[{"value":"/ Sample a `u8`, uniformly distributed over ASCII letters and numbers:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":125800,"byte_end":125872,"line_start":22,"line_end":22,"column_start":1,"column_end":73}},{"value":"/ a-z, A-Z and 0-9.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":125873,"byte_end":125894,"line_start":23,"line_end":23,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":125895,"byte_end":125898,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":125899,"byte_end":125912,"line_start":25,"line_end":25,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":125913,"byte_end":125916,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":125917,"byte_end":125924,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ use std::iter;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":125925,"byte_end":125943,"line_start":28,"line_end":28,"column_start":1,"column_end":19}},{"value":"/ use rand::{Rng, thread_rng};","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":125944,"byte_end":125976,"line_start":29,"line_end":29,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Alphanumeric;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":125977,"byte_end":126019,"line_start":30,"line_end":30,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126020,"byte_end":126023,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126024,"byte_end":126055,"line_start":32,"line_end":32,"column_start":1,"column_end":32}},{"value":"/ let chars: String = iter::repeat(())","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126056,"byte_end":126096,"line_start":33,"line_end":33,"column_start":1,"column_end":41}},{"value":"/         .map(|()| rng.sample(Alphanumeric))","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126097,"byte_end":126144,"line_start":34,"line_end":34,"column_start":1,"column_end":48}},{"value":"/         .map(char::from)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126145,"byte_end":126173,"line_start":35,"line_end":35,"column_start":1,"column_end":29}},{"value":"/         .take(7)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126174,"byte_end":126194,"line_start":36,"line_end":36,"column_start":1,"column_end":21}},{"value":"/         .collect();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126195,"byte_end":126218,"line_start":37,"line_end":37,"column_start":1,"column_end":24}},{"value":"/ println!(\"Random chars: {}\", chars);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126219,"byte_end":126259,"line_start":38,"line_end":38,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126260,"byte_end":126267,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126268,"byte_end":126271,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ # Passwords","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126272,"byte_end":126287,"line_start":41,"line_end":41,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126288,"byte_end":126291,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Users sometimes ask whether it is safe to use a string of random characters","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126292,"byte_end":126371,"line_start":43,"line_end":43,"column_start":1,"column_end":80}},{"value":"/ as a password. In principle, all RNGs in Rand implementing `CryptoRng` are","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126372,"byte_end":126450,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/ suitable as a source of randomness for generating passwords (if they are","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126451,"byte_end":126527,"line_start":45,"line_end":45,"column_start":1,"column_end":77}},{"value":"/ properly seeded), but it is more conservative to only use randomness","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126528,"byte_end":126600,"line_start":46,"line_end":46,"column_start":1,"column_end":73}},{"value":"/ directly from the operating system via the `getrandom` crate, or the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126601,"byte_end":126673,"line_start":47,"line_end":47,"column_start":1,"column_end":73}},{"value":"/ corresponding bindings of a crypto library.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126674,"byte_end":126721,"line_start":48,"line_end":48,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126722,"byte_end":126725,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ When generating passwords or keys, it is important to consider the threat","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126726,"byte_end":126803,"line_start":50,"line_end":50,"column_start":1,"column_end":78}},{"value":"/ model and in some cases the memorability of the password. This is out of","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126804,"byte_end":126880,"line_start":51,"line_end":51,"column_start":1,"column_end":77}},{"value":"/ scope of the Rand project, and therefore we defer to the following","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126881,"byte_end":126951,"line_start":52,"line_end":52,"column_start":1,"column_end":71}},{"value":"/ references:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126952,"byte_end":126967,"line_start":53,"line_end":53,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126968,"byte_end":126971,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ - [Wikipedia article on Password Strength](https://en.wikipedia.org/wiki/Password_strength)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":126972,"byte_end":127067,"line_start":55,"line_end":55,"column_start":1,"column_end":96}},{"value":"/ - [Diceware for generating memorable passwords](https://en.wikipedia.org/wiki/Diceware)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":127068,"byte_end":127159,"line_start":56,"line_end":56,"column_start":1,"column_end":92}}]},{"kind":"Type","id":{"krate":0,"index":261},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\utils.rs","byte_start":135557,"byte_end":135563,"line_start":15,"line_end":15,"column_start":10,"column_end":16},"name":"Output","qualname":"::distributions::utils::WideningMultiply::Output","value":"type Output;","parent":{"krate":0,"index":259},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":270},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\utils.rs","byte_start":142557,"byte_end":142561,"line_start":220,"line_end":220,"column_start":10,"column_end":14},"name":"Mask","qualname":"::distributions::utils::FloatSIMDUtils::Mask","value":"type Mask;","parent":{"krate":0,"index":266},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":275},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\utils.rs","byte_start":143076,"byte_end":143080,"line_start":232,"line_end":232,"column_start":10,"column_end":14},"name":"UInt","qualname":"::distributions::utils::FloatSIMDUtils::UInt","value":"type UInt;","parent":{"krate":0,"index":266},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":12951,"byte_end":12963,"line_start":146,"line_end":146,"column_start":11,"column_end":23},"name":"Distribution","qualname":"::distributions::Distribution","value":"Distribution<T>","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":299}],"decl_id":null,"docs":" Types (distributions) that can be used to create a random instance of `T`.","sig":null,"attributes":[{"value":"/ Types (distributions) that can be used to create a random instance of `T`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":11930,"byte_end":12008,"line_start":128,"line_end":128,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":12009,"byte_end":12012,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ It is possible to sample from a distribution through both the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":12013,"byte_end":12078,"line_start":130,"line_end":130,"column_start":1,"column_end":66}},{"value":"/ `Distribution` and [`Rng`] traits, via `distr.sample(&mut rng)` and","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":12079,"byte_end":12150,"line_start":131,"line_end":131,"column_start":1,"column_end":72}},{"value":"/ `rng.sample(distr)`. They also both offer the [`sample_iter`] method, which","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":12151,"byte_end":12230,"line_start":132,"line_end":132,"column_start":1,"column_end":80}},{"value":"/ produces an iterator that samples from the distribution.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":12231,"byte_end":12291,"line_start":133,"line_end":133,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":12292,"byte_end":12295,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ All implementations are expected to be immutable; this has the significant","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":12296,"byte_end":12374,"line_start":135,"line_end":135,"column_start":1,"column_end":79}},{"value":"/ advantage of not needing to consider thread safety, and for most","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":12375,"byte_end":12443,"line_start":136,"line_end":136,"column_start":1,"column_end":69}},{"value":"/ distributions efficient state-less sampling algorithms are available.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":12444,"byte_end":12517,"line_start":137,"line_end":137,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":12518,"byte_end":12521,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ Implementations are typically expected to be portable with reproducible","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":12522,"byte_end":12597,"line_start":139,"line_end":139,"column_start":1,"column_end":76}},{"value":"/ results when used with a PRNG with fixed seed; see the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":12598,"byte_end":12656,"line_start":140,"line_end":140,"column_start":1,"column_end":59}},{"value":"/ [portability chapter](https://rust-random.github.io/book/portability.html)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":12657,"byte_end":12735,"line_start":141,"line_end":141,"column_start":1,"column_end":79}},{"value":"/ of The Rust Rand Book. In some cases this does not apply, e.g. the `usize`","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":12736,"byte_end":12814,"line_start":142,"line_end":142,"column_start":1,"column_end":79}},{"value":"/ type requires different sampling on 32-bit and 64-bit machines.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":12815,"byte_end":12882,"line_start":143,"line_end":143,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":12883,"byte_end":12886,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ [`sample_iter`]: Distribution::method.sample_iter","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":12887,"byte_end":12940,"line_start":145,"line_end":145,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13057,"byte_end":13063,"line_start":148,"line_end":148,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::Distribution::sample","value":"pub fn sample<R: Rng + ?Sized>(&Self, &mut R) -> T","parent":{"krate":0,"index":295},"children":[],"decl_id":null,"docs":" Generate a random value of `T`, using `rng` as the source of randomness.\n","sig":null,"attributes":[{"value":"/ Generate a random value of `T`, using `rng` as the source of randomness.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":12973,"byte_end":13049,"line_start":147,"line_end":147,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":14357,"byte_end":14368,"line_start":184,"line_end":184,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::distributions::Distribution::sample_iter","value":"pub fn sample_iter<R>(Self, R) -> DistIter<Self, R, T> where R: Rng,\nSelf: Sized","parent":{"krate":0,"index":295},"children":[],"decl_id":null,"docs":" Create an iterator that generates random values of `T`, using `rng` as\n the source of randomness.","sig":null,"attributes":[{"value":"/ Create an iterator that generates random values of `T`, using `rng` as","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13112,"byte_end":13186,"line_start":150,"line_end":150,"column_start":5,"column_end":79}},{"value":"/ the source of randomness.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13191,"byte_end":13220,"line_start":151,"line_end":151,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13225,"byte_end":13228,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Note that this function takes `self` by value. This works since","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13233,"byte_end":13300,"line_start":153,"line_end":153,"column_start":5,"column_end":72}},{"value":"/ `Distribution<T>` is impl'd for `&D` where `D: Distribution<T>`,","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13305,"byte_end":13373,"line_start":154,"line_end":154,"column_start":5,"column_end":73}},{"value":"/ however borrowing is not automatic hence `distr.sample_iter(...)` may","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13378,"byte_end":13451,"line_start":155,"line_end":155,"column_start":5,"column_end":78}},{"value":"/ need to be replaced with `(&distr).sample_iter(...)` to borrow or","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13456,"byte_end":13525,"line_start":156,"line_end":156,"column_start":5,"column_end":74}},{"value":"/ `(&*distr).sample_iter(...)` to reborrow an existing reference.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13530,"byte_end":13597,"line_start":157,"line_end":157,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13602,"byte_end":13605,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13610,"byte_end":13623,"line_start":159,"line_end":159,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13628,"byte_end":13631,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13636,"byte_end":13643,"line_start":161,"line_end":161,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13648,"byte_end":13673,"line_start":162,"line_end":162,"column_start":5,"column_end":30}},{"value":"/ use rand::distributions::{Distribution, Alphanumeric, Uniform, Standard};","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13678,"byte_end":13755,"line_start":163,"line_end":163,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13760,"byte_end":13763,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13768,"byte_end":13799,"line_start":165,"line_end":165,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13804,"byte_end":13807,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ // Vec of 16 x f32:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13812,"byte_end":13835,"line_start":167,"line_end":167,"column_start":5,"column_end":28}},{"value":"/ let v: Vec<f32> = Standard.sample_iter(&mut rng).take(16).collect();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13840,"byte_end":13912,"line_start":168,"line_end":168,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13917,"byte_end":13920,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ // String:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13925,"byte_end":13939,"line_start":170,"line_end":170,"column_start":5,"column_end":19}},{"value":"/ let s: String = Alphanumeric","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13944,"byte_end":13976,"line_start":171,"line_end":171,"column_start":5,"column_end":37}},{"value":"/     .sample_iter(&mut rng)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":13981,"byte_end":14011,"line_start":172,"line_end":172,"column_start":5,"column_end":35}},{"value":"/     .take(7)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":14016,"byte_end":14032,"line_start":173,"line_end":173,"column_start":5,"column_end":21}},{"value":"/     .map(char::from)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":14037,"byte_end":14061,"line_start":174,"line_end":174,"column_start":5,"column_end":29}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":14066,"byte_end":14085,"line_start":175,"line_end":175,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":14090,"byte_end":14093,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ // Dice-rolling:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":14098,"byte_end":14118,"line_start":177,"line_end":177,"column_start":5,"column_end":25}},{"value":"/ let die_range = Uniform::new_inclusive(1, 6);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":14123,"byte_end":14172,"line_start":178,"line_end":178,"column_start":5,"column_end":54}},{"value":"/ let mut roll_die = die_range.sample_iter(&mut rng);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":14177,"byte_end":14232,"line_start":179,"line_end":179,"column_start":5,"column_end":60}},{"value":"/ while roll_die.next().unwrap() != 6 {","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":14237,"byte_end":14278,"line_start":180,"line_end":180,"column_start":5,"column_end":46}},{"value":"/     println!(\"Not a 6; rolling again!\");","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":14283,"byte_end":14327,"line_start":181,"line_end":181,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":14332,"byte_end":14337,"line_start":182,"line_end":182,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":14342,"byte_end":14349,"line_start":183,"line_end":183,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1573},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":15066,"byte_end":15074,"line_start":212,"line_end":212,"column_start":12,"column_end":20},"name":"DistIter","qualname":"::distributions::DistIter","value":"DistIter {  }","parent":null,"children":[{"krate":0,"index":1577},{"krate":0,"index":1578},{"krate":0,"index":1579}],"decl_id":null,"docs":" An iterator that generates random values of `T` with distribution `D`,\n using `R` as the source of randomness.","sig":null,"attributes":[{"value":"/ An iterator that generates random values of `T` with distribution `D`,","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":14749,"byte_end":14823,"line_start":204,"line_end":204,"column_start":1,"column_end":75}},{"value":"/ using `R` as the source of randomness.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":14824,"byte_end":14866,"line_start":205,"line_end":205,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":14867,"byte_end":14870,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`sample_iter`] method on [`Distribution`].","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":14871,"byte_end":14950,"line_start":207,"line_end":207,"column_start":1,"column_end":80}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":14951,"byte_end":14986,"line_start":208,"line_end":208,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":14987,"byte_end":14990,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ [`sample_iter`]: Distribution::sample_iter","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":14991,"byte_end":15037,"line_start":210,"line_end":210,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1585},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":19259,"byte_end":19267,"line_start":332,"line_end":332,"column_start":12,"column_end":20},"name":"Standard","qualname":"::distributions::Standard","value":"","parent":null,"children":[],"decl_id":null,"docs":" A generic random value distribution, implemented for many primitive types.\n Usually generates values with a numerically uniform distribution, and with a\n range appropriate to the type.","sig":null,"attributes":[{"value":"/ A generic random value distribution, implemented for many primitive types.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":15958,"byte_end":16036,"line_start":254,"line_end":254,"column_start":1,"column_end":79}},{"value":"/ Usually generates values with a numerically uniform distribution, and with a","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":16037,"byte_end":16117,"line_start":255,"line_end":255,"column_start":1,"column_end":81}},{"value":"/ range appropriate to the type.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":16118,"byte_end":16152,"line_start":256,"line_end":256,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":16153,"byte_end":16156,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ ## Provided implementations","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":16157,"byte_end":16188,"line_start":258,"line_end":258,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":16189,"byte_end":16192,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"/ Assuming the provided `Rng` is well-behaved, these implementations","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":16193,"byte_end":16263,"line_start":260,"line_end":260,"column_start":1,"column_end":71}},{"value":"/ generate values with the following ranges and distributions:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":16264,"byte_end":16328,"line_start":261,"line_end":261,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":16329,"byte_end":16332,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ * Integers (`i32`, `u32`, `isize`, `usize`, etc.): Uniformly distributed","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":16333,"byte_end":16409,"line_start":263,"line_end":263,"column_start":1,"column_end":77}},{"value":"/   over all values of the type.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":16410,"byte_end":16444,"line_start":264,"line_end":264,"column_start":1,"column_end":35}},{"value":"/ * `char`: Uniformly distributed over all Unicode scalar values, i.e. all","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":16445,"byte_end":16521,"line_start":265,"line_end":265,"column_start":1,"column_end":77}},{"value":"/   code points in the range `0...0x10_FFFF`, except for the range","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":16522,"byte_end":16590,"line_start":266,"line_end":266,"column_start":1,"column_end":69}},{"value":"/   `0xD800...0xDFFF` (the surrogate code points). This includes","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":16591,"byte_end":16657,"line_start":267,"line_end":267,"column_start":1,"column_end":67}},{"value":"/   unassigned/reserved code points.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":16658,"byte_end":16696,"line_start":268,"line_end":268,"column_start":1,"column_end":39}},{"value":"/ * `bool`: Generates `false` or `true`, each with probability 0.5.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":16697,"byte_end":16766,"line_start":269,"line_end":269,"column_start":1,"column_end":70}},{"value":"/ * Floating point types (`f32` and `f64`): Uniformly distributed in the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":16767,"byte_end":16841,"line_start":270,"line_end":270,"column_start":1,"column_end":75}},{"value":"/   half-open range `[0, 1)`. See notes below.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":16842,"byte_end":16890,"line_start":271,"line_end":271,"column_start":1,"column_end":49}},{"value":"/ * Wrapping integers (`Wrapping<T>`), besides the type identical to their","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":16891,"byte_end":16967,"line_start":272,"line_end":272,"column_start":1,"column_end":77}},{"value":"/   normal integer variants.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":16968,"byte_end":16998,"line_start":273,"line_end":273,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":16999,"byte_end":17002,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ The `Standard` distribution also supports generation of the following","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17003,"byte_end":17076,"line_start":275,"line_end":275,"column_start":1,"column_end":74}},{"value":"/ compound types where all component types are supported:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17077,"byte_end":17136,"line_start":276,"line_end":276,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17137,"byte_end":17140,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ *   Tuples (up to 12 elements): each element is generated sequentially.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17141,"byte_end":17216,"line_start":278,"line_end":278,"column_start":1,"column_end":76}},{"value":"/ *   Arrays (up to 32 elements): each element is generated sequentially;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17217,"byte_end":17292,"line_start":279,"line_end":279,"column_start":1,"column_end":76}},{"value":"/     see also [`Rng::fill`] which supports arbitrary array length for integer","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17293,"byte_end":17373,"line_start":280,"line_end":280,"column_start":1,"column_end":81}},{"value":"/     types and tends to be faster for `u32` and smaller types.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17374,"byte_end":17439,"line_start":281,"line_end":281,"column_start":1,"column_end":66}},{"value":"/ *   `Option<T>` first generates a `bool`, and if true generates and returns","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17440,"byte_end":17519,"line_start":282,"line_end":282,"column_start":1,"column_end":80}},{"value":"/     `Some(value)` where `value: T`, otherwise returning `None`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17520,"byte_end":17587,"line_start":283,"line_end":283,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17588,"byte_end":17591,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ ## Custom implementations","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17592,"byte_end":17621,"line_start":285,"line_end":285,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17622,"byte_end":17625,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ The [`Standard`] distribution may be implemented for user types as follows:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17626,"byte_end":17705,"line_start":287,"line_end":287,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17706,"byte_end":17709,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17710,"byte_end":17717,"line_start":289,"line_end":289,"column_start":1,"column_end":8}},{"value":"/ # #![allow(dead_code)]","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17718,"byte_end":17744,"line_start":290,"line_end":290,"column_start":1,"column_end":27}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17745,"byte_end":17763,"line_start":291,"line_end":291,"column_start":1,"column_end":19}},{"value":"/ use rand::distributions::{Distribution, Standard};","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17764,"byte_end":17818,"line_start":292,"line_end":292,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17819,"byte_end":17822,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ struct MyF32 {","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17823,"byte_end":17841,"line_start":294,"line_end":294,"column_start":1,"column_end":19}},{"value":"/     x: f32,","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17842,"byte_end":17857,"line_start":295,"line_end":295,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17858,"byte_end":17863,"line_start":296,"line_end":296,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17864,"byte_end":17867,"line_start":297,"line_end":297,"column_start":1,"column_end":4}},{"value":"/ impl Distribution<MyF32> for Standard {","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17868,"byte_end":17911,"line_start":298,"line_end":298,"column_start":1,"column_end":44}},{"value":"/     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> MyF32 {","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17912,"byte_end":17977,"line_start":299,"line_end":299,"column_start":1,"column_end":66}},{"value":"/         MyF32 { x: rng.gen() }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":17978,"byte_end":18012,"line_start":300,"line_end":300,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18013,"byte_end":18022,"line_start":301,"line_end":301,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18023,"byte_end":18028,"line_start":302,"line_end":302,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18029,"byte_end":18036,"line_start":303,"line_end":303,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18037,"byte_end":18040,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ ## Example usage","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18041,"byte_end":18061,"line_start":305,"line_end":305,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18062,"byte_end":18069,"line_start":306,"line_end":306,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18070,"byte_end":18095,"line_start":307,"line_end":307,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::Standard;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18096,"byte_end":18134,"line_start":308,"line_end":308,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18135,"byte_end":18138,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = StdRng::from_entropy().sample(Standard);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18139,"byte_end":18198,"line_start":310,"line_end":310,"column_start":1,"column_end":60}},{"value":"/ println!(\"f32 from [0, 1): {}\", val);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18199,"byte_end":18240,"line_start":311,"line_end":311,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18241,"byte_end":18248,"line_start":312,"line_end":312,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18249,"byte_end":18252,"line_start":313,"line_end":313,"column_start":1,"column_end":4}},{"value":"/ # Floating point implementation","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18253,"byte_end":18288,"line_start":314,"line_end":314,"column_start":1,"column_end":36}},{"value":"/ The floating point implementations for `Standard` generate a random value in","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18289,"byte_end":18369,"line_start":315,"line_end":315,"column_start":1,"column_end":81}},{"value":"/ the half-open interval `[0, 1)`, i.e. including 0 but not 1.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18370,"byte_end":18434,"line_start":316,"line_end":316,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18435,"byte_end":18438,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε/2`. For `f32`","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18439,"byte_end":18513,"line_start":318,"line_end":318,"column_start":1,"column_end":74}},{"value":"/ the 24 most significant random bits of a `u32` are used and for `f64` the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18514,"byte_end":18591,"line_start":319,"line_end":319,"column_start":1,"column_end":78}},{"value":"/ 53 most significant bits of a `u64` are used. The conversion uses the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18592,"byte_end":18665,"line_start":320,"line_end":320,"column_start":1,"column_end":74}},{"value":"/ multiplicative method: `(rng.gen::<$uty>() >> N) as $ty * (ε/2)`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18666,"byte_end":18736,"line_start":321,"line_end":321,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18737,"byte_end":18740,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ See also: [`Open01`] which samples from `(0, 1)`, [`OpenClosed01`] which","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18741,"byte_end":18817,"line_start":323,"line_end":323,"column_start":1,"column_end":77}},{"value":"/ samples from `(0, 1]` and `Rng::gen_range(0..1)` which also samples from","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18818,"byte_end":18894,"line_start":324,"line_end":324,"column_start":1,"column_end":77}},{"value":"/ `[0, 1)`. Note that `Open01` uses transmute-based methods which yield 1 bit","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18895,"byte_end":18974,"line_start":325,"line_end":325,"column_start":1,"column_end":80}},{"value":"/ less precision but may perform faster on some architectures (on modern Intel","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":18975,"byte_end":19055,"line_start":326,"line_end":326,"column_start":1,"column_end":81}},{"value":"/ CPUs all methods have approximately equal performance).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":19056,"byte_end":19115,"line_start":327,"line_end":327,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":19116,"byte_end":19119,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ [`Uniform`]: uniform::Uniform","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":19120,"byte_end":19153,"line_start":329,"line_end":329,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":318},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332}],"decl_id":null,"docs":" Convenience re-export of common members","sig":null,"attributes":[{"value":"/ Convenience re-export of common members","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":149018,"byte_end":149061,"line_start":9,"line_end":9,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":149062,"byte_end":149065,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Like the standard library's prelude, this module simplifies importing of","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":149066,"byte_end":149142,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"/ common items. Unlike the standard prelude, the contents of this module must","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":149143,"byte_end":149222,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ be imported manually:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":149223,"byte_end":149248,"line_start":13,"line_end":13,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":149249,"byte_end":149252,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":149253,"byte_end":149260,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":149261,"byte_end":149286,"line_start":16,"line_end":16,"column_start":1,"column_end":26}},{"value":"/ # let mut r = StdRng::from_rng(thread_rng()).unwrap();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":149287,"byte_end":149345,"line_start":17,"line_end":17,"column_start":1,"column_end":59}},{"value":"/ # let _: f32 = r.gen();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":149346,"byte_end":149373,"line_start":18,"line_end":18,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\prelude.rs","byte_start":149374,"byte_end":149381,"line_start":19,"line_end":19,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":348},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152108,"byte_end":152111,"line_start":55,"line_end":55,"column_start":11,"column_end":14},"name":"Rng","qualname":"::rng::Rng","value":"Rng: RngCore","parent":null,"children":[{"krate":0,"index":349},{"krate":0,"index":351},{"krate":0,"index":354},{"krate":0,"index":357},{"krate":0,"index":360},{"krate":0,"index":363},{"krate":0,"index":365},{"krate":0,"index":366}],"decl_id":null,"docs":" An automatically-implemented extension trait on [`RngCore`] providing high-level\n generic methods for sampling values and other convenience methods.","sig":null,"attributes":[{"value":"/ An automatically-implemented extension trait on [`RngCore`] providing high-level","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":150580,"byte_end":150664,"line_start":18,"line_end":18,"column_start":1,"column_end":85}},{"value":"/ generic methods for sampling values and other convenience methods.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":150665,"byte_end":150735,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":150736,"byte_end":150739,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This is the primary trait to use when generating random values.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":150740,"byte_end":150807,"line_start":21,"line_end":21,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":150808,"byte_end":150811,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Generic usage","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":150812,"byte_end":150831,"line_start":23,"line_end":23,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":150832,"byte_end":150835,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The basic pattern is `fn foo<R: Rng + ?Sized>(rng: &mut R)`. Some","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":150836,"byte_end":150906,"line_start":25,"line_end":25,"column_start":1,"column_end":70}},{"value":"/ things are worth noting here:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":150907,"byte_end":150940,"line_start":26,"line_end":26,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":150941,"byte_end":150944,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ - Since `Rng: RngCore` and every `RngCore` implements `Rng`, it makes no","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":150945,"byte_end":151021,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/   difference whether we use `R: Rng` or `R: RngCore`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":151022,"byte_end":151079,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/ - The `+ ?Sized` un-bounding allows functions to be called directly on","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":151080,"byte_end":151154,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/   type-erased references; i.e. `foo(r)` where `r: &mut RngCore`. Without","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":151155,"byte_end":151231,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/   this it would be necessary to write `foo(&mut r)`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":151232,"byte_end":151288,"line_start":32,"line_end":32,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":151289,"byte_end":151292,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ An alternative pattern is possible: `fn foo<R: Rng>(rng: R)`. This has some","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":151293,"byte_end":151372,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ trade-offs. It allows the argument to be consumed directly without a `&mut`","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":151373,"byte_end":151452,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ (which is how `from_rng(thread_rng())` works); also it still works directly","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":151453,"byte_end":151532,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/ on references (including type-erased references). Unfortunately within the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":151533,"byte_end":151611,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/ function `foo` it is not known whether `rng` is a reference type or not,","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":151612,"byte_end":151688,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ hence many uses of `rng` require an extra reference, either explicitly","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":151689,"byte_end":151763,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/ (`distr.sample(&mut rng)`) or implicitly (`rng.gen()`); one may hope the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":151764,"byte_end":151840,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/ optimiser can remove redundant references later.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":151841,"byte_end":151893,"line_start":41,"line_end":41,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":151894,"byte_end":151897,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":151898,"byte_end":151910,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":151911,"byte_end":151914,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":151915,"byte_end":151922,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/ # use rand::thread_rng;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":151923,"byte_end":151950,"line_start":46,"line_end":46,"column_start":1,"column_end":28}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":151951,"byte_end":151969,"line_start":47,"line_end":47,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":151970,"byte_end":151973,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ fn foo<R: Rng + ?Sized>(rng: &mut R) -> f32 {","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":151974,"byte_end":152023,"line_start":49,"line_end":49,"column_start":1,"column_end":50}},{"value":"/     rng.gen()","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152024,"byte_end":152041,"line_start":50,"line_end":50,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152042,"byte_end":152047,"line_start":51,"line_end":51,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152048,"byte_end":152051,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # let v = foo(&mut thread_rng());","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152052,"byte_end":152089,"line_start":53,"line_end":53,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152090,"byte_end":152097,"line_start":54,"line_end":54,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153261,"byte_end":153264,"line_start":91,"line_end":91,"column_start":8,"column_end":11},"name":"gen","qualname":"::rng::Rng::gen","value":"pub fn gen<T>(&mut Self) -> T where Standard: Distribution<T>","parent":{"krate":0,"index":348},"children":[],"decl_id":null,"docs":" Return a random value supporting the [`Standard`] distribution.","sig":null,"attributes":[{"value":"/ Return a random value supporting the [`Standard`] distribution.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152127,"byte_end":152194,"line_start":56,"line_end":56,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152199,"byte_end":152202,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152207,"byte_end":152220,"line_start":58,"line_end":58,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152225,"byte_end":152228,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152233,"byte_end":152240,"line_start":60,"line_end":60,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152245,"byte_end":152277,"line_start":61,"line_end":61,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152282,"byte_end":152285,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152290,"byte_end":152321,"line_start":63,"line_end":63,"column_start":5,"column_end":36}},{"value":"/ let x: u32 = rng.gen();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152326,"byte_end":152353,"line_start":64,"line_end":64,"column_start":5,"column_end":32}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152358,"byte_end":152380,"line_start":65,"line_end":65,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", rng.gen::<(f64, bool)>());","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152385,"byte_end":152432,"line_start":66,"line_end":66,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152437,"byte_end":152444,"line_start":67,"line_end":67,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152449,"byte_end":152452,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ # Arrays and tuples","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152457,"byte_end":152480,"line_start":69,"line_end":69,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152485,"byte_end":152488,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ The `rng.gen()` method is able to generate arrays (up to 32 elements)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152493,"byte_end":152566,"line_start":71,"line_end":71,"column_start":5,"column_end":78}},{"value":"/ and tuples (up to 12 elements), so long as all element types can be","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152571,"byte_end":152642,"line_start":72,"line_end":72,"column_start":5,"column_end":76}},{"value":"/ generated.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152647,"byte_end":152661,"line_start":73,"line_end":73,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152666,"byte_end":152669,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ For arrays of integers, especially for those with small element types","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152674,"byte_end":152747,"line_start":75,"line_end":75,"column_start":5,"column_end":78}},{"value":"/ (< 64 bit), it will likely be faster to instead use [`Rng::fill`].","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152752,"byte_end":152822,"line_start":76,"line_end":76,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152827,"byte_end":152830,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152835,"byte_end":152842,"line_start":78,"line_end":78,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152847,"byte_end":152879,"line_start":79,"line_end":79,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152884,"byte_end":152887,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152892,"byte_end":152923,"line_start":81,"line_end":81,"column_start":5,"column_end":36}},{"value":"/ let tuple: (u8, i32, char) = rng.gen(); // arbitrary tuple support","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152928,"byte_end":152998,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153003,"byte_end":153006,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ let arr1: [f32; 32] = rng.gen();        // array construction","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153011,"byte_end":153076,"line_start":84,"line_end":84,"column_start":5,"column_end":70}},{"value":"/ let mut arr2 = [0u8; 128];","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153081,"byte_end":153111,"line_start":85,"line_end":85,"column_start":5,"column_end":35}},{"value":"/ rng.fill(&mut arr2);                    // array fill","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153116,"byte_end":153173,"line_start":86,"line_end":86,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153178,"byte_end":153185,"line_start":87,"line_end":87,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153190,"byte_end":153193,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ [`Standard`]: distributions::Standard","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153198,"byte_end":153239,"line_start":89,"line_end":89,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153244,"byte_end":153253,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154299,"byte_end":154308,"line_start":127,"line_end":127,"column_start":8,"column_end":17},"name":"gen_range","qualname":"::rng::Rng::gen_range","value":"pub fn gen_range<T, R>(&mut Self, R) -> T where T: SampleUniform,\nR: SampleRange<T>","parent":{"krate":0,"index":348},"children":[],"decl_id":null,"docs":" Generate a random value in the given range.","sig":null,"attributes":[{"value":"/ Generate a random value in the given range.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153363,"byte_end":153410,"line_start":96,"line_end":96,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153415,"byte_end":153418,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ This function is optimised for the case that only a single sample is","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153423,"byte_end":153495,"line_start":98,"line_end":98,"column_start":5,"column_end":77}},{"value":"/ made from the given range. See also the [`Uniform`] distribution","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153500,"byte_end":153568,"line_start":99,"line_end":99,"column_start":5,"column_end":73}},{"value":"/ type which may be faster if sampling from the same range repeatedly.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153573,"byte_end":153645,"line_start":100,"line_end":100,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153650,"byte_end":153653,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ Only `gen_range(low..high)` and `gen_range(low..=high)` are supported.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153658,"byte_end":153732,"line_start":102,"line_end":102,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153737,"byte_end":153740,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153745,"byte_end":153757,"line_start":104,"line_end":104,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153762,"byte_end":153765,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Panics if the range is empty.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153770,"byte_end":153803,"line_start":106,"line_end":106,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153808,"byte_end":153811,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153816,"byte_end":153829,"line_start":108,"line_end":108,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153834,"byte_end":153837,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153842,"byte_end":153849,"line_start":110,"line_end":110,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153854,"byte_end":153886,"line_start":111,"line_end":111,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153891,"byte_end":153894,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153899,"byte_end":153930,"line_start":113,"line_end":113,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153935,"byte_end":153938,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ // Exclusive range","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153943,"byte_end":153965,"line_start":115,"line_end":115,"column_start":5,"column_end":27}},{"value":"/ let n: u32 = rng.gen_range(0..10);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":153970,"byte_end":154008,"line_start":116,"line_end":116,"column_start":5,"column_end":43}},{"value":"/ println!(\"{}\", n);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154013,"byte_end":154035,"line_start":117,"line_end":117,"column_start":5,"column_end":27}},{"value":"/ let m: f64 = rng.gen_range(-40.0..1.3e5);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154040,"byte_end":154085,"line_start":118,"line_end":118,"column_start":5,"column_end":50}},{"value":"/ println!(\"{}\", m);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154090,"byte_end":154112,"line_start":119,"line_end":119,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154117,"byte_end":154120,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ // Inclusive range","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154125,"byte_end":154147,"line_start":121,"line_end":121,"column_start":5,"column_end":27}},{"value":"/ let n: u32 = rng.gen_range(0..=10);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154152,"byte_end":154191,"line_start":122,"line_end":122,"column_start":5,"column_end":44}},{"value":"/ println!(\"{}\", n);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154196,"byte_end":154218,"line_start":123,"line_end":123,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154223,"byte_end":154230,"line_start":124,"line_end":124,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154235,"byte_end":154238,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ [`Uniform`]: distributions::uniform::Uniform","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154243,"byte_end":154291,"line_start":126,"line_end":126,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154995,"byte_end":155001,"line_start":150,"line_end":150,"column_start":8,"column_end":14},"name":"sample","qualname":"::rng::Rng::sample","value":"pub fn sample<T, D: Distribution<T>>(&mut Self, D) -> T","parent":{"krate":0,"index":348},"children":[],"decl_id":null,"docs":" Sample a new value, using the given distribution.","sig":null,"attributes":[{"value":"/ Sample a new value, using the given distribution.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154519,"byte_end":154572,"line_start":136,"line_end":136,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154577,"byte_end":154580,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ ### Example","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154585,"byte_end":154600,"line_start":138,"line_end":138,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154605,"byte_end":154608,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154613,"byte_end":154620,"line_start":140,"line_end":140,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154625,"byte_end":154657,"line_start":141,"line_end":141,"column_start":5,"column_end":37}},{"value":"/ use rand::distributions::Uniform;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154662,"byte_end":154699,"line_start":142,"line_end":142,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154704,"byte_end":154707,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154712,"byte_end":154743,"line_start":144,"line_end":144,"column_start":5,"column_end":36}},{"value":"/ let x = rng.sample(Uniform::new(10u32, 15));","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154748,"byte_end":154796,"line_start":145,"line_end":145,"column_start":5,"column_end":53}},{"value":"/ // Type annotation requires two types, the type and distribution; the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154801,"byte_end":154874,"line_start":146,"line_end":146,"column_start":5,"column_end":78}},{"value":"/ // distribution can be inferred.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154879,"byte_end":154915,"line_start":147,"line_end":147,"column_start":5,"column_end":41}},{"value":"/ let y = rng.sample::<u16, _>(Uniform::new(10, 15));","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154920,"byte_end":154975,"line_start":148,"line_end":148,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":154980,"byte_end":154987,"line_start":149,"line_end":149,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156402,"byte_end":156413,"line_start":190,"line_end":190,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::rng::Rng::sample_iter","value":"pub fn sample_iter<T, D>(Self, D) -> distributions::DistIter<D, Self, T> where\nD: Distribution<T>, Self: Sized","parent":{"krate":0,"index":348},"children":[],"decl_id":null,"docs":" Create an iterator that generates values using the given distribution.","sig":null,"attributes":[{"value":"/ Create an iterator that generates values using the given distribution.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155091,"byte_end":155165,"line_start":154,"line_end":154,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155170,"byte_end":155173,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ Note that this function takes its arguments by value. This works since","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155178,"byte_end":155252,"line_start":156,"line_end":156,"column_start":5,"column_end":79}},{"value":"/ `(&mut R): Rng where R: Rng` and","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155257,"byte_end":155293,"line_start":157,"line_end":157,"column_start":5,"column_end":41}},{"value":"/ `(&D): Distribution where D: Distribution`,","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155298,"byte_end":155345,"line_start":158,"line_end":158,"column_start":5,"column_end":52}},{"value":"/ however borrowing is not automatic hence `rng.sample_iter(...)` may","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155350,"byte_end":155421,"line_start":159,"line_end":159,"column_start":5,"column_end":76}},{"value":"/ need to be replaced with `(&mut rng).sample_iter(...)`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155426,"byte_end":155485,"line_start":160,"line_end":160,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155490,"byte_end":155493,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155498,"byte_end":155511,"line_start":162,"line_end":162,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155516,"byte_end":155519,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155524,"byte_end":155531,"line_start":164,"line_end":164,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155536,"byte_end":155568,"line_start":165,"line_end":165,"column_start":5,"column_end":37}},{"value":"/ use rand::distributions::{Alphanumeric, Uniform, Standard};","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155573,"byte_end":155636,"line_start":166,"line_end":166,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155641,"byte_end":155644,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155649,"byte_end":155680,"line_start":168,"line_end":168,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155685,"byte_end":155688,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ // Vec of 16 x f32:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155693,"byte_end":155716,"line_start":170,"line_end":170,"column_start":5,"column_end":28}},{"value":"/ let v: Vec<f32> = (&mut rng).sample_iter(Standard).take(16).collect();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155721,"byte_end":155795,"line_start":171,"line_end":171,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155800,"byte_end":155803,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ // String:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155808,"byte_end":155822,"line_start":173,"line_end":173,"column_start":5,"column_end":19}},{"value":"/ let s: String = (&mut rng).sample_iter(Alphanumeric)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155827,"byte_end":155883,"line_start":174,"line_end":174,"column_start":5,"column_end":61}},{"value":"/     .take(7)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155888,"byte_end":155904,"line_start":175,"line_end":175,"column_start":5,"column_end":21}},{"value":"/     .map(char::from)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155909,"byte_end":155933,"line_start":176,"line_end":176,"column_start":5,"column_end":29}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155938,"byte_end":155957,"line_start":177,"line_end":177,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155962,"byte_end":155965,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ // Combined values","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155970,"byte_end":155992,"line_start":179,"line_end":179,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", (&mut rng).sample_iter(Standard).take(5)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":155997,"byte_end":156058,"line_start":180,"line_end":180,"column_start":5,"column_end":66}},{"value":"/                              .collect::<Vec<(f64, bool)>>());","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156063,"byte_end":156128,"line_start":181,"line_end":181,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156133,"byte_end":156136,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ // Dice-rolling:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156141,"byte_end":156161,"line_start":183,"line_end":183,"column_start":5,"column_end":25}},{"value":"/ let die_range = Uniform::new_inclusive(1, 6);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156166,"byte_end":156215,"line_start":184,"line_end":184,"column_start":5,"column_end":54}},{"value":"/ let mut roll_die = (&mut rng).sample_iter(die_range);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156220,"byte_end":156277,"line_start":185,"line_end":185,"column_start":5,"column_end":62}},{"value":"/ while roll_die.next().unwrap() != 6 {","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156282,"byte_end":156323,"line_start":186,"line_end":186,"column_start":5,"column_end":46}},{"value":"/     println!(\"Not a 6; rolling again!\");","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156328,"byte_end":156372,"line_start":187,"line_end":187,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156377,"byte_end":156382,"line_start":188,"line_end":188,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156387,"byte_end":156394,"line_start":189,"line_end":189,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157147,"byte_end":157151,"line_start":216,"line_end":216,"column_start":8,"column_end":12},"name":"fill","qualname":"::rng::Rng::fill","value":"pub fn fill<T: Fill + ?Sized>(&mut Self, &mut T)","parent":{"krate":0,"index":348},"children":[],"decl_id":null,"docs":" Fill any type implementing [`Fill`] with random data","sig":null,"attributes":[{"value":"/ Fill any type implementing [`Fill`] with random data","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156583,"byte_end":156639,"line_start":198,"line_end":198,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156644,"byte_end":156647,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ The distribution is expected to be uniform with portable results, but","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156652,"byte_end":156725,"line_start":200,"line_end":200,"column_start":5,"column_end":78}},{"value":"/ this cannot be guaranteed for third-party implementations.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156730,"byte_end":156792,"line_start":201,"line_end":201,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156797,"byte_end":156800,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ This is identical to [`try_fill`] except that it panics on error.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156805,"byte_end":156874,"line_start":203,"line_end":203,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156879,"byte_end":156882,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156887,"byte_end":156900,"line_start":205,"line_end":205,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156905,"byte_end":156908,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156913,"byte_end":156920,"line_start":207,"line_end":207,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156925,"byte_end":156957,"line_start":208,"line_end":208,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156962,"byte_end":156965,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ let mut arr = [0i8; 20];","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":156970,"byte_end":156998,"line_start":210,"line_end":210,"column_start":5,"column_end":33}},{"value":"/ thread_rng().fill(&mut arr[..]);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157003,"byte_end":157039,"line_start":211,"line_end":211,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157044,"byte_end":157051,"line_start":212,"line_end":212,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157056,"byte_end":157059,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157064,"byte_end":157103,"line_start":214,"line_end":214,"column_start":5,"column_end":44}},{"value":"/ [`try_fill`]: Rng::try_fill","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157108,"byte_end":157139,"line_start":215,"line_end":215,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157991,"byte_end":157999,"line_start":244,"line_end":244,"column_start":8,"column_end":16},"name":"try_fill","qualname":"::rng::Rng::try_fill","value":"pub fn try_fill<T: Fill + ?Sized>(&mut Self, &mut T) -> Result<(), Error>","parent":{"krate":0,"index":348},"children":[],"decl_id":null,"docs":" Fill any type implementing [`Fill`] with random data","sig":null,"attributes":[{"value":"/ Fill any type implementing [`Fill`] with random data","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157283,"byte_end":157339,"line_start":220,"line_end":220,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157344,"byte_end":157347,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ The distribution is expected to be uniform with portable results, but","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157352,"byte_end":157425,"line_start":222,"line_end":222,"column_start":5,"column_end":78}},{"value":"/ this cannot be guaranteed for third-party implementations.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157430,"byte_end":157492,"line_start":223,"line_end":223,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157497,"byte_end":157500,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ This is identical to [`fill`] except that it forwards errors.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157505,"byte_end":157570,"line_start":225,"line_end":225,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157575,"byte_end":157578,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157583,"byte_end":157596,"line_start":227,"line_end":227,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157601,"byte_end":157604,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157609,"byte_end":157616,"line_start":229,"line_end":229,"column_start":5,"column_end":12}},{"value":"/ # use rand::Error;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157621,"byte_end":157643,"line_start":230,"line_end":230,"column_start":5,"column_end":27}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157648,"byte_end":157680,"line_start":231,"line_end":231,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157685,"byte_end":157688,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ # fn try_inner() -> Result<(), Error> {","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157693,"byte_end":157736,"line_start":233,"line_end":233,"column_start":5,"column_end":48}},{"value":"/ let mut arr = [0u64; 4];","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157741,"byte_end":157769,"line_start":234,"line_end":234,"column_start":5,"column_end":33}},{"value":"/ thread_rng().try_fill(&mut arr[..])?;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157774,"byte_end":157815,"line_start":235,"line_end":235,"column_start":5,"column_end":46}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157820,"byte_end":157832,"line_start":236,"line_end":236,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157837,"byte_end":157844,"line_start":237,"line_end":237,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157849,"byte_end":157852,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ # try_inner().unwrap()","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157857,"byte_end":157883,"line_start":239,"line_end":239,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157888,"byte_end":157895,"line_start":240,"line_end":240,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157900,"byte_end":157903,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157908,"byte_end":157955,"line_start":242,"line_end":242,"column_start":5,"column_end":52}},{"value":"/ [`fill`]: Rng::fill","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":157960,"byte_end":157983,"line_start":243,"line_end":243,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158625,"byte_end":158633,"line_start":268,"line_end":268,"column_start":8,"column_end":16},"name":"gen_bool","qualname":"::rng::Rng::gen_bool","value":"pub fn gen_bool(&mut Self, f64) -> bool","parent":{"krate":0,"index":348},"children":[],"decl_id":null,"docs":" Return a bool with a probability `p` of being true.","sig":null,"attributes":[{"value":"/ Return a bool with a probability `p` of being true.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158105,"byte_end":158160,"line_start":248,"line_end":248,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158165,"byte_end":158168,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ See also the [`Bernoulli`] distribution, which may be faster if","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158173,"byte_end":158240,"line_start":250,"line_end":250,"column_start":5,"column_end":72}},{"value":"/ sampling from the same probability repeatedly.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158245,"byte_end":158295,"line_start":251,"line_end":251,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158300,"byte_end":158303,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158308,"byte_end":158321,"line_start":253,"line_end":253,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158326,"byte_end":158329,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158334,"byte_end":158341,"line_start":255,"line_end":255,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158346,"byte_end":158378,"line_start":256,"line_end":256,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158383,"byte_end":158386,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158391,"byte_end":158422,"line_start":258,"line_end":258,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_bool(1.0 / 3.0));","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158427,"byte_end":158471,"line_start":259,"line_end":259,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158476,"byte_end":158483,"line_start":260,"line_end":260,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158488,"byte_end":158491,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158496,"byte_end":158508,"line_start":262,"line_end":262,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158513,"byte_end":158516,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ If `p < 0` or `p > 1`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158521,"byte_end":158547,"line_start":264,"line_end":264,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158552,"byte_end":158555,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ [`Bernoulli`]: distributions::Bernoulli","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158560,"byte_end":158603,"line_start":266,"line_end":266,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158608,"byte_end":158617,"line_start":267,"line_end":267,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159609,"byte_end":159618,"line_start":297,"line_end":297,"column_start":8,"column_end":17},"name":"gen_ratio","qualname":"::rng::Rng::gen_ratio","value":"pub fn gen_ratio(&mut Self, u32, u32) -> bool","parent":{"krate":0,"index":348},"children":[],"decl_id":null,"docs":" Return a bool with a probability of `numerator/denominator` of being\n true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of\n returning true. If `numerator == denominator`, then the returned value\n is guaranteed to be `true`. If `numerator == 0`, then the returned\n value is guaranteed to be `false`.","sig":null,"attributes":[{"value":"/ Return a bool with a probability of `numerator/denominator` of being","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158756,"byte_end":158828,"line_start":273,"line_end":273,"column_start":5,"column_end":77}},{"value":"/ true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158833,"byte_end":158904,"line_start":274,"line_end":274,"column_start":5,"column_end":76}},{"value":"/ returning true. If `numerator == denominator`, then the returned value","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158909,"byte_end":158983,"line_start":275,"line_end":275,"column_start":5,"column_end":79}},{"value":"/ is guaranteed to be `true`. If `numerator == 0`, then the returned","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":158988,"byte_end":159058,"line_start":276,"line_end":276,"column_start":5,"column_end":75}},{"value":"/ value is guaranteed to be `false`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159063,"byte_end":159101,"line_start":277,"line_end":277,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159106,"byte_end":159109,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ See also the [`Bernoulli`] distribution, which may be faster if","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159114,"byte_end":159181,"line_start":279,"line_end":279,"column_start":5,"column_end":72}},{"value":"/ sampling from the same `numerator` and `denominator` repeatedly.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159186,"byte_end":159254,"line_start":280,"line_end":280,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159259,"byte_end":159262,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159267,"byte_end":159279,"line_start":282,"line_end":282,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159284,"byte_end":159287,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ If `denominator == 0` or `numerator > denominator`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159292,"byte_end":159347,"line_start":284,"line_end":284,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159352,"byte_end":159355,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159360,"byte_end":159373,"line_start":286,"line_end":286,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159378,"byte_end":159381,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159386,"byte_end":159393,"line_start":288,"line_end":288,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159398,"byte_end":159430,"line_start":289,"line_end":289,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159435,"byte_end":159438,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159443,"byte_end":159474,"line_start":291,"line_end":291,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_ratio(2, 3));","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159479,"byte_end":159519,"line_start":292,"line_end":292,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159524,"byte_end":159531,"line_start":293,"line_end":293,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159536,"byte_end":159539,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ [`Bernoulli`]: distributions::Bernoulli","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159544,"byte_end":159587,"line_start":295,"line_end":295,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159592,"byte_end":159601,"line_start":296,"line_end":296,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":160167,"byte_end":160171,"line_start":312,"line_end":312,"column_start":11,"column_end":15},"name":"Fill","qualname":"::rng::Fill","value":"Fill","parent":null,"children":[{"krate":0,"index":370}],"decl_id":null,"docs":" Types which may be filled with random data","sig":null,"attributes":[{"value":"/ Types which may be filled with random data","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159833,"byte_end":159879,"line_start":305,"line_end":305,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159880,"byte_end":159883,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ This trait allows arrays to be efficiently filled with random data.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159884,"byte_end":159955,"line_start":307,"line_end":307,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159956,"byte_end":159959,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"/ Implementations are expected to be portable across machines unless","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159960,"byte_end":160030,"line_start":309,"line_end":309,"column_start":1,"column_end":71}},{"value":"/ clearly documented otherwise (see the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":160031,"byte_end":160072,"line_start":310,"line_end":310,"column_start":1,"column_end":42}},{"value":"/ [Chapter on Portability](https://rust-random.github.io/book/portability.html)).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":160073,"byte_end":160156,"line_start":311,"line_end":311,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":160216,"byte_end":160224,"line_start":314,"line_end":314,"column_start":8,"column_end":16},"name":"try_fill","qualname":"::rng::Fill::try_fill","value":"pub fn try_fill<R: Rng + ?Sized>(&mut Self, &mut R) -> Result<(), Error>","parent":{"krate":0,"index":369},"children":[],"decl_id":null,"docs":" Fill self with random data\n","sig":null,"attributes":[{"value":"/ Fill self with random data","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":160178,"byte_end":160208,"line_start":313,"line_end":313,"column_start":5,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":378},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rngs","qualname":"::rngs","value":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":460},{"krate":0,"index":472},{"krate":0,"index":491},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":2234}],"decl_id":null,"docs":" Random number generators and adapters","sig":null,"attributes":[{"value":"/ Random number generators and adapters","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":168686,"byte_end":168727,"line_start":9,"line_end":9,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":168728,"byte_end":168731,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ## Background: Random number generators (RNGs)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":168732,"byte_end":168782,"line_start":11,"line_end":11,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":168783,"byte_end":168786,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Computers cannot produce random numbers from nowhere. We classify","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":168787,"byte_end":168856,"line_start":13,"line_end":13,"column_start":1,"column_end":70}},{"value":"/ random number generators as follows:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":168857,"byte_end":168897,"line_start":14,"line_end":14,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":168898,"byte_end":168901,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ -   \"True\" random number generators (TRNGs) use hard-to-predict data sources","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":168902,"byte_end":168982,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/     (e.g. the high-resolution parts of event timings and sensor jitter) to","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":168983,"byte_end":169061,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/     harvest random bit-sequences, apply algorithms to remove bias and","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":169062,"byte_end":169135,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"/     estimate available entropy, then combine these bits into a byte-sequence","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":169136,"byte_end":169216,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/     or an entropy pool. This job is usually done by the operating system or","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":169217,"byte_end":169296,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/     a hardware generator (HRNG).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":169297,"byte_end":169333,"line_start":21,"line_end":21,"column_start":1,"column_end":37}},{"value":"/ -   \"Pseudo\"-random number generators (PRNGs) use algorithms to transform a","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":169334,"byte_end":169413,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/     seed into a sequence of pseudo-random numbers. These generators can be","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":169414,"byte_end":169492,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/     fast and produce well-distributed unpredictable random numbers (or not).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":169493,"byte_end":169573,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/     They are usually deterministic: given algorithm and seed, the output","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":169574,"byte_end":169650,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"/     sequence can be reproduced. They have finite period and eventually loop;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":169651,"byte_end":169731,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/     with many algorithms this period is fixed and can be proven sufficiently","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":169732,"byte_end":169812,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"/     long, while others are chaotic and the period depends on the seed.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":169813,"byte_end":169887,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/ -   \"Cryptographically secure\" pseudo-random number generators (CSPRNGs)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":169888,"byte_end":169964,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/     are the sub-set of PRNGs which are secure. Security of the generator","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":169965,"byte_end":170041,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/     relies both on hiding the internal state and using a strong algorithm.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170042,"byte_end":170120,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170121,"byte_end":170124,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ## Traits and functionality","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170125,"byte_end":170156,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170157,"byte_end":170160,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ All RNGs implement the [`RngCore`] trait, as a consequence of which the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170161,"byte_end":170236,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/ [`Rng`] extension trait is automatically implemented. Secure RNGs may","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170237,"byte_end":170310,"line_start":36,"line_end":36,"column_start":1,"column_end":74}},{"value":"/ additionally implement the [`CryptoRng`] trait.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170311,"byte_end":170362,"line_start":37,"line_end":37,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170363,"byte_end":170366,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ All PRNGs require a seed to produce their random number sequence. The","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170367,"byte_end":170440,"line_start":39,"line_end":39,"column_start":1,"column_end":74}},{"value":"/ [`SeedableRng`] trait provides three ways of constructing PRNGs:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170441,"byte_end":170509,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170510,"byte_end":170513,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ -   `from_seed` accepts a type specific to the PRNG","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170514,"byte_end":170569,"line_start":42,"line_end":42,"column_start":1,"column_end":56}},{"value":"/ -   `from_rng` allows a PRNG to be seeded from any other RNG","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170570,"byte_end":170634,"line_start":43,"line_end":43,"column_start":1,"column_end":65}},{"value":"/ -   `seed_from_u64` allows any PRNG to be seeded from a `u64` insecurely","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170635,"byte_end":170711,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ -   `from_entropy` securely seeds a PRNG from fresh entropy","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170712,"byte_end":170775,"line_start":45,"line_end":45,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170776,"byte_end":170779,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Use the [`rand_core`] crate when implementing your own RNGs.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170780,"byte_end":170844,"line_start":47,"line_end":47,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170845,"byte_end":170848,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ## Our generators","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170849,"byte_end":170870,"line_start":49,"line_end":49,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170871,"byte_end":170874,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ This crate provides several random number generators:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170875,"byte_end":170932,"line_start":51,"line_end":51,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170933,"byte_end":170936,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ -   [`OsRng`] is an interface to the operating system's random number","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":170937,"byte_end":171010,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"/     source. Typically the operating system uses a CSPRNG with entropy","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":171011,"byte_end":171084,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"/     provided by a TRNG and some type of on-going re-seeding.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":171085,"byte_end":171149,"line_start":55,"line_end":55,"column_start":1,"column_end":65}},{"value":"/ -   [`ThreadRng`], provided by the [`thread_rng`] function, is a handle to a","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":171150,"byte_end":171230,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/     thread-local CSPRNG with periodic seeding from [`OsRng`]. Because this","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":171231,"byte_end":171309,"line_start":57,"line_end":57,"column_start":1,"column_end":79}},{"value":"/     is local, it is typically much faster than [`OsRng`]. It should be","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":171310,"byte_end":171384,"line_start":58,"line_end":58,"column_start":1,"column_end":75}},{"value":"/     secure, though the paranoid may prefer [`OsRng`].","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":171385,"byte_end":171442,"line_start":59,"line_end":59,"column_start":1,"column_end":58}},{"value":"/ -   [`StdRng`] is a CSPRNG chosen for good performance and trust of security","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":171443,"byte_end":171523,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"/     (based on reviews, maturity and usage). The current algorithm is ChaCha12,","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":171524,"byte_end":171606,"line_start":61,"line_end":61,"column_start":1,"column_end":83}},{"value":"/     which is well established and rigorously analysed.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":171607,"byte_end":171665,"line_start":62,"line_end":62,"column_start":1,"column_end":59}},{"value":"/     [`StdRng`] provides the algorithm used by [`ThreadRng`] but without","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":171666,"byte_end":171741,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/     periodic reseeding.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":171742,"byte_end":171769,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"/ -   [`SmallRng`] is an **insecure** PRNG designed to be fast, simple, require","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":171770,"byte_end":171851,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"/     little memory, and have good output quality.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":171852,"byte_end":171904,"line_start":66,"line_end":66,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":171905,"byte_end":171908,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ The algorithms selected for [`StdRng`] and [`SmallRng`] may change in any","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":171909,"byte_end":171986,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/ release and may be platform-dependent, therefore they should be considered","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":171987,"byte_end":172065,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"/ **not reproducible**.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":172066,"byte_end":172091,"line_start":70,"line_end":70,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":172092,"byte_end":172095,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ ## Additional generators","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":172096,"byte_end":172124,"line_start":72,"line_end":72,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":172125,"byte_end":172128,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ **TRNGs**: The [`rdrand`] crate provides an interface to the RDRAND and","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":172129,"byte_end":172204,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"/ RDSEED instructions available in modern Intel and AMD CPUs.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":172205,"byte_end":172268,"line_start":75,"line_end":75,"column_start":1,"column_end":64}},{"value":"/ The [`rand_jitter`] crate provides a user-space implementation of","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":172269,"byte_end":172338,"line_start":76,"line_end":76,"column_start":1,"column_end":70}},{"value":"/ entropy harvesting from CPU timer jitter, but is very slow and has","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":172339,"byte_end":172409,"line_start":77,"line_end":77,"column_start":1,"column_end":71}},{"value":"/ [security issues](https://github.com/rust-random/rand/issues/699).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":172410,"byte_end":172480,"line_start":78,"line_end":78,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":172481,"byte_end":172484,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ **PRNGs**: Several companion crates are available, providing individual or","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":172485,"byte_end":172563,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/ families of PRNG algorithms. These provide the implementations behind","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":172564,"byte_end":172637,"line_start":81,"line_end":81,"column_start":1,"column_end":74}},{"value":"/ [`StdRng`] and [`SmallRng`] but can also be used directly, indeed *should*","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":172638,"byte_end":172716,"line_start":82,"line_end":82,"column_start":1,"column_end":79}},{"value":"/ be used directly when **reproducibility** matters.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":172717,"byte_end":172771,"line_start":83,"line_end":83,"column_start":1,"column_end":55}},{"value":"/ Some suggestions are: [`rand_chacha`], [`rand_pcg`], [`rand_xoshiro`].","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":172772,"byte_end":172846,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"/ A full list can be found by searching for crates with the [`rng` tag].","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":172847,"byte_end":172921,"line_start":85,"line_end":85,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":172922,"byte_end":172925,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ [`Rng`]: crate::Rng","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":172926,"byte_end":172949,"line_start":87,"line_end":87,"column_start":1,"column_end":24}},{"value":"/ [`RngCore`]: crate::RngCore","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":172950,"byte_end":172981,"line_start":88,"line_end":88,"column_start":1,"column_end":32}},{"value":"/ [`CryptoRng`]: crate::CryptoRng","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":172982,"byte_end":173017,"line_start":89,"line_end":89,"column_start":1,"column_end":36}},{"value":"/ [`SeedableRng`]: crate::SeedableRng","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":173018,"byte_end":173057,"line_start":90,"line_end":90,"column_start":1,"column_end":40}},{"value":"/ [`thread_rng`]: crate::thread_rng","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":173058,"byte_end":173095,"line_start":91,"line_end":91,"column_start":1,"column_end":38}},{"value":"/ [`rdrand`]: https://crates.io/crates/rdrand","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":173096,"byte_end":173143,"line_start":92,"line_end":92,"column_start":1,"column_end":48}},{"value":"/ [`rand_jitter`]: https://crates.io/crates/rand_jitter","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":173144,"byte_end":173201,"line_start":93,"line_end":93,"column_start":1,"column_end":58}},{"value":"/ [`rand_chacha`]: https://crates.io/crates/rand_chacha","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":173202,"byte_end":173259,"line_start":94,"line_end":94,"column_start":1,"column_end":58}},{"value":"/ [`rand_pcg`]: https://crates.io/crates/rand_pcg","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":173260,"byte_end":173311,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"/ [`rand_xoshiro`]: https://crates.io/crates/rand_xoshiro","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":173312,"byte_end":173371,"line_start":96,"line_end":96,"column_start":1,"column_end":60}},{"value":"/ [`rng` tag]: https://crates.io/keywords/rng","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":173372,"byte_end":173419,"line_start":97,"line_end":97,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":379},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adapter","qualname":"::rngs::adapter","value":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\mod.rs","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":402},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459}],"decl_id":null,"docs":" Wrappers / adapters forming RNGs\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":173469,"byte_end":173492,"line_start":100,"line_end":100,"column_start":1,"column_end":24}},{"value":"/ Wrappers / adapters forming RNGs","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\mod.rs","byte_start":174648,"byte_end":174684,"line_start":9,"line_end":9,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1870},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":176277,"byte_end":176284,"line_start":47,"line_end":47,"column_start":12,"column_end":19},"name":"ReadRng","qualname":"::rngs::adapter::read::ReadRng","value":"ReadRng {  }","parent":null,"children":[{"krate":0,"index":1872}],"decl_id":null,"docs":" An RNG that reads random bytes straight from any type supporting\n [`std::io::Read`], for example files.","sig":null,"attributes":[{"value":"/ An RNG that reads random bytes straight from any type supporting","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":175327,"byte_end":175395,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/ [`std::io::Read`], for example files.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":175396,"byte_end":175437,"line_start":19,"line_end":19,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":175438,"byte_end":175441,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This will work best with an infinite reader, but that is not required.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":175442,"byte_end":175516,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":175517,"byte_end":175520,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This can be used with `/dev/urandom` on Unix but it is recommended to use","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":175521,"byte_end":175598,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ [`OsRng`] instead.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":175599,"byte_end":175621,"line_start":24,"line_end":24,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":175622,"byte_end":175625,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":175626,"byte_end":175638,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":175639,"byte_end":175642,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ `ReadRng` uses [`std::io::Read::read_exact`], which retries on interrupts.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":175643,"byte_end":175721,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/ All other errors from the underlying reader, including when it does not","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":175722,"byte_end":175797,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ have enough data, will only be reported through [`try_fill_bytes`].","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":175798,"byte_end":175869,"line_start":30,"line_end":30,"column_start":1,"column_end":72}},{"value":"/ The other [`RngCore`] methods will panic in case of an error.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":175870,"byte_end":175935,"line_start":31,"line_end":31,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":175936,"byte_end":175939,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":175940,"byte_end":175953,"line_start":33,"line_end":33,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":175954,"byte_end":175957,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":175958,"byte_end":175965,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":175966,"byte_end":175984,"line_start":36,"line_end":36,"column_start":1,"column_end":19}},{"value":"/ use rand::rngs::adapter::ReadRng;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":175985,"byte_end":176022,"line_start":37,"line_end":37,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":176023,"byte_end":176026,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let data = vec![1, 2, 3, 4, 5, 6, 7, 8];","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":176027,"byte_end":176071,"line_start":39,"line_end":39,"column_start":1,"column_end":45}},{"value":"/ let mut rng = ReadRng::new(&data[..]);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":176072,"byte_end":176114,"line_start":40,"line_end":40,"column_start":1,"column_end":43}},{"value":"/ println!(\"{:x}\", rng.gen::<u32>());","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":176115,"byte_end":176154,"line_start":41,"line_end":41,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":176155,"byte_end":176162,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":176163,"byte_end":176166,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ [`OsRng`]: crate::rngs::OsRng","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":176167,"byte_end":176200,"line_start":44,"line_end":44,"column_start":1,"column_end":34}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":176201,"byte_end":176248,"line_start":45,"line_end":45,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":176392,"byte_end":176395,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"new","qualname":"<ReadRng<R>>::new","value":"pub fn new(R) -> ReadRng<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReadRng` from a `Read`.\n","sig":null,"attributes":[{"value":"/ Create a new `ReadRng` from a `Read`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":176339,"byte_end":176380,"line_start":52,"line_end":52,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1876},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":177304,"byte_end":177313,"line_start":89,"line_end":89,"column_start":12,"column_end":21},"name":"ReadError","qualname":"::rngs::adapter::read::ReadError","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ReadRng` error type\n","sig":null,"attributes":[{"value":"/ `ReadRng` error type","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":177251,"byte_end":177275,"line_start":87,"line_end":87,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1881},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":182263,"byte_end":182275,"line_start":79,"line_end":79,"column_start":12,"column_end":24},"name":"ReseedingRng","qualname":"::rngs::adapter::reseeding::ReseedingRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around any PRNG that implements [`BlockRngCore`], that adds the\n ability to reseed it.","sig":null,"attributes":[{"value":"/ A wrapper around any PRNG that implements [`BlockRngCore`], that adds the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":179662,"byte_end":179739,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ ability to reseed it.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":179740,"byte_end":179765,"line_start":19,"line_end":19,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":179766,"byte_end":179769,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ `ReseedingRng` reseeds the underlying PRNG in the following cases:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":179770,"byte_end":179840,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":179841,"byte_end":179844,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - On a manual call to [`reseed()`].","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":179845,"byte_end":179884,"line_start":23,"line_end":23,"column_start":1,"column_end":40}},{"value":"/ - After `clone()`, the clone will be reseeded on first use.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":179885,"byte_end":179948,"line_start":24,"line_end":24,"column_start":1,"column_end":64}},{"value":"/ - After a process is forked, the RNG in the child process is reseeded within","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":179949,"byte_end":180029,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/   the next few generated values, depending on the block size of the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":180030,"byte_end":180101,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/   underlying PRNG. For ChaCha and Hc128 this is a maximum of","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":180102,"byte_end":180166,"line_start":27,"line_end":27,"column_start":1,"column_end":65}},{"value":"/   15 `u32` values before reseeding.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":180167,"byte_end":180206,"line_start":28,"line_end":28,"column_start":1,"column_end":40}},{"value":"/ - After the PRNG has generated a configurable number of random bytes.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":180207,"byte_end":180280,"line_start":29,"line_end":29,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":180281,"byte_end":180284,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # When should reseeding after a fixed number of generated bytes be used?","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":180285,"byte_end":180361,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":180362,"byte_end":180365,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Reseeding after a fixed number of generated bytes is never strictly","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":180366,"byte_end":180437,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/ *necessary*. Cryptographic PRNGs don't have a limited number of bytes they","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":180438,"byte_end":180516,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ can output, or at least not a limit reachable in any practical way. There is","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":180517,"byte_end":180597,"line_start":35,"line_end":35,"column_start":1,"column_end":81}},{"value":"/ no such thing as 'running out of entropy'.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":180598,"byte_end":180644,"line_start":36,"line_end":36,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":180645,"byte_end":180648,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Occasionally reseeding can be seen as some form of 'security in depth'. Even","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":180649,"byte_end":180729,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"/ if in the future a cryptographic weakness is found in the CSPRNG being used,","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":180730,"byte_end":180810,"line_start":39,"line_end":39,"column_start":1,"column_end":81}},{"value":"/ or a flaw in the implementation, occasionally reseeding should make","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":180811,"byte_end":180882,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/ exploiting it much more difficult or even impossible.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":180883,"byte_end":180940,"line_start":41,"line_end":41,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":180941,"byte_end":180944,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Use [`ReseedingRng::new`] with a `threshold` of `0` to disable reseeding","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":180945,"byte_end":181021,"line_start":43,"line_end":43,"column_start":1,"column_end":77}},{"value":"/ after a fixed number of generated bytes.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181022,"byte_end":181066,"line_start":44,"line_end":44,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181067,"byte_end":181070,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Error handling","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181071,"byte_end":181091,"line_start":46,"line_end":46,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181092,"byte_end":181095,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Although unlikely, reseeding the wrapped PRNG can fail. `ReseedingRng` will","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181096,"byte_end":181175,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ never panic but try to handle the error intelligently through some","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181176,"byte_end":181246,"line_start":49,"line_end":49,"column_start":1,"column_end":71}},{"value":"/ combination of retrying and delaying reseeding until later.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181247,"byte_end":181310,"line_start":50,"line_end":50,"column_start":1,"column_end":64}},{"value":"/ If handling the source error fails `ReseedingRng` will continue generating","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181311,"byte_end":181389,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ data from the wrapped PRNG without reseeding.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181390,"byte_end":181439,"line_start":52,"line_end":52,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181440,"byte_end":181443,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ Manually calling [`reseed()`] will not have this retry or delay logic, but","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181444,"byte_end":181522,"line_start":54,"line_end":54,"column_start":1,"column_end":79}},{"value":"/ reports the error.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181523,"byte_end":181545,"line_start":55,"line_end":55,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181546,"byte_end":181549,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181550,"byte_end":181563,"line_start":57,"line_end":57,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181564,"byte_end":181567,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181568,"byte_end":181575,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181576,"byte_end":181601,"line_start":60,"line_end":60,"column_start":1,"column_end":26}},{"value":"/ use rand_chacha::ChaCha20Core; // Internal part of ChaChaRng that","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181602,"byte_end":181671,"line_start":61,"line_end":61,"column_start":1,"column_end":70}},{"value":"/                              // implements BlockRngCore","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181672,"byte_end":181731,"line_start":62,"line_end":62,"column_start":1,"column_end":60}},{"value":"/ use rand::rngs::OsRng;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181732,"byte_end":181758,"line_start":63,"line_end":63,"column_start":1,"column_end":27}},{"value":"/ use rand::rngs::adapter::ReseedingRng;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181759,"byte_end":181801,"line_start":64,"line_end":64,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181802,"byte_end":181805,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ let prng = ChaCha20Core::from_entropy();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181806,"byte_end":181850,"line_start":66,"line_end":66,"column_start":1,"column_end":45}},{"value":"/ let mut reseeding_rng = ReseedingRng::new(prng, 0, OsRng);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181851,"byte_end":181913,"line_start":67,"line_end":67,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181914,"byte_end":181917,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", reseeding_rng.gen::<u64>());","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181918,"byte_end":181965,"line_start":69,"line_end":69,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181966,"byte_end":181969,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ let mut cloned_rng = reseeding_rng.clone();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":181970,"byte_end":182017,"line_start":71,"line_end":71,"column_start":1,"column_end":48}},{"value":"/ assert!(reseeding_rng.gen::<u64>() != cloned_rng.gen::<u64>());","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":182018,"byte_end":182085,"line_start":72,"line_end":72,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":182086,"byte_end":182093,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":182094,"byte_end":182097,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ [`BlockRngCore`]: rand_core::block::BlockRngCore","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":182098,"byte_end":182150,"line_start":75,"line_end":75,"column_start":1,"column_end":53}},{"value":"/ [`ReseedingRng::new`]: ReseedingRng::new","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":182151,"byte_end":182195,"line_start":76,"line_end":76,"column_start":1,"column_end":45}},{"value":"/ [`reseed()`]: ReseedingRng::reseed","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":182196,"byte_end":182234,"line_start":77,"line_end":77,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":415},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":182779,"byte_end":182782,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"new","qualname":"<ReseedingRng<R, Rsdr>>::new","value":"pub fn new(R, u64, Rsdr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReseedingRng` from an existing PRNG, combined with a RNG\n to use as reseeder.","sig":null,"attributes":[{"value":"/ Create a new `ReseedingRng` from an existing PRNG, combined with a RNG","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":182482,"byte_end":182556,"line_start":89,"line_end":89,"column_start":5,"column_end":79}},{"value":"/ to use as reseeder.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":182561,"byte_end":182584,"line_start":90,"line_end":90,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":182589,"byte_end":182592,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ `threshold` sets the number of generated bytes after which to reseed the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":182597,"byte_end":182673,"line_start":92,"line_end":92,"column_start":5,"column_end":81}},{"value":"/ PRNG. Set it to zero to never reseed based on the number of generated","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":182678,"byte_end":182751,"line_start":93,"line_end":93,"column_start":5,"column_end":78}},{"value":"/ values.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":182756,"byte_end":182767,"line_start":94,"line_end":94,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":182967,"byte_end":182973,"line_start":100,"line_end":100,"column_start":12,"column_end":18},"name":"reseed","qualname":"<ReseedingRng<R, Rsdr>>::reseed","value":"pub fn reseed(&mut Self) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Reseed the internal PRNG.\n","sig":null,"attributes":[{"value":"/ Reseed the internal PRNG.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":182926,"byte_end":182955,"line_start":99,"line_end":99,"column_start":5,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mock","qualname":"::rngs::mock","value":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","parent":null,"children":[{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":1902},{"krate":0,"index":1914},{"krate":0,"index":1912},{"krate":0,"index":1908},{"krate":0,"index":1909},{"krate":0,"index":1905},{"krate":0,"index":1906},{"krate":0,"index":465},{"krate":0,"index":467}],"decl_id":null,"docs":" Mock random number generator\n","sig":null,"attributes":[{"value":"/ Mock random number generator","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":191520,"byte_end":191552,"line_start":9,"line_end":9,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1902},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":192222,"byte_end":192229,"line_start":32,"line_end":32,"column_start":12,"column_end":19},"name":"StepRng","qualname":"::rngs::mock::StepRng","value":"StepRng {  }","parent":null,"children":[{"krate":0,"index":1903},{"krate":0,"index":1904}],"decl_id":null,"docs":" A simple implementation of `RngCore` for testing purposes.","sig":null,"attributes":[{"value":"/ A simple implementation of `RngCore` for testing purposes.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":191660,"byte_end":191722,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":191723,"byte_end":191726,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This generates an arithmetic sequence (i.e. adds a constant each step)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":191727,"byte_end":191801,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ over a `u64` number, using wrapping arithmetic. If the increment is 0","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":191802,"byte_end":191875,"line_start":19,"line_end":19,"column_start":1,"column_end":74}},{"value":"/ the generator yields a constant.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":191876,"byte_end":191912,"line_start":20,"line_end":20,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":191913,"byte_end":191916,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":191917,"byte_end":191924,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":191925,"byte_end":191943,"line_start":23,"line_end":23,"column_start":1,"column_end":19}},{"value":"/ use rand::rngs::mock::StepRng;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":191944,"byte_end":191978,"line_start":24,"line_end":24,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":191979,"byte_end":191982,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ let mut my_rng = StepRng::new(2, 1);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":191983,"byte_end":192023,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/ let sample: [u64; 3] = my_rng.gen();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":192024,"byte_end":192064,"line_start":27,"line_end":27,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(sample, [2, 3, 4]);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":192065,"byte_end":192099,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":192100,"byte_end":192107,"line_start":29,"line_end":29,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":192419,"byte_end":192422,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"new","qualname":"<StepRng>::new","value":"pub fn new(u64, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `StepRng`, yielding an arithmetic sequence starting with\n `initial` and incremented by `increment` each time.\n","sig":null,"attributes":[{"value":"/ Create a `StepRng`, yielding an arithmetic sequence starting with","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":192278,"byte_end":192347,"line_start":38,"line_end":38,"column_start":5,"column_end":74}},{"value":"/ `initial` and incremented by `increment` each time.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":192352,"byte_end":192407,"line_start":39,"line_end":39,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1916},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","byte_start":195082,"byte_end":195088,"line_start":37,"line_end":37,"column_start":12,"column_end":18},"name":"StdRng","qualname":"::rngs::std::StdRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient\n on the current platform, to be statistically strong and unpredictable\n (meaning a cryptographically secure PRNG).","sig":null,"attributes":[{"value":"/ The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","byte_start":194276,"byte_end":194354,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ on the current platform, to be statistically strong and unpredictable","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","byte_start":194355,"byte_end":194428,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/ (meaning a cryptographically secure PRNG).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","byte_start":194429,"byte_end":194475,"line_start":23,"line_end":23,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","byte_start":194476,"byte_end":194479,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The current algorithm used is the ChaCha block cipher with 20 rounds.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","byte_start":194480,"byte_end":194553,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"/ This may change as new evidence of cipher security and performance","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","byte_start":194554,"byte_end":194624,"line_start":26,"line_end":26,"column_start":1,"column_end":71}},{"value":"/ becomes available.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","byte_start":194625,"byte_end":194647,"line_start":27,"line_end":27,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","byte_start":194648,"byte_end":194651,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ The algorithm is deterministic but should not be considered reproducible","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","byte_start":194652,"byte_end":194728,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ due to dependence on configuration and possible replacement in future","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","byte_start":194729,"byte_end":194802,"line_start":30,"line_end":30,"column_start":1,"column_end":74}},{"value":"/ library versions. For a secure reproducible generator, we recommend use of","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","byte_start":194803,"byte_end":194881,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ the [rand_chacha] crate directly.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","byte_start":194882,"byte_end":194919,"line_start":32,"line_end":32,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","byte_start":194920,"byte_end":194923,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ [rand_chacha]: https://crates.io/crates/rand_chacha","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","byte_start":194924,"byte_end":194979,"line_start":34,"line_end":34,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1930},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":199350,"byte_end":199359,"line_start":61,"line_end":61,"column_start":12,"column_end":21},"name":"ThreadRng","qualname":"::rngs::thread::ThreadRng","value":"ThreadRng {  }","parent":null,"children":[{"krate":0,"index":1931}],"decl_id":null,"docs":" A reference to the thread-local generator","sig":null,"attributes":[{"value":"/ A reference to the thread-local generator","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":198267,"byte_end":198312,"line_start":40,"line_end":40,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":198313,"byte_end":198316,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ An instance can be obtained via [`thread_rng`] or via `ThreadRng::default()`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":198317,"byte_end":198398,"line_start":42,"line_end":42,"column_start":1,"column_end":82}},{"value":"/ This handle is safe to use everywhere (including thread-local destructors)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":198399,"byte_end":198477,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ but cannot be passed between threads (is not `Send` or `Sync`).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":198478,"byte_end":198545,"line_start":44,"line_end":44,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":198546,"byte_end":198549,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ `ThreadRng` uses the same PRNG as [`StdRng`] for security and performance","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":198550,"byte_end":198627,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"/ and is automatically seeded from [`OsRng`].","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":198628,"byte_end":198675,"line_start":47,"line_end":47,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":198676,"byte_end":198679,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Unlike `StdRng`, `ThreadRng` uses the  [`ReseedingRng`] wrapper to reseed","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":198680,"byte_end":198757,"line_start":49,"line_end":49,"column_start":1,"column_end":78}},{"value":"/ the PRNG from fresh entropy every 64 kiB of random data as well as after a","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":198758,"byte_end":198836,"line_start":50,"line_end":50,"column_start":1,"column_end":79}},{"value":"/ fork on Unix (though not quite immediately; see documentation of","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":198837,"byte_end":198905,"line_start":51,"line_end":51,"column_start":1,"column_end":69}},{"value":"/ [`ReseedingRng`]).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":198906,"byte_end":198928,"line_start":52,"line_end":52,"column_start":1,"column_end":23}},{"value":"/ Note that the reseeding is done as an extra precaution against side-channel","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":198929,"byte_end":199008,"line_start":53,"line_end":53,"column_start":1,"column_end":80}},{"value":"/ attacks and mis-use (e.g. if somehow weak entropy were supplied initially).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":199009,"byte_end":199088,"line_start":54,"line_end":54,"column_start":1,"column_end":80}},{"value":"/ The PRNG algorithms used are assumed to be secure.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":199089,"byte_end":199143,"line_start":55,"line_end":55,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":199144,"byte_end":199147,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ [`ReseedingRng`]: crate::rngs::adapter::ReseedingRng","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":199148,"byte_end":199204,"line_start":57,"line_end":57,"column_start":1,"column_end":57}},{"value":"/ [`StdRng`]: crate::rngs::StdRng","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":199205,"byte_end":199240,"line_start":58,"line_end":58,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":200445,"byte_end":200455,"line_start":87,"line_end":87,"column_start":8,"column_end":18},"name":"thread_rng","qualname":"::rngs::thread::thread_rng","value":"pub fn thread_rng() -> ThreadRng","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the lazily-initialized thread-local random number generator,\n seeded by the system. Intended to be used in method chaining style,\n e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g.\n `let mut rng = thread_rng();`.  Invoked by the `Default` trait, making\n `ThreadRng::default()` equivalent.","sig":null,"attributes":[{"value":"/ Retrieve the lazily-initialized thread-local random number generator,","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":199994,"byte_end":200067,"line_start":79,"line_end":79,"column_start":1,"column_end":74}},{"value":"/ seeded by the system. Intended to be used in method chaining style,","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":200068,"byte_end":200139,"line_start":80,"line_end":80,"column_start":1,"column_end":72}},{"value":"/ e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":200140,"byte_end":200201,"line_start":81,"line_end":81,"column_start":1,"column_end":62}},{"value":"/ `let mut rng = thread_rng();`.  Invoked by the `Default` trait, making","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":200202,"byte_end":200276,"line_start":82,"line_end":82,"column_start":1,"column_end":75}},{"value":"/ `ThreadRng::default()` equivalent.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":200277,"byte_end":200315,"line_start":83,"line_end":83,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":200316,"byte_end":200319,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ For more information see [`ThreadRng`].","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":200320,"byte_end":200363,"line_start":85,"line_end":85,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":517},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"seq","qualname":"::seq","value":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","parent":null,"children":[{"krate":0,"index":518},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":654},{"krate":0,"index":664},{"krate":0,"index":700},{"krate":0,"index":1974},{"krate":0,"index":1981},{"krate":0,"index":702},{"krate":0,"index":710},{"krate":0,"index":715}],"decl_id":null,"docs":" Sequence-related functionality","sig":null,"attributes":[{"value":"/ Sequence-related functionality","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":202340,"byte_end":202374,"line_start":9,"line_end":9,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":202375,"byte_end":202378,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This module provides:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":202379,"byte_end":202404,"line_start":11,"line_end":11,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":202405,"byte_end":202408,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ *   [`SliceRandom`] slice sampling and mutation","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":202409,"byte_end":202460,"line_start":13,"line_end":13,"column_start":1,"column_end":52}},{"value":"/ *   [`IteratorRandom`] iterator sampling","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":202461,"byte_end":202505,"line_start":14,"line_end":14,"column_start":1,"column_end":45}},{"value":"/ *   [`index::sample`] low-level API to choose multiple indices from","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":202506,"byte_end":202577,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/     `0..length`","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":202578,"byte_end":202597,"line_start":16,"line_end":16,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":202598,"byte_end":202601,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Also see:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":202602,"byte_end":202615,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":202616,"byte_end":202619,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ *   [`crate::distributions::WeightedIndex`] distribution which provides","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":202620,"byte_end":202695,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/     weighted index sampling.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":202696,"byte_end":202728,"line_start":21,"line_end":21,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":202729,"byte_end":202732,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ In order to make results reproducible across 32-64 bit architectures, all","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":202733,"byte_end":202810,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ `usize` indices are sampled as a `u32` where possible (also providing a","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":202811,"byte_end":202886,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/ small performance boost in some cases).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":202887,"byte_end":202930,"line_start":25,"line_end":25,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"index","qualname":"::seq::index","value":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","parent":null,"children":[{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":1941},{"krate":0,"index":1950},{"krate":0,"index":1948},{"krate":0,"index":530},{"krate":0,"index":537},{"krate":0,"index":541},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":1952},{"krate":0,"index":1960},{"krate":0,"index":550},{"krate":0,"index":557},{"krate":0,"index":1963},{"krate":0,"index":1972},{"krate":0,"index":1970},{"krate":0,"index":559},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":574},{"krate":0,"index":578},{"krate":0,"index":599},{"krate":0,"index":602},{"krate":0,"index":604},{"krate":0,"index":608},{"krate":0,"index":612},{"krate":0,"index":616}],"decl_id":null,"docs":" Low-level API for sampling indices\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":202933,"byte_end":202958,"line_start":28,"line_end":28,"column_start":1,"column_end":26}},{"value":"/ Low-level API for sampling indices","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":248477,"byte_end":248515,"line_start":9,"line_end":9,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1942},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":249231,"byte_end":249234,"line_start":33,"line_end":33,"column_start":5,"column_end":8},"name":"U32","qualname":"::seq::index::IndexVec::U32","value":"IndexVec::U32(Vec<u32>)","parent":{"krate":0,"index":1941},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1945},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":249269,"byte_end":249274,"line_start":35,"line_end":35,"column_start":5,"column_end":10},"name":"USize","qualname":"::seq::index::IndexVec::USize","value":"IndexVec::USize(Vec<usize>)","parent":{"krate":0,"index":1941},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1941},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":249197,"byte_end":249205,"line_start":31,"line_end":31,"column_start":10,"column_end":18},"name":"IndexVec","qualname":"::seq::index::IndexVec","value":"pub enum IndexVec {\n\n    #[doc(hidden)]\n    U32(Vec<u32>),\n\n    #[doc(hidden)]\n    USize(Vec<usize>),\n}","parent":null,"children":[{"krate":0,"index":1942},{"krate":0,"index":1945}],"decl_id":null,"docs":" A vector of indices.","sig":null,"attributes":[{"value":"/ A vector of indices.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":249019,"byte_end":249043,"line_start":26,"line_end":26,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":249044,"byte_end":249047,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Multiple internal representations are possible.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":249048,"byte_end":249099,"line_start":28,"line_end":28,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":249370,"byte_end":249373,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexVec>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of indices\n","sig":null,"attributes":[{"value":"/ Returns the number of indices","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":249311,"byte_end":249344,"line_start":39,"line_end":39,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":249349,"byte_end":249358,"line_start":40,"line_end":40,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":249591,"byte_end":249599,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexVec>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the length is 0.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the length is 0.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":249527,"byte_end":249565,"line_start":48,"line_end":48,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":249570,"byte_end":249579,"line_start":49,"line_end":49,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":249936,"byte_end":249941,"line_start":62,"line_end":62,"column_start":12,"column_end":17},"name":"index","qualname":"<IndexVec>::index","value":"pub fn index(&Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the value at the given `index`.","sig":null,"attributes":[{"value":"/ Return the value at the given `index`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":249762,"byte_end":249804,"line_start":57,"line_end":57,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":249809,"byte_end":249812,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ (Note: we cannot implement [`std::ops::Index`] because of lifetime","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":249817,"byte_end":249887,"line_start":59,"line_end":59,"column_start":5,"column_end":75}},{"value":"/ restrictions.)","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":249892,"byte_end":249910,"line_start":60,"line_end":60,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":249915,"byte_end":249924,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":250220,"byte_end":250228,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<IndexVec>::into_vec","value":"pub fn into_vec(Self) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return result as a `Vec<usize>`. Conversion may or may not be trivial.\n","sig":null,"attributes":[{"value":"/ Return result as a `Vec<usize>`. Conversion may or may not be trivial.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":250120,"byte_end":250194,"line_start":69,"line_end":69,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":250199,"byte_end":250208,"line_start":70,"line_end":70,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":250493,"byte_end":250497,"line_start":80,"line_end":80,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexVec>::iter","value":"pub fn iter(&Self) -> IndexVecIter","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the indices as a sequence of `usize` values\n","sig":null,"attributes":[{"value":"/ Iterate over the indices as a sequence of `usize` values","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":250407,"byte_end":250467,"line_start":78,"line_end":78,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":250472,"byte_end":250481,"line_start":79,"line_end":79,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1954},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":252062,"byte_end":252065,"line_start":136,"line_end":136,"column_start":5,"column_end":8},"name":"U32","qualname":"::seq::index::IndexVecIter::U32","value":"IndexVecIter::U32(slice::Iter)","parent":{"krate":0,"index":1952},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1957},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":252112,"byte_end":252117,"line_start":138,"line_end":138,"column_start":5,"column_end":10},"name":"USize","qualname":"::seq::index::IndexVecIter::USize","value":"IndexVecIter::USize(slice::Iter)","parent":{"krate":0,"index":1952},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1952},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":252020,"byte_end":252032,"line_start":134,"line_end":134,"column_start":10,"column_end":22},"name":"IndexVecIter","qualname":"::seq::index::IndexVecIter","value":"pub enum IndexVecIter<'a> {\n\n    #[doc(hidden)]\n    U32(slice::Iter),\n\n    #[doc(hidden)]\n    USize(slice::Iter),\n}","parent":null,"children":[{"krate":0,"index":1954},{"krate":0,"index":1957}],"decl_id":null,"docs":" Return type of `IndexVec::iter`.\n","sig":null,"attributes":[{"value":"/ Return type of `IndexVec::iter`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":251957,"byte_end":251993,"line_start":132,"line_end":132,"column_start":1,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1964},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":252853,"byte_end":252856,"line_start":168,"line_end":168,"column_start":5,"column_end":8},"name":"U32","qualname":"::seq::index::IndexVecIntoIter::U32","value":"IndexVecIntoIter::U32(vec::IntoIter<u32>)","parent":{"krate":0,"index":1963},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1967},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":252901,"byte_end":252906,"line_start":170,"line_end":170,"column_start":5,"column_end":10},"name":"USize","qualname":"::seq::index::IndexVecIntoIter::USize","value":"IndexVecIntoIter::USize(vec::IntoIter<usize>)","parent":{"krate":0,"index":1963},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1963},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":252811,"byte_end":252827,"line_start":166,"line_end":166,"column_start":10,"column_end":26},"name":"IndexVecIntoIter","qualname":"::seq::index::IndexVecIntoIter","value":"pub enum IndexVecIntoIter {\n\n    #[doc(hidden)]\n    U32(vec::IntoIter<u32>),\n\n    #[doc(hidden)]\n    USize(vec::IntoIter<usize>),\n}","parent":null,"children":[{"krate":0,"index":1964},{"krate":0,"index":1967}],"decl_id":null,"docs":" Return type of `IndexVec::into_iter`.\n","sig":null,"attributes":[{"value":"/ Return type of `IndexVec::into_iter`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":252736,"byte_end":252777,"line_start":164,"line_end":164,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":254582,"byte_end":254588,"line_start":220,"line_end":220,"column_start":8,"column_end":14},"name":"sample","qualname":"::seq::index::sample","value":"pub fn sample<R: ?Sized>(&mut R, usize, usize) -> IndexVec where R: Rng","parent":null,"children":[],"decl_id":null,"docs":" Randomly sample exactly `amount` distinct indices from `0..length`, and\n return them in random order (fully shuffled).","sig":null,"attributes":[{"value":"/ Randomly sample exactly `amount` distinct indices from `0..length`, and","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":253514,"byte_end":253589,"line_start":198,"line_end":198,"column_start":1,"column_end":76}},{"value":"/ return them in random order (fully shuffled).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":253590,"byte_end":253639,"line_start":199,"line_end":199,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":253640,"byte_end":253643,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ This method is used internally by the slice sampling methods, but it can","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":253644,"byte_end":253720,"line_start":201,"line_end":201,"column_start":1,"column_end":77}},{"value":"/ sometimes be useful to have the indices themselves so this is provided as","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":253721,"byte_end":253798,"line_start":202,"line_end":202,"column_start":1,"column_end":78}},{"value":"/ an alternative.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":253799,"byte_end":253818,"line_start":203,"line_end":203,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":253819,"byte_end":253822,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ The implementation used is not specified; we automatically select the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":253823,"byte_end":253896,"line_start":205,"line_end":205,"column_start":1,"column_end":74}},{"value":"/ fastest available algorithm for the `length` and `amount` parameters","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":253897,"byte_end":253969,"line_start":206,"line_end":206,"column_start":1,"column_end":73}},{"value":"/ (based on detailed profiling on an Intel Haswell CPU). Roughly speaking,","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":253970,"byte_end":254046,"line_start":207,"line_end":207,"column_start":1,"column_end":77}},{"value":"/ complexity is `O(amount)`, except that when `amount` is small, performance","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":254047,"byte_end":254125,"line_start":208,"line_end":208,"column_start":1,"column_end":79}},{"value":"/ is closer to `O(amount^2)`, and when `length` is close to `amount` then","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":254126,"byte_end":254201,"line_start":209,"line_end":209,"column_start":1,"column_end":76}},{"value":"/ `O(length)`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":254202,"byte_end":254218,"line_start":210,"line_end":210,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":254219,"byte_end":254222,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ Note that performance is significantly better over `u32` indices than over","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":254223,"byte_end":254301,"line_start":212,"line_end":212,"column_start":1,"column_end":79}},{"value":"/ `u64` indices. Because of this we hide the underlying type behind an","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":254302,"byte_end":254374,"line_start":213,"line_end":213,"column_start":1,"column_end":73}},{"value":"/ abstraction, `IndexVec`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":254375,"byte_end":254403,"line_start":214,"line_end":214,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":254404,"byte_end":254407,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ If an allocation-free `no_std` function is required, it is suggested","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":254408,"byte_end":254480,"line_start":216,"line_end":216,"column_start":1,"column_end":73}},{"value":"/ to adapt the internal `sample_floyd` implementation.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":254481,"byte_end":254537,"line_start":217,"line_end":217,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":254538,"byte_end":254541,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ Panics if `amount > length`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":254542,"byte_end":254574,"line_start":219,"line_end":219,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":574},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":256765,"byte_end":256780,"line_start":273,"line_end":273,"column_start":8,"column_end":23},"name":"sample_weighted","qualname":"::seq::index::sample_weighted","value":"pub fn sample_weighted<R: ?Sized, F, X>(&mut R, usize, F, usize)\n-> Result<IndexVec, WeightedError> where R: Rng, F: Fn(usize) -> X,\nX: Into<f64>","parent":null,"children":[],"decl_id":null,"docs":" Randomly sample exactly `amount` distinct indices from `0..length`, and\n return them in an arbitrary order (there is no guarantee of shuffling or\n ordering). The weights are to be provided by the input function `weights`,\n which will be called once for each index.","sig":null,"attributes":[{"value":"/ Randomly sample exactly `amount` distinct indices from `0..length`, and","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":256063,"byte_end":256138,"line_start":259,"line_end":259,"column_start":1,"column_end":76}},{"value":"/ return them in an arbitrary order (there is no guarantee of shuffling or","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":256139,"byte_end":256215,"line_start":260,"line_end":260,"column_start":1,"column_end":77}},{"value":"/ ordering). The weights are to be provided by the input function `weights`,","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":256216,"byte_end":256294,"line_start":261,"line_end":261,"column_start":1,"column_end":79}},{"value":"/ which will be called once for each index.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":256295,"byte_end":256340,"line_start":262,"line_end":262,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":256341,"byte_end":256344,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ This method is used internally by the slice sampling methods, but it can","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":256345,"byte_end":256421,"line_start":264,"line_end":264,"column_start":1,"column_end":77}},{"value":"/ sometimes be useful to have the indices themselves so this is provided as","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":256422,"byte_end":256499,"line_start":265,"line_end":265,"column_start":1,"column_end":78}},{"value":"/ an alternative.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":256500,"byte_end":256519,"line_start":266,"line_end":266,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":256520,"byte_end":256523,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ This implementation uses `O(length + amount)` space and `O(length)` time","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":256524,"byte_end":256600,"line_start":268,"line_end":268,"column_start":1,"column_end":77}},{"value":"/ if the \"nightly\" feature is enabled, or `O(length)` space and","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":256601,"byte_end":256666,"line_start":269,"line_end":269,"column_start":1,"column_end":66}},{"value":"/ `O(length + amount * log length)` time otherwise.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":256667,"byte_end":256720,"line_start":270,"line_end":270,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":256721,"byte_end":256724,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ Panics if `amount > length`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":256725,"byte_end":256757,"line_start":272,"line_end":272,"column_start":1,"column_end":33}}]},{"kind":"Trait","id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203880,"byte_end":203891,"line_start":59,"line_end":59,"column_start":11,"column_end":22},"name":"SliceRandom","qualname":"::seq::SliceRandom","value":"SliceRandom","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":630},{"krate":0,"index":632},{"krate":0,"index":634},{"krate":0,"index":640},{"krate":0,"index":646},{"krate":0,"index":650},{"krate":0,"index":652}],"decl_id":null,"docs":" Extension trait on slices, providing random mutation and sampling methods.","sig":null,"attributes":[{"value":"/ Extension trait on slices, providing random mutation and sampling methods.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203298,"byte_end":203376,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203377,"byte_end":203380,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented on all `[T]` slice types, providing several","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203381,"byte_end":203454,"line_start":43,"line_end":43,"column_start":1,"column_end":74}},{"value":"/ methods for choosing and shuffling elements. You must `use` this trait:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203455,"byte_end":203530,"line_start":44,"line_end":44,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203531,"byte_end":203534,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203535,"byte_end":203542,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203543,"byte_end":203574,"line_start":47,"line_end":47,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203575,"byte_end":203578,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203579,"byte_end":203616,"line_start":49,"line_end":49,"column_start":1,"column_end":38}},{"value":"/ let mut bytes = \"Hello, random!\".to_string().into_bytes();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203617,"byte_end":203679,"line_start":50,"line_end":50,"column_start":1,"column_end":63}},{"value":"/ bytes.shuffle(&mut rng);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203680,"byte_end":203708,"line_start":51,"line_end":51,"column_start":1,"column_end":29}},{"value":"/ let str = String::from_utf8(bytes).unwrap();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203709,"byte_end":203757,"line_start":52,"line_end":52,"column_start":1,"column_end":49}},{"value":"/ println!(\"{}\", str);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203758,"byte_end":203782,"line_start":53,"line_end":53,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203783,"byte_end":203790,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ Example output (non-deterministic):","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203791,"byte_end":203830,"line_start":55,"line_end":55,"column_start":1,"column_end":40}},{"value":"/ ```none","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203831,"byte_end":203842,"line_start":56,"line_end":56,"column_start":1,"column_end":12}},{"value":"/ l,nmroHado !le","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203843,"byte_end":203861,"line_start":57,"line_end":57,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203862,"byte_end":203869,"line_start":58,"line_end":58,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":627},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203929,"byte_end":203933,"line_start":61,"line_end":61,"column_start":10,"column_end":14},"name":"Item","qualname":"::seq::SliceRandom::Item","value":"type Item;","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" The element type.\n","sig":null,"attributes":[{"value":"/ The element type.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203898,"byte_end":203919,"line_start":60,"line_end":60,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204419,"byte_end":204425,"line_start":79,"line_end":79,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::SliceRandom::choose","value":"pub fn choose<R: ?Sized>(&Self, &mut R) -> Option<&Self::Item> where R: Rng","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns a reference to one random element of the slice, or `None` if the\n slice is empty.","sig":null,"attributes":[{"value":"/ Returns a reference to one random element of the slice, or `None` if the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203940,"byte_end":204016,"line_start":63,"line_end":63,"column_start":5,"column_end":81}},{"value":"/ slice is empty.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204021,"byte_end":204040,"line_start":64,"line_end":64,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204045,"byte_end":204048,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(1)`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204053,"byte_end":204090,"line_start":66,"line_end":66,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204095,"byte_end":204098,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204103,"byte_end":204116,"line_start":68,"line_end":68,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204121,"byte_end":204124,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204129,"byte_end":204136,"line_start":70,"line_end":70,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204141,"byte_end":204166,"line_start":71,"line_end":71,"column_start":5,"column_end":30}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204171,"byte_end":204202,"line_start":72,"line_end":72,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204207,"byte_end":204210,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ let choices = [1, 2, 4, 8, 16, 32];","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204215,"byte_end":204254,"line_start":74,"line_end":74,"column_start":5,"column_end":44}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204259,"byte_end":204290,"line_start":75,"line_end":75,"column_start":5,"column_end":36}},{"value":"/ println!(\"{:?}\", choices.choose(&mut rng));","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204295,"byte_end":204342,"line_start":76,"line_end":76,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(choices[..0].choose(&mut rng), None);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204347,"byte_end":204399,"line_start":77,"line_end":77,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204404,"byte_end":204411,"line_start":78,"line_end":78,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204670,"byte_end":204680,"line_start":86,"line_end":86,"column_start":8,"column_end":18},"name":"choose_mut","qualname":"::seq::SliceRandom::choose_mut","value":"pub fn choose_mut<R: ?Sized>(&mut Self, &mut R) -> Option<&mut Self::Item>\nwhere R: Rng","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Returns a mutable reference to one random element of the slice, or\n `None` if the slice is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to one random element of the slice, or","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204504,"byte_end":204574,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/ `None` if the slice is empty.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204579,"byte_end":204612,"line_start":83,"line_end":83,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204617,"byte_end":204620,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(1)`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204625,"byte_end":204662,"line_start":85,"line_end":85,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205769,"byte_end":205784,"line_start":115,"line_end":115,"column_start":8,"column_end":23},"name":"choose_multiple","qualname":"::seq::SliceRandom::choose_multiple","value":"pub fn choose_multiple<R: ?Sized>(&Self, &mut R, usize)\n-> SliceChooseIter<, Self, Self::Item> where R: Rng","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Chooses `amount` elements from the slice at random, without repetition,\n and in random order. The returned iterator is appropriate both for\n collection into a `Vec` and filling an existing buffer (see example).","sig":null,"attributes":[{"value":"/ Chooses `amount` elements from the slice at random, without repetition,","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204767,"byte_end":204842,"line_start":89,"line_end":89,"column_start":5,"column_end":80}},{"value":"/ and in random order. The returned iterator is appropriate both for","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204847,"byte_end":204917,"line_start":90,"line_end":90,"column_start":5,"column_end":75}},{"value":"/ collection into a `Vec` and filling an existing buffer (see example).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":204922,"byte_end":204995,"line_start":91,"line_end":91,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205000,"byte_end":205003,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ In case this API is not sufficiently flexible, use [`index::sample`].","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205008,"byte_end":205081,"line_start":93,"line_end":93,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205086,"byte_end":205089,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is the same as [`index::sample`].","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205094,"byte_end":205154,"line_start":95,"line_end":95,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205159,"byte_end":205162,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205167,"byte_end":205180,"line_start":97,"line_end":97,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205185,"byte_end":205192,"line_start":98,"line_end":98,"column_start":5,"column_end":12}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205197,"byte_end":205228,"line_start":99,"line_end":99,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205233,"byte_end":205236,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ let mut rng = &mut rand::thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205241,"byte_end":205283,"line_start":101,"line_end":101,"column_start":5,"column_end":47}},{"value":"/ let sample = \"Hello, audience!\".as_bytes();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205288,"byte_end":205335,"line_start":102,"line_end":102,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205340,"byte_end":205343,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ // collect the results into a vector:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205348,"byte_end":205389,"line_start":104,"line_end":104,"column_start":5,"column_end":46}},{"value":"/ let v: Vec<u8> = sample.choose_multiple(&mut rng, 3).cloned().collect();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205394,"byte_end":205470,"line_start":105,"line_end":105,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205475,"byte_end":205478,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ // store in a buffer:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205483,"byte_end":205508,"line_start":107,"line_end":107,"column_start":5,"column_end":30}},{"value":"/ let mut buf = [0u8; 5];","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205513,"byte_end":205540,"line_start":108,"line_end":108,"column_start":5,"column_end":32}},{"value":"/ for (b, slot) in sample.choose_multiple(&mut rng, buf.len()).zip(buf.iter_mut()) {","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205545,"byte_end":205631,"line_start":109,"line_end":109,"column_start":5,"column_end":91}},{"value":"/     *slot = *b;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205636,"byte_end":205655,"line_start":110,"line_end":110,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205660,"byte_end":205665,"line_start":111,"line_end":111,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205670,"byte_end":205677,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205682,"byte_end":205707,"line_start":113,"line_end":113,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":206980,"byte_end":206995,"line_start":143,"line_end":143,"column_start":8,"column_end":23},"name":"choose_weighted","qualname":"::seq::SliceRandom::choose_weighted","value":"pub fn choose_weighted<R: ?Sized, F, B, X>(&Self, &mut R, F)\n-> Result<&Self::Item, WeightedError> where R: Rng, F: Fn(&Self::Item) -> B,\nB: SampleBorrow<X>, X: SampleUniform + for<'a> ::core::ops::AddAssign<&'a X> +\n::core::cmp::PartialOrd<X> + Clone + Default","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Similar to [`choose`], but where the likelihood of each outcome may be\n specified.","sig":null,"attributes":[{"value":"/ Similar to [`choose`], but where the likelihood of each outcome may be","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205892,"byte_end":205966,"line_start":118,"line_end":118,"column_start":5,"column_end":79}},{"value":"/ specified.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205971,"byte_end":205985,"line_start":119,"line_end":119,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205990,"byte_end":205993,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ The specified function `weight` maps each item `x` to a relative","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":205998,"byte_end":206066,"line_start":121,"line_end":121,"column_start":5,"column_end":73}},{"value":"/ likelihood `weight(x)`. The probability of each item being selected is","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":206071,"byte_end":206145,"line_start":122,"line_end":122,"column_start":5,"column_end":79}},{"value":"/ therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":206150,"byte_end":206221,"line_start":123,"line_end":123,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":206226,"byte_end":206229,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":206234,"byte_end":206285,"line_start":125,"line_end":125,"column_start":5,"column_end":56}},{"value":"/ See also [`choose_weighted_mut`], [`distributions::weighted`].","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":206290,"byte_end":206356,"line_start":126,"line_end":126,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":206361,"byte_end":206364,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":206369,"byte_end":206382,"line_start":128,"line_end":128,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":206387,"byte_end":206390,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":206395,"byte_end":206402,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":206407,"byte_end":206432,"line_start":131,"line_end":131,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":206437,"byte_end":206440,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ let choices = [('a', 2), ('b', 1), ('c', 1)];","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":206445,"byte_end":206494,"line_start":133,"line_end":133,"column_start":5,"column_end":54}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":206499,"byte_end":206530,"line_start":134,"line_end":134,"column_start":5,"column_end":36}},{"value":"/ // 50% chance to print 'a', 25% chance to print 'b', 25% chance to print 'c'","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":206535,"byte_end":206615,"line_start":135,"line_end":135,"column_start":5,"column_end":85}},{"value":"/ println!(\"{:?}\", choices.choose_weighted(&mut rng, |item| item.1).unwrap().0);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":206620,"byte_end":206702,"line_start":136,"line_end":136,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":206707,"byte_end":206714,"line_start":137,"line_end":137,"column_start":5,"column_end":12}},{"value":"/ [`choose`]: SliceRandom::choose","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":206719,"byte_end":206754,"line_start":138,"line_end":138,"column_start":5,"column_end":40}},{"value":"/ [`choose_weighted_mut`]: SliceRandom::choose_weighted_mut","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":206759,"byte_end":206820,"line_start":139,"line_end":139,"column_start":5,"column_end":66}},{"value":"/ [`distributions::weighted`]: crate::distributions::weighted","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":206825,"byte_end":206888,"line_start":140,"line_end":140,"column_start":5,"column_end":68}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":206893,"byte_end":206918,"line_start":141,"line_end":141,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":208092,"byte_end":208111,"line_start":171,"line_end":171,"column_start":8,"column_end":27},"name":"choose_weighted_mut","qualname":"::seq::SliceRandom::choose_weighted_mut","value":"pub fn choose_weighted_mut<R: ?Sized, F, B, X>(&mut Self, &mut R, F)\n-> Result<&mut Self::Item, WeightedError> where R: Rng, F: Fn(&Self::Item) ->\nB, B: SampleBorrow<X>, X: SampleUniform +\nfor<'a> ::core::ops::AddAssign<&'a X> + ::core::cmp::PartialOrd<X> + Clone +\nDefault","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Similar to [`choose_mut`], but where the likelihood of each outcome may\n be specified.","sig":null,"attributes":[{"value":"/ Similar to [`choose_mut`], but where the likelihood of each outcome may","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":207354,"byte_end":207429,"line_start":156,"line_end":156,"column_start":5,"column_end":80}},{"value":"/ be specified.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":207434,"byte_end":207451,"line_start":157,"line_end":157,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":207456,"byte_end":207459,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ The specified function `weight` maps each item `x` to a relative","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":207464,"byte_end":207532,"line_start":159,"line_end":159,"column_start":5,"column_end":73}},{"value":"/ likelihood `weight(x)`. The probability of each item being selected is","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":207537,"byte_end":207611,"line_start":160,"line_end":160,"column_start":5,"column_end":79}},{"value":"/ therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":207616,"byte_end":207687,"line_start":161,"line_end":161,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":207692,"byte_end":207695,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":207700,"byte_end":207751,"line_start":163,"line_end":163,"column_start":5,"column_end":56}},{"value":"/ See also [`choose_weighted`], [`distributions::weighted`].","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":207756,"byte_end":207818,"line_start":164,"line_end":164,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":207823,"byte_end":207826,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ [`choose_mut`]: SliceRandom::choose_mut","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":207831,"byte_end":207874,"line_start":166,"line_end":166,"column_start":5,"column_end":48}},{"value":"/ [`choose_weighted`]: SliceRandom::choose_weighted","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":207879,"byte_end":207932,"line_start":167,"line_end":167,"column_start":5,"column_end":58}},{"value":"/ [`distributions::weighted`]: crate::distributions::weighted","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":207937,"byte_end":208000,"line_start":168,"line_end":168,"column_start":5,"column_end":68}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":208005,"byte_end":208030,"line_start":169,"line_end":169,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210125,"byte_end":210149,"line_start":216,"line_end":216,"column_start":8,"column_end":32},"name":"choose_multiple_weighted","qualname":"::seq::SliceRandom::choose_multiple_weighted","value":"pub fn choose_multiple_weighted<R: ?Sized, F, X>(&Self, &mut R, usize, F)\n-> Result<SliceChooseIter<, Self, Self::Item>, WeightedError> where R: Rng,\nF: Fn(&Self::Item) -> X, X: Into<f64>","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Similar to [`choose_multiple`], but where the likelihood of each element's\n inclusion in the output may be specified. The elements are returned in an\n arbitrary, unspecified order.","sig":null,"attributes":[{"value":"/ Similar to [`choose_multiple`], but where the likelihood of each element's","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":208478,"byte_end":208556,"line_start":184,"line_end":184,"column_start":5,"column_end":83}},{"value":"/ inclusion in the output may be specified. The elements are returned in an","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":208561,"byte_end":208638,"line_start":185,"line_end":185,"column_start":5,"column_end":82}},{"value":"/ arbitrary, unspecified order.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":208643,"byte_end":208676,"line_start":186,"line_end":186,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":208681,"byte_end":208684,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ The specified function `weight` maps each item `x` to a relative","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":208689,"byte_end":208757,"line_start":188,"line_end":188,"column_start":5,"column_end":73}},{"value":"/ likelihood `weight(x)`. The probability of each item being selected is","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":208762,"byte_end":208836,"line_start":189,"line_end":189,"column_start":5,"column_end":79}},{"value":"/ therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":208841,"byte_end":208912,"line_start":190,"line_end":190,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":208917,"byte_end":208920,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ If all of the weights are equal, even if they are all zero, each element has","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":208925,"byte_end":209005,"line_start":192,"line_end":192,"column_start":5,"column_end":85}},{"value":"/ an equal likelihood of being selected.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":209010,"byte_end":209052,"line_start":193,"line_end":193,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":209057,"byte_end":209060,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ The complexity of this method depends on the feature `partition_at_index`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":209065,"byte_end":209143,"line_start":195,"line_end":195,"column_start":5,"column_end":83}},{"value":"/ If the feature is enabled, then for slices of length `n`, the complexity","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":209148,"byte_end":209224,"line_start":196,"line_end":196,"column_start":5,"column_end":81}},{"value":"/ is `O(n)` space and `O(n)` time. Otherwise, the complexity is `O(n)` space and","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":209229,"byte_end":209311,"line_start":197,"line_end":197,"column_start":5,"column_end":87}},{"value":"/ `O(n * log amount)` time.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":209316,"byte_end":209345,"line_start":198,"line_end":198,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":209350,"byte_end":209353,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":209358,"byte_end":209371,"line_start":200,"line_end":200,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":209376,"byte_end":209379,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":209384,"byte_end":209391,"line_start":202,"line_end":202,"column_start":5,"column_end":12}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":209396,"byte_end":209421,"line_start":203,"line_end":203,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":209426,"byte_end":209429,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ let choices = [('a', 2), ('b', 1), ('c', 1)];","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":209434,"byte_end":209483,"line_start":205,"line_end":205,"column_start":5,"column_end":54}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":209488,"byte_end":209519,"line_start":206,"line_end":206,"column_start":5,"column_end":36}},{"value":"/ // First Draw * Second Draw = total odds","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":209524,"byte_end":209568,"line_start":207,"line_end":207,"column_start":5,"column_end":49}},{"value":"/ // -----------------------","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":209573,"byte_end":209603,"line_start":208,"line_end":208,"column_start":5,"column_end":35}},{"value":"/ // (50% * 50%) + (25% * 67%) = 41.7% chance that the output is `['a', 'b']` in some order.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":209608,"byte_end":209702,"line_start":209,"line_end":209,"column_start":5,"column_end":99}},{"value":"/ // (50% * 50%) + (25% * 67%) = 41.7% chance that the output is `['a', 'c']` in some order.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":209707,"byte_end":209801,"line_start":210,"line_end":210,"column_start":5,"column_end":99}},{"value":"/ // (25% * 33%) + (25% * 33%) = 16.6% chance that the output is `['b', 'c']` in some order.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":209806,"byte_end":209900,"line_start":211,"line_end":211,"column_start":5,"column_end":99}},{"value":"/ println!(\"{:?}\", choices.choose_multiple_weighted(&mut rng, 2, |item| item.1).unwrap().collect::<Vec<_>>());","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":209905,"byte_end":210017,"line_start":212,"line_end":212,"column_start":5,"column_end":117}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210022,"byte_end":210029,"line_start":213,"line_end":213,"column_start":5,"column_end":12}},{"value":"/ [`choose_multiple`]: SliceRandom::choose_multiple","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210034,"byte_end":210087,"line_start":214,"line_end":214,"column_start":5,"column_end":58}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210092,"byte_end":210117,"line_start":215,"line_end":215,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210800,"byte_end":210807,"line_start":240,"line_end":240,"column_start":8,"column_end":15},"name":"shuffle","qualname":"::seq::SliceRandom::shuffle","value":"pub fn shuffle<R: ?Sized>(&mut Self, &mut R) where R: Rng","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Shuffle a mutable slice in place.","sig":null,"attributes":[{"value":"/ Shuffle a mutable slice in place.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210375,"byte_end":210412,"line_start":224,"line_end":224,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210417,"byte_end":210420,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210425,"byte_end":210476,"line_start":226,"line_end":226,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210481,"byte_end":210484,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210489,"byte_end":210502,"line_start":228,"line_end":228,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210507,"byte_end":210510,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210515,"byte_end":210522,"line_start":230,"line_end":230,"column_start":5,"column_end":12}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210527,"byte_end":210558,"line_start":231,"line_end":231,"column_start":5,"column_end":36}},{"value":"/ use rand::thread_rng;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210563,"byte_end":210588,"line_start":232,"line_end":232,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210593,"byte_end":210596,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210601,"byte_end":210632,"line_start":234,"line_end":234,"column_start":5,"column_end":36}},{"value":"/ let mut y = [1, 2, 3, 4, 5];","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210637,"byte_end":210669,"line_start":235,"line_end":235,"column_start":5,"column_end":37}},{"value":"/ println!(\"Unshuffled: {:?}\", y);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210674,"byte_end":210710,"line_start":236,"line_end":236,"column_start":5,"column_end":41}},{"value":"/ y.shuffle(&mut rng);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210715,"byte_end":210739,"line_start":237,"line_end":237,"column_start":5,"column_end":29}},{"value":"/ println!(\"Shuffled:   {:?}\", y);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210744,"byte_end":210780,"line_start":238,"line_end":238,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210785,"byte_end":210792,"line_start":239,"line_end":239,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":211672,"byte_end":211687,"line_start":260,"line_end":260,"column_start":8,"column_end":23},"name":"partial_shuffle","qualname":"::seq::SliceRandom::partial_shuffle","value":"pub fn partial_shuffle<R: ?Sized>(&mut Self, &mut R, usize)\n-> (&mut [Self::Item], &mut [Self::Item]) where R: Rng","parent":{"krate":0,"index":626},"children":[],"decl_id":null,"docs":" Shuffle a slice in place, but exit early.","sig":null,"attributes":[{"value":"/ Shuffle a slice in place, but exit early.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210867,"byte_end":210912,"line_start":243,"line_end":243,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210917,"byte_end":210920,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ Returns two mutable slices from the source slice. The first contains","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":210925,"byte_end":210997,"line_start":245,"line_end":245,"column_start":5,"column_end":77}},{"value":"/ `amount` elements randomly permuted. The second has the remaining","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":211002,"byte_end":211071,"line_start":246,"line_end":246,"column_start":5,"column_end":74}},{"value":"/ elements that are not fully shuffled.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":211076,"byte_end":211117,"line_start":247,"line_end":247,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":211122,"byte_end":211125,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ This is an efficient method to select `amount` elements at random from","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":211130,"byte_end":211204,"line_start":249,"line_end":249,"column_start":5,"column_end":79}},{"value":"/ the slice, provided the slice may be mutated.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":211209,"byte_end":211258,"line_start":250,"line_end":250,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":211263,"byte_end":211266,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ If you only need to choose elements randomly and `amount > self.len()/2`","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":211271,"byte_end":211347,"line_start":252,"line_end":252,"column_start":5,"column_end":81}},{"value":"/ then you may improve performance by taking","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":211352,"byte_end":211398,"line_start":253,"line_end":253,"column_start":5,"column_end":51}},{"value":"/ `amount = values.len() - amount` and using only the second slice.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":211403,"byte_end":211472,"line_start":254,"line_end":254,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":211477,"byte_end":211480,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ If `amount` is greater than the number of elements in the slice, this","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":211485,"byte_end":211558,"line_start":256,"line_end":256,"column_start":5,"column_end":78}},{"value":"/ will perform a full shuffle.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":211563,"byte_end":211595,"line_start":257,"line_end":257,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":211600,"byte_end":211603,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(m)` where `m = amount`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":211608,"byte_end":211664,"line_start":259,"line_end":259,"column_start":5,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212357,"byte_end":212371,"line_start":284,"line_end":284,"column_start":11,"column_end":25},"name":"IteratorRandom","qualname":"::seq::IteratorRandom","value":"IteratorRandom: Iterator + Sized","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":657},{"krate":0,"index":660},{"krate":0,"index":662}],"decl_id":null,"docs":" Extension trait on iterators, providing random sampling methods.","sig":null,"attributes":[{"value":"/ Extension trait on iterators, providing random sampling methods.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":211817,"byte_end":211885,"line_start":266,"line_end":266,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":211886,"byte_end":211889,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented on all iterators `I` where `I: Iterator + Sized`","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":211890,"byte_end":211968,"line_start":268,"line_end":268,"column_start":1,"column_end":79}},{"value":"/ and provides methods for","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":211969,"byte_end":211997,"line_start":269,"line_end":269,"column_start":1,"column_end":29}},{"value":"/ choosing one or more elements. You must `use` this trait:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":211998,"byte_end":212059,"line_start":270,"line_end":270,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212060,"byte_end":212063,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212064,"byte_end":212071,"line_start":272,"line_end":272,"column_start":1,"column_end":8}},{"value":"/ use rand::seq::IteratorRandom;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212072,"byte_end":212106,"line_start":273,"line_end":273,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212107,"byte_end":212110,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212111,"byte_end":212148,"line_start":275,"line_end":275,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212149,"byte_end":212152,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ let faces = \"😀😎😐😕😠😢\";","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212153,"byte_end":212196,"line_start":277,"line_end":277,"column_start":1,"column_end":26}},{"value":"/ println!(\"I am {}!\", faces.chars().choose(&mut rng).unwrap());","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212197,"byte_end":212263,"line_start":278,"line_end":278,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212264,"byte_end":212271,"line_start":279,"line_end":279,"column_start":1,"column_end":8}},{"value":"/ Example output (non-deterministic):","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212272,"byte_end":212311,"line_start":280,"line_end":280,"column_start":1,"column_end":40}},{"value":"/ ```none","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212312,"byte_end":212323,"line_start":281,"line_end":281,"column_start":1,"column_end":12}},{"value":"/ I am 😀!","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212324,"byte_end":212338,"line_start":282,"line_end":282,"column_start":1,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212339,"byte_end":212346,"line_start":283,"line_end":283,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":213267,"byte_end":213273,"line_start":300,"line_end":300,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::IteratorRandom::choose","value":"pub fn choose<R: ?Sized>(Self, &mut R) -> Option<Self::Item> where R: Rng","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Choose one element at random from the iterator.","sig":null,"attributes":[{"value":"/ Choose one element at random from the iterator.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212396,"byte_end":212447,"line_start":285,"line_end":285,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212452,"byte_end":212455,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if and only if the iterator is empty.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212460,"byte_end":212516,"line_start":287,"line_end":287,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212521,"byte_end":212524,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ This method uses [`Iterator::size_hint`] for optimisation. With an","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212529,"byte_end":212599,"line_start":289,"line_end":289,"column_start":5,"column_end":75}},{"value":"/ accurate hint and where [`Iterator::nth`] is a constant-time operation","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212604,"byte_end":212678,"line_start":290,"line_end":290,"column_start":5,"column_end":79}},{"value":"/ this method can offer `O(1)` performance. Where no size hint is","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212683,"byte_end":212750,"line_start":291,"line_end":291,"column_start":5,"column_end":72}},{"value":"/ available, complexity is `O(n)` where `n` is the iterator length.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212755,"byte_end":212824,"line_start":292,"line_end":292,"column_start":5,"column_end":74}},{"value":"/ Partial hints (where `lower > 0`) also improve performance.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212829,"byte_end":212892,"line_start":293,"line_end":293,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212897,"byte_end":212900,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ Note that the output values and the number of RNG samples used","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212905,"byte_end":212971,"line_start":295,"line_end":295,"column_start":5,"column_end":71}},{"value":"/ depends on size hints. In particular, `Iterator` combinators that don't","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212976,"byte_end":213051,"line_start":296,"line_end":296,"column_start":5,"column_end":80}},{"value":"/ change the values yielded but change the size hints may result in","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":213056,"byte_end":213125,"line_start":297,"line_end":297,"column_start":5,"column_end":74}},{"value":"/ `choose` returning different elements. If you want consistent results","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":213130,"byte_end":213203,"line_start":298,"line_end":298,"column_start":5,"column_end":78}},{"value":"/ and RNG usage consider using [`choose_stable`].","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":213208,"byte_end":213259,"line_start":299,"line_end":299,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":215851,"byte_end":215864,"line_start":367,"line_end":367,"column_start":8,"column_end":21},"name":"choose_stable","qualname":"::seq::IteratorRandom::choose_stable","value":"pub fn choose_stable<R: ?Sized>(Self, &mut R) -> Option<Self::Item> where\nR: Rng","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Choose one element at random from the iterator.","sig":null,"attributes":[{"value":"/ Choose one element at random from the iterator.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":214869,"byte_end":214920,"line_start":351,"line_end":351,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":214925,"byte_end":214928,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if and only if the iterator is empty.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":214933,"byte_end":214989,"line_start":353,"line_end":353,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":214994,"byte_end":214997,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ This method is very similar to [`choose`] except that the result","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":215002,"byte_end":215070,"line_start":355,"line_end":355,"column_start":5,"column_end":73}},{"value":"/ only depends on the length of the iterator and the values produced by","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":215075,"byte_end":215148,"line_start":356,"line_end":356,"column_start":5,"column_end":78}},{"value":"/ `rng`. Notably for any iterator of a given length this will make the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":215153,"byte_end":215225,"line_start":357,"line_end":357,"column_start":5,"column_end":77}},{"value":"/ same requests to `rng` and if the same sequence of values are produced","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":215230,"byte_end":215304,"line_start":358,"line_end":358,"column_start":5,"column_end":79}},{"value":"/ the same index will be selected from `self`. This may be useful if you","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":215309,"byte_end":215383,"line_start":359,"line_end":359,"column_start":5,"column_end":79}},{"value":"/ need consistent results no matter what type of iterator you are working","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":215388,"byte_end":215463,"line_start":360,"line_end":360,"column_start":5,"column_end":80}},{"value":"/ with. If you do not need this stability prefer [`choose`].","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":215468,"byte_end":215530,"line_start":361,"line_end":361,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":215535,"byte_end":215538,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ Note that this method still uses [`Iterator::size_hint`] to skip","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":215543,"byte_end":215611,"line_start":363,"line_end":363,"column_start":5,"column_end":73}},{"value":"/ constructing elements where possible, however the selection and `rng`","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":215616,"byte_end":215689,"line_start":364,"line_end":364,"column_start":5,"column_end":78}},{"value":"/ calls are the same in the face of this optimization. If you want to","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":215694,"byte_end":215765,"line_start":365,"line_end":365,"column_start":5,"column_end":76}},{"value":"/ force every element to be created regardless call `.inspect(|e| ())`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":215770,"byte_end":215843,"line_start":366,"line_end":366,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":217813,"byte_end":217833,"line_start":420,"line_end":420,"column_start":8,"column_end":28},"name":"choose_multiple_fill","qualname":"::seq::IteratorRandom::choose_multiple_fill","value":"pub fn choose_multiple_fill<R: ?Sized>(Self, &mut R, &mut [Self::Item])\n-> usize where R: Rng","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Collects values at random from the iterator into a supplied buffer\n until that buffer is filled.","sig":null,"attributes":[{"value":"/ Collects values at random from the iterator into a supplied buffer","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":217126,"byte_end":217196,"line_start":407,"line_end":407,"column_start":5,"column_end":75}},{"value":"/ until that buffer is filled.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":217201,"byte_end":217233,"line_start":408,"line_end":408,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":217238,"byte_end":217241,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ Although the elements are selected randomly, the order of elements in","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":217246,"byte_end":217319,"line_start":410,"line_end":410,"column_start":5,"column_end":78}},{"value":"/ the buffer is neither stable nor fully random. If random ordering is","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":217324,"byte_end":217396,"line_start":411,"line_end":411,"column_start":5,"column_end":77}},{"value":"/ desired, shuffle the result.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":217401,"byte_end":217433,"line_start":412,"line_end":412,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":217438,"byte_end":217441,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ Returns the number of elements added to the buffer. This equals the length","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":217446,"byte_end":217524,"line_start":414,"line_end":414,"column_start":5,"column_end":83}},{"value":"/ of the buffer unless the iterator contains insufficient elements, in which","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":217529,"byte_end":217607,"line_start":415,"line_end":415,"column_start":5,"column_end":83}},{"value":"/ case this equals the number of elements available.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":217612,"byte_end":217666,"line_start":416,"line_end":416,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":217671,"byte_end":217674,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ Complexity is `O(n)` where `n` is the length of the iterator.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":217679,"byte_end":217744,"line_start":418,"line_end":418,"column_start":5,"column_end":70}},{"value":"/ For slices, prefer [`SliceRandom::choose_multiple`].","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":217749,"byte_end":217805,"line_start":419,"line_end":419,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":219299,"byte_end":219314,"line_start":460,"line_end":460,"column_start":8,"column_end":23},"name":"choose_multiple","qualname":"::seq::IteratorRandom::choose_multiple","value":"pub fn choose_multiple<R: ?Sized>(Self, &mut R, usize) -> Vec<Self::Item>\nwhere R: Rng","parent":{"krate":0,"index":654},"children":[],"decl_id":null,"docs":" Collects `amount` values at random from the iterator into a vector.","sig":null,"attributes":[{"value":"/ Collects `amount` values at random from the iterator into a vector.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":218516,"byte_end":218587,"line_start":444,"line_end":444,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":218592,"byte_end":218595,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to `choose_multiple_fill` except for the result type.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":218600,"byte_end":218676,"line_start":446,"line_end":446,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":218681,"byte_end":218684,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ Although the elements are selected randomly, the order of elements in","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":218689,"byte_end":218762,"line_start":448,"line_end":448,"column_start":5,"column_end":78}},{"value":"/ the buffer is neither stable nor fully random. If random ordering is","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":218767,"byte_end":218839,"line_start":449,"line_end":449,"column_start":5,"column_end":77}},{"value":"/ desired, shuffle the result.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":218844,"byte_end":218876,"line_start":450,"line_end":450,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":218881,"byte_end":218884,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ The length of the returned vector equals `amount` unless the iterator","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":218889,"byte_end":218962,"line_start":452,"line_end":452,"column_start":5,"column_end":78}},{"value":"/ contains insufficient elements, in which case it equals the number of","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":218967,"byte_end":219040,"line_start":453,"line_end":453,"column_start":5,"column_end":78}},{"value":"/ elements available.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":219045,"byte_end":219068,"line_start":454,"line_end":454,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":219073,"byte_end":219076,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ Complexity is `O(n)` where `n` is the length of the iterator.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":219081,"byte_end":219146,"line_start":456,"line_end":456,"column_start":5,"column_end":70}},{"value":"/ For slices, prefer [`SliceRandom::choose_multiple`].","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":219151,"byte_end":219207,"line_start":457,"line_end":457,"column_start":5,"column_end":61}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":219212,"byte_end":219237,"line_start":458,"line_end":458,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":1974},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":224340,"byte_end":224355,"line_start":619,"line_end":619,"column_start":12,"column_end":27},"name":"SliceChooseIter","qualname":"::seq::SliceChooseIter","value":"SliceChooseIter {  }","parent":null,"children":[{"krate":0,"index":1978},{"krate":0,"index":1979},{"krate":0,"index":1980}],"decl_id":null,"docs":" An iterator over multiple slice elements.","sig":null,"attributes":[{"value":"/ An iterator over multiple slice elements.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":224069,"byte_end":224114,"line_start":612,"line_end":612,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":224115,"byte_end":224118,"line_start":613,"line_end":613,"column_start":1,"column_end":4}},{"value":"/ This struct is created by","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":224119,"byte_end":224148,"line_start":614,"line_end":614,"column_start":1,"column_end":30}},{"value":"/ [`SliceRandom::choose_multiple`](trait.SliceRandom.html#tymethod.choose_multiple).","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":224149,"byte_end":224235,"line_start":615,"line_end":615,"column_start":1,"column_end":87}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":224236,"byte_end":224261,"line_start":616,"line_end":616,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":724},"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5795,"byte_end":5801,"line_start":184,"line_end":184,"column_start":8,"column_end":14},"name":"random","qualname":"::random","value":"pub fn random<T>() -> T where Standard: Distribution<T>","parent":null,"children":[],"decl_id":null,"docs":" Generates a random value using the thread-local random number generator.","sig":null,"attributes":[{"value":"/ Generates a random value using the thread-local random number generator.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":3236,"byte_end":3312,"line_start":112,"line_end":112,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":3313,"byte_end":3316,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ This is simply a shortcut for `thread_rng().gen()`. See [`thread_rng`] for","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":3317,"byte_end":3395,"line_start":114,"line_end":114,"column_start":1,"column_end":79}},{"value":"/ documentation of the entropy source and [`Standard`] for documentation of","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":3396,"byte_end":3473,"line_start":115,"line_end":115,"column_start":1,"column_end":78}},{"value":"/ distributions and type-specific generation.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":3474,"byte_end":3521,"line_start":116,"line_end":116,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":3522,"byte_end":3525,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ # Provided implementations","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":3526,"byte_end":3556,"line_start":118,"line_end":118,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":3557,"byte_end":3560,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ The following types have provided implementations that","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":3561,"byte_end":3619,"line_start":120,"line_end":120,"column_start":1,"column_end":59}},{"value":"/ generate values with the following ranges and distributions:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":3620,"byte_end":3684,"line_start":121,"line_end":121,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":3685,"byte_end":3688,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ * Integers (`i32`, `u32`, `isize`, `usize`, etc.): Uniformly distributed","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":3689,"byte_end":3765,"line_start":123,"line_end":123,"column_start":1,"column_end":77}},{"value":"/   over all values of the type.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":3766,"byte_end":3800,"line_start":124,"line_end":124,"column_start":1,"column_end":35}},{"value":"/ * `char`: Uniformly distributed over all Unicode scalar values, i.e. all","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":3801,"byte_end":3877,"line_start":125,"line_end":125,"column_start":1,"column_end":77}},{"value":"/   code points in the range `0...0x10_FFFF`, except for the range","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":3878,"byte_end":3946,"line_start":126,"line_end":126,"column_start":1,"column_end":69}},{"value":"/   `0xD800...0xDFFF` (the surrogate code points). This includes","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":3947,"byte_end":4013,"line_start":127,"line_end":127,"column_start":1,"column_end":67}},{"value":"/   unassigned/reserved code points.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":4014,"byte_end":4052,"line_start":128,"line_end":128,"column_start":1,"column_end":39}},{"value":"/ * `bool`: Generates `false` or `true`, each with probability 0.5.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":4053,"byte_end":4122,"line_start":129,"line_end":129,"column_start":1,"column_end":70}},{"value":"/ * Floating point types (`f32` and `f64`): Uniformly distributed in the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":4123,"byte_end":4197,"line_start":130,"line_end":130,"column_start":1,"column_end":75}},{"value":"/   half-open range `[0, 1)`. See notes below.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":4198,"byte_end":4246,"line_start":131,"line_end":131,"column_start":1,"column_end":49}},{"value":"/ * Wrapping integers (`Wrapping<T>`), besides the type identical to their","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":4247,"byte_end":4323,"line_start":132,"line_end":132,"column_start":1,"column_end":77}},{"value":"/   normal integer variants.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":4324,"byte_end":4354,"line_start":133,"line_end":133,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":4355,"byte_end":4358,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ Also supported is the generation of the following","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":4359,"byte_end":4412,"line_start":135,"line_end":135,"column_start":1,"column_end":54}},{"value":"/ compound types where all component types are supported:","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":4413,"byte_end":4472,"line_start":136,"line_end":136,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":4473,"byte_end":4476,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ *   Tuples (up to 12 elements): each element is generated sequentially.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":4477,"byte_end":4552,"line_start":138,"line_end":138,"column_start":1,"column_end":76}},{"value":"/ *   Arrays (up to 32 elements): each element is generated sequentially;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":4553,"byte_end":4628,"line_start":139,"line_end":139,"column_start":1,"column_end":76}},{"value":"/     see also [`Rng::fill`] which supports arbitrary array length for integer","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":4629,"byte_end":4709,"line_start":140,"line_end":140,"column_start":1,"column_end":81}},{"value":"/     types and tends to be faster for `u32` and smaller types.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":4710,"byte_end":4775,"line_start":141,"line_end":141,"column_start":1,"column_end":66}},{"value":"/ *   `Option<T>` first generates a `bool`, and if true generates and returns","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":4776,"byte_end":4855,"line_start":142,"line_end":142,"column_start":1,"column_end":80}},{"value":"/     `Some(value)` where `value: T`, otherwise returning `None`.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":4856,"byte_end":4923,"line_start":143,"line_end":143,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":4924,"byte_end":4927,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":4928,"byte_end":4942,"line_start":145,"line_end":145,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":4943,"byte_end":4946,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":4947,"byte_end":4954,"line_start":147,"line_end":147,"column_start":1,"column_end":8}},{"value":"/ let x = rand::random::<u8>();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":4955,"byte_end":4988,"line_start":148,"line_end":148,"column_start":1,"column_end":34}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":4989,"byte_end":5011,"line_start":149,"line_end":149,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5012,"byte_end":5015,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ let y = rand::random::<f64>();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5016,"byte_end":5050,"line_start":151,"line_end":151,"column_start":1,"column_end":35}},{"value":"/ println!(\"{}\", y);","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5051,"byte_end":5073,"line_start":152,"line_end":152,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5074,"byte_end":5077,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ if rand::random() { // generates a boolean","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5078,"byte_end":5124,"line_start":154,"line_end":154,"column_start":1,"column_end":47}},{"value":"/     println!(\"Better lucky than good!\");","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5125,"byte_end":5169,"line_start":155,"line_end":155,"column_start":1,"column_end":45}},{"value":"/ }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5170,"byte_end":5175,"line_start":156,"line_end":156,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5176,"byte_end":5183,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5184,"byte_end":5187,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ If you're calling `random()` in a loop, caching the generator as in the","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5188,"byte_end":5263,"line_start":159,"line_end":159,"column_start":1,"column_end":76}},{"value":"/ following example can increase performance.","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5264,"byte_end":5311,"line_start":160,"line_end":160,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5312,"byte_end":5315,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5316,"byte_end":5323,"line_start":162,"line_end":162,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5324,"byte_end":5342,"line_start":163,"line_end":163,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5343,"byte_end":5346,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ let mut v = vec![1, 2, 3];","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5347,"byte_end":5377,"line_start":165,"line_end":165,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5378,"byte_end":5381,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ for x in v.iter_mut() {","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5382,"byte_end":5409,"line_start":167,"line_end":167,"column_start":1,"column_end":28}},{"value":"/     *x = rand::random()","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5410,"byte_end":5437,"line_start":168,"line_end":168,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5438,"byte_end":5443,"line_start":169,"line_end":169,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5444,"byte_end":5447,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ // can be made faster by caching thread_rng","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5448,"byte_end":5495,"line_start":171,"line_end":171,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5496,"byte_end":5499,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5500,"byte_end":5537,"line_start":173,"line_end":173,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5538,"byte_end":5541,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ for x in v.iter_mut() {","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5542,"byte_end":5569,"line_start":175,"line_end":175,"column_start":1,"column_end":28}},{"value":"/     *x = rng.gen();","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5570,"byte_end":5593,"line_start":176,"line_end":176,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5594,"byte_end":5599,"line_start":177,"line_end":177,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5600,"byte_end":5607,"line_start":178,"line_end":178,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5608,"byte_end":5611,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: distributions::Standard","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5612,"byte_end":5653,"line_start":180,"line_end":180,"column_start":1,"column_end":42}},{"value":"cfg(all(feature = \"std\", feature = \"std_rng\"))","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5654,"byte_end":5703,"line_start":181,"line_end":181,"column_start":1,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":5778,"byte_end":5787,"line_start":183,"line_end":183,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":23024,"byte_end":23038,"line_start":75,"line_end":75,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":39}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":23309,"byte_end":23323,"line_start":84,"line_end":84,"column_start":30,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":23333,"byte_end":23342,"line_start":86,"line_end":86,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":25223,"byte_end":25232,"line_start":131,"line_end":131,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34680,"byte_end":34687,"line_start":177,"line_end":177,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":35453,"byte_end":35460,"line_start":199,"line_end":199,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":39361,"byte_end":39368,"line_start":300,"line_end":300,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":39525,"byte_end":39532,"line_start":306,"line_end":306,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":40106,"byte_end":40114,"line_start":324,"line_end":324,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":40845,"byte_end":40850,"line_start":353,"line_end":353,"column_start":56,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":41150,"byte_end":41164,"line_start":365,"line_end":365,"column_start":56,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":64528,"byte_end":64536,"line_start":947,"line_end":947,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":64602,"byte_end":64617,"line_start":951,"line_end":951,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":134},{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted.rs","byte_start":86885,"byte_end":86898,"line_start":29,"line_end":29,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":90941,"byte_end":90954,"line_start":87,"line_end":87,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":95848,"byte_end":95861,"line_start":223,"line_end":223,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":103034,"byte_end":103047,"line_start":442,"line_end":442,"column_start":30,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":103074,"byte_end":103087,"line_start":444,"line_end":444,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\integer.rs","byte_start":117019,"byte_end":117027,"line_start":21,"line_end":21,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\integer.rs","byte_start":117168,"byte_end":117176,"line_start":28,"line_end":28,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\integer.rs","byte_start":117319,"byte_end":117327,"line_start":35,"line_end":35,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\integer.rs","byte_start":117463,"byte_end":117471,"line_start":42,"line_end":42,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\integer.rs","byte_start":117646,"byte_end":117654,"line_start":50,"line_end":50,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\integer.rs","byte_start":117949,"byte_end":117957,"line_start":60,"line_end":60,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":127345,"byte_end":127353,"line_start":64,"line_end":64,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":128100,"byte_end":128112,"line_start":85,"line_end":85,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":128881,"byte_end":128889,"line_start":104,"line_end":104,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":130070,"byte_end":130078,"line_start":139,"line_end":139,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":131372,"byte_end":131380,"line_start":181,"line_end":181,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":131724,"byte_end":131732,"line_start":195,"line_end":195,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":15187,"byte_end":15195,"line_start":218,"line_end":218,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":15763,"byte_end":15771,"line_start":238,"line_end":238,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159827,"byte_end":159828,"line_start":303,"line_end":303,"column_start":35,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":176322,"byte_end":176329,"line_start":51,"line_end":51,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":389}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":176483,"byte_end":176490,"line_start":58,"line_end":58,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":177354,"byte_end":177363,"line_start":91,"line_end":91,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":177504,"byte_end":177513,"line_start":97,"line_end":97,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":182394,"byte_end":182406,"line_start":84,"line_end":84,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":183233,"byte_end":183245,"line_start":107,"line_end":107,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":183784,"byte_end":183796,"line_start":131,"line_end":131,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":184123,"byte_end":184135,"line_start":143,"line_end":143,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":184425,"byte_end":184438,"line_start":159,"line_end":159,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":185281,"byte_end":185294,"line_start":181,"line_end":181,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":445}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":187870,"byte_end":187883,"line_start":258,"line_end":258,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":188322,"byte_end":188335,"line_start":274,"line_end":274,"column_start":29,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":192264,"byte_end":192271,"line_start":37,"line_end":37,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":192567,"byte_end":192574,"line_start":48,"line_end":48,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","byte_start":195113,"byte_end":195119,"line_start":39,"line_end":39,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","byte_start":195575,"byte_end":195581,"line_start":61,"line_end":61,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","byte_start":195890,"byte_end":195896,"line_start":75,"line_end":75,"column_start":20,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":200565,"byte_end":200574,"line_start":92,"line_end":92,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":200672,"byte_end":200681,"line_start":98,"line_end":98,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":201766,"byte_end":201775,"line_start":130,"line_end":130,"column_start":20,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":249296,"byte_end":249304,"line_start":38,"line_end":38,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":250724,"byte_end":250732,"line_start":88,"line_end":88,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":251141,"byte_end":251149,"line_start":102,"line_end":102,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":251739,"byte_end":251747,"line_start":118,"line_end":118,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":547}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":251859,"byte_end":251867,"line_start":125,"line_end":125,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":252168,"byte_end":252180,"line_start":141,"line_end":141,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":252715,"byte_end":252727,"line_start":162,"line_end":162,"column_start":32,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":252951,"byte_end":252967,"line_start":173,"line_end":173,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":564}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":253492,"byte_end":253508,"line_start":195,"line_end":195,"column_start":28,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":258441,"byte_end":258448,"line_start":326,"line_end":326,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":258612,"byte_end":258619,"line_start":331,"line_end":331,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":258892,"byte_end":258899,"line_start":338,"line_end":338,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":259019,"byte_end":259026,"line_start":343,"line_end":343,"column_start":20,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":224036,"byte_end":224037,"line_start":609,"line_end":609,"column_start":28,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":224588,"byte_end":224603,"line_start":626,"line_end":626,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":709}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":225055,"byte_end":225070,"line_start":641,"line_end":641,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":2928,"byte_end":2941,"line_start":98,"line_end":98,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":16}},{"kind":"Mod","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":11462,"byte_end":11469,"line_start":108,"line_end":108,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":47}},{"kind":"Mod","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":11661,"byte_end":11669,"line_start":113,"line_end":113,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":140}},{"kind":"Mod","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":2951,"byte_end":2958,"line_start":99,"line_end":99,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":318}},{"kind":"Mod","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":2977,"byte_end":2981,"line_start":101,"line_end":101,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":378}},{"kind":"Mod","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":173501,"byte_end":173508,"line_start":100,"line_end":100,"column_start":33,"column_end":40},"ref_id":{"krate":0,"index":379}},{"kind":"Mod","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mod.rs","byte_start":173519,"byte_end":173523,"line_start":102,"line_end":102,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":460}},{"kind":"Mod","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\lib.rs","byte_start":2991,"byte_end":2994,"line_start":102,"line_end":102,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":517}},{"kind":"Mod","span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":203017,"byte_end":203022,"line_start":30,"line_end":30,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":518}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":23024,"byte_end":23038,"line_start":75,"line_end":75,"column_start":23,"column_end":37},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":733},"to":{"krate":1,"index":6327}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":23309,"byte_end":23323,"line_start":84,"line_end":84,"column_start":30,"column_end":44},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":733},"to":{"krate":4,"index":1690}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":23333,"byte_end":23342,"line_start":86,"line_end":86,"column_start":6,"column_end":15},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":726},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\bernoulli.rs","byte_start":25223,"byte_end":25232,"line_start":131,"line_end":131,"column_start":29,"column_end":38},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":726},"to":{"krate":0,"index":295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":34680,"byte_end":34687,"line_start":177,"line_end":177,"column_start":24,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":747},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":35453,"byte_end":35460,"line_start":199,"line_end":199,"column_start":44,"column_end":51},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":747},"to":{"krate":0,"index":295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":35876,"byte_end":35881,"line_start":212,"line_end":212,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1976},"to":{"krate":0,"index":74}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":36456,"byte_end":36461,"line_start":227,"line_end":227,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":1976},"to":{"krate":0,"index":76}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":39361,"byte_end":39368,"line_start":300,"line_end":300,"column_start":43,"column_end":50},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":747},"to":{"krate":1,"index":1889}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":39525,"byte_end":39532,"line_start":306,"line_end":306,"column_start":52,"column_end":59},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":747},"to":{"krate":1,"index":1889}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":40106,"byte_end":40114,"line_start":324,"line_end":324,"column_start":43,"column_end":51},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":104},"to":{"krate":0,"index":100}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":40845,"byte_end":40850,"line_start":353,"line_end":353,"column_start":56,"column_end":61},"kind":{"Impl":{"id":9}},"from":{"krate":1,"index":28961},"to":{"krate":0,"index":110}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":41150,"byte_end":41164,"line_start":365,"line_end":365,"column_start":56,"column_end":70},"kind":{"Impl":{"id":10}},"from":{"krate":1,"index":29030},"to":{"krate":0,"index":110}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":64528,"byte_end":64536,"line_start":947,"line_end":947,"column_start":24,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":1,"index":32699},"to":{"krate":0,"index":74}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\uniform.rs","byte_start":64602,"byte_end":64617,"line_start":951,"line_end":951,"column_start":25,"column_end":40},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1056},"to":{"krate":0,"index":76}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted.rs","byte_start":86885,"byte_end":86898,"line_start":29,"line_end":29,"column_start":21,"column_end":34},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1079},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":90941,"byte_end":90954,"line_start":87,"line_end":87,"column_start":37,"column_end":50},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1099},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":95848,"byte_end":95861,"line_start":223,"line_end":223,"column_start":33,"column_end":46},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1099},"to":{"krate":0,"index":295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":103034,"byte_end":103047,"line_start":442,"line_end":442,"column_start":30,"column_end":43},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1110},"to":{"krate":4,"index":1690}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\weighted_index.rs","byte_start":103074,"byte_end":103087,"line_start":444,"line_end":444,"column_start":23,"column_end":36},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1110},"to":{"krate":1,"index":6327}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\integer.rs","byte_start":117019,"byte_end":117027,"line_start":21,"line_end":21,"column_start":27,"column_end":35},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1585},"to":{"krate":0,"index":295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\integer.rs","byte_start":117168,"byte_end":117176,"line_start":28,"line_end":28,"column_start":28,"column_end":36},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1585},"to":{"krate":0,"index":295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\integer.rs","byte_start":117319,"byte_end":117327,"line_start":35,"line_end":35,"column_start":28,"column_end":36},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1585},"to":{"krate":0,"index":295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\integer.rs","byte_start":117463,"byte_end":117471,"line_start":42,"line_end":42,"column_start":28,"column_end":36},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1585},"to":{"krate":0,"index":295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\integer.rs","byte_start":117646,"byte_end":117654,"line_start":50,"line_end":50,"column_start":29,"column_end":37},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1585},"to":{"krate":0,"index":295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\integer.rs","byte_start":117949,"byte_end":117957,"line_start":60,"line_end":60,"column_start":30,"column_end":38},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1585},"to":{"krate":0,"index":295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":127345,"byte_end":127353,"line_start":64,"line_end":64,"column_start":29,"column_end":37},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1585},"to":{"krate":0,"index":295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":128100,"byte_end":128112,"line_start":85,"line_end":85,"column_start":27,"column_end":39},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1206},"to":{"krate":0,"index":295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":128881,"byte_end":128889,"line_start":104,"line_end":104,"column_start":29,"column_end":37},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1585},"to":{"krate":0,"index":295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":130070,"byte_end":130078,"line_start":139,"line_end":139,"column_start":27,"column_end":35},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1585},"to":{"krate":0,"index":295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":131372,"byte_end":131380,"line_start":181,"line_end":181,"column_start":37,"column_end":45},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1585},"to":{"krate":0,"index":295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\other.rs","byte_start":131724,"byte_end":131732,"line_start":195,"line_end":195,"column_start":39,"column_end":47},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1585},"to":{"krate":0,"index":295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\utils.rs","byte_start":143252,"byte_end":143257,"line_start":238,"line_end":238,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":1,"index":1976},"to":{"krate":0,"index":277}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\utils.rs","byte_start":143463,"byte_end":143468,"line_start":245,"line_end":245,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":1976},"to":{"krate":0,"index":281}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\utils.rs","byte_start":143913,"byte_end":143918,"line_start":266,"line_end":266,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1976},"to":{"krate":0,"index":286}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":15187,"byte_end":15195,"line_start":218,"line_end":218,"column_start":28,"column_end":36},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1573},"to":{"krate":1,"index":5047}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\distributions\\mod.rs","byte_start":15763,"byte_end":15771,"line_start":238,"line_end":238,"column_start":39,"column_end":47},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1573},"to":{"krate":1,"index":5308}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":152113,"byte_end":152120,"line_start":55,"line_end":55,"column_start":16,"column_end":23},"kind":"SuperTrait","from":{"krate":13,"index":140},"to":{"krate":0,"index":348}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rng.rs","byte_start":159827,"byte_end":159828,"line_start":303,"line_end":303,"column_start":35,"column_end":36},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":368},"to":{"krate":0,"index":348}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":176322,"byte_end":176329,"line_start":51,"line_end":51,"column_start":15,"column_end":22},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1870},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":176483,"byte_end":176490,"line_start":58,"line_end":58,"column_start":27,"column_end":34},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1870},"to":{"krate":13,"index":140}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":177354,"byte_end":177363,"line_start":91,"line_end":91,"column_start":23,"column_end":32},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1876},"to":{"krate":1,"index":6327}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\read.rs","byte_start":177504,"byte_end":177513,"line_start":97,"line_end":97,"column_start":28,"column_end":37},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1876},"to":{"krate":4,"index":1690}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":182394,"byte_end":182406,"line_start":84,"line_end":84,"column_start":15,"column_end":27},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1881},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":183233,"byte_end":183245,"line_start":107,"line_end":107,"column_start":36,"column_end":48},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1881},"to":{"krate":13,"index":140}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":183784,"byte_end":183796,"line_start":131,"line_end":131,"column_start":25,"column_end":37},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1881},"to":{"krate":1,"index":1669}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":184123,"byte_end":184135,"line_start":143,"line_end":143,"column_start":29,"column_end":41},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1881},"to":{"krate":13,"index":145}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":184425,"byte_end":184438,"line_start":159,"line_end":159,"column_start":32,"column_end":45},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1890},"to":{"krate":13,"index":22}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":185281,"byte_end":185294,"line_start":181,"line_end":181,"column_start":15,"column_end":28},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1890},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":187870,"byte_end":187883,"line_start":258,"line_end":258,"column_start":25,"column_end":38},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1890},"to":{"krate":1,"index":1669}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\adapter\\reseeding.rs","byte_start":188322,"byte_end":188335,"line_start":274,"line_end":274,"column_start":29,"column_end":42},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1890},"to":{"krate":13,"index":145}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":192264,"byte_end":192271,"line_start":37,"line_end":37,"column_start":6,"column_end":13},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1902},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\mock.rs","byte_start":192567,"byte_end":192574,"line_start":48,"line_end":48,"column_start":18,"column_end":25},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1902},"to":{"krate":13,"index":140}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","byte_start":195113,"byte_end":195119,"line_start":39,"line_end":39,"column_start":18,"column_end":24},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1916},"to":{"krate":13,"index":140}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","byte_start":195575,"byte_end":195581,"line_start":61,"line_end":61,"column_start":22,"column_end":28},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1916},"to":{"krate":13,"index":146}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\std.rs","byte_start":195890,"byte_end":195896,"line_start":75,"line_end":75,"column_start":20,"column_end":26},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1916},"to":{"krate":13,"index":145}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":200565,"byte_end":200574,"line_start":92,"line_end":92,"column_start":18,"column_end":27},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1930},"to":{"krate":1,"index":1959}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":200672,"byte_end":200681,"line_start":98,"line_end":98,"column_start":18,"column_end":27},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1930},"to":{"krate":13,"index":140}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\rngs\\thread.rs","byte_start":201766,"byte_end":201775,"line_start":130,"line_end":130,"column_start":20,"column_end":29},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1930},"to":{"krate":13,"index":145}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":249296,"byte_end":249304,"line_start":38,"line_end":38,"column_start":6,"column_end":14},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1941},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":250724,"byte_end":250732,"line_start":88,"line_end":88,"column_start":23,"column_end":31},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1941},"to":{"krate":1,"index":4956}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":251141,"byte_end":251149,"line_start":102,"line_end":102,"column_start":20,"column_end":28},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1941},"to":{"krate":1,"index":1697}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":251739,"byte_end":251747,"line_start":118,"line_end":118,"column_start":25,"column_end":33},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1941},"to":{"krate":1,"index":1889}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":251859,"byte_end":251867,"line_start":125,"line_end":125,"column_start":27,"column_end":35},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1941},"to":{"krate":1,"index":1889}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":252168,"byte_end":252180,"line_start":141,"line_end":141,"column_start":23,"column_end":35},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1952},"to":{"krate":1,"index":5047}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":252715,"byte_end":252727,"line_start":162,"line_end":162,"column_start":32,"column_end":44},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1952},"to":{"krate":1,"index":5001}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":252951,"byte_end":252967,"line_start":173,"line_end":173,"column_start":19,"column_end":35},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1963},"to":{"krate":1,"index":5047}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":253492,"byte_end":253508,"line_start":195,"line_end":195,"column_start":28,"column_end":44},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1963},"to":{"krate":1,"index":5001}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":258441,"byte_end":258448,"line_start":326,"line_end":326,"column_start":28,"column_end":35},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":583},"to":{"krate":1,"index":1734}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":258612,"byte_end":258619,"line_start":331,"line_end":331,"column_start":21,"column_end":28},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":583},"to":{"krate":1,"index":1723}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":258892,"byte_end":258899,"line_start":338,"line_end":338,"column_start":27,"column_end":34},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":583},"to":{"krate":1,"index":1697}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":259019,"byte_end":259026,"line_start":343,"line_end":343,"column_start":20,"column_end":27},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":583},"to":{"krate":1,"index":1702}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":263767,"byte_end":263771,"line_start":471,"line_end":471,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":1981},"to":{"krate":0,"index":604}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":263774,"byte_end":263784,"line_start":471,"line_end":471,"column_start":20,"column_end":30},"kind":"SuperTrait","from":{"krate":1,"index":1734},"to":{"krate":0,"index":604}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":263787,"byte_end":263790,"line_start":471,"line_end":471,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":1723},"to":{"krate":0,"index":604}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":263793,"byte_end":263802,"line_start":471,"line_end":471,"column_start":39,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":1697},"to":{"krate":0,"index":604}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":263805,"byte_end":263807,"line_start":471,"line_end":471,"column_start":51,"column_end":53},"kind":"SuperTrait","from":{"krate":1,"index":1702},"to":{"krate":0,"index":604}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":263810,"byte_end":263823,"line_start":471,"line_end":471,"column_start":56,"column_end":69},"kind":"SuperTrait","from":{"krate":0,"index":74},"to":{"krate":0,"index":604}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":263842,"byte_end":263846,"line_start":472,"line_end":472,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":6510},"to":{"krate":0,"index":604}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\index.rs","byte_start":263860,"byte_end":263869,"line_start":472,"line_end":472,"column_start":37,"column_end":46},"kind":"SuperTrait","from":{"krate":1,"index":2067},"to":{"krate":0,"index":604}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212373,"byte_end":212381,"line_start":284,"line_end":284,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":5047},"to":{"krate":0,"index":654}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":212384,"byte_end":212389,"line_start":284,"line_end":284,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":1,"index":1976},"to":{"krate":0,"index":654}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":224036,"byte_end":224037,"line_start":609,"line_end":609,"column_start":28,"column_end":29},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":701},"to":{"krate":0,"index":654}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":224588,"byte_end":224603,"line_start":626,"line_end":626,"column_start":73,"column_end":88},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1974},"to":{"krate":1,"index":5047}},{"span":{"file_name":"C:\\Users\\flower\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\fde4113\\src\\seq\\mod.rs","byte_start":225055,"byte_end":225070,"line_start":641,"line_end":641,"column_start":9,"column_end":24},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1974},"to":{"krate":1,"index":5001}}]}